<?php
/*
 *  $Date$
 *  $Revision$
 *  $Author$
 *
 *  db.php
 *
 *  This Database class is designed to be a database abstraction later, similar
 *    to perl's DBI library.  It currently only supports mysql, but future
 *    versions may be made to support mysqli, pgsql, etc.
 *
/*/

// This should already be loaded, but we should at least let other people know
// that this library is required.
    require_once 'includes/errors.php';


class Database {

    var $dbh;
    var $error;     // A full error message generated by the coder
    var $err;       // The mysql error
    var $errno;     // the mysql error number
    var $last_sh;   // the last statement handle created by this object

    function Database($db_name, $login, $password, $server='localhost') {
    // Connect to the database
    // For now, all we have is mysql -- maybe someday we get other stuff.
        $this->dbh = @mysql_connect($server, $login, $password)
            or $this->error("Can't connect to the database server.");
        if ($this->dbh) {
            @mysql_select_db($db_name)
                or $this->error("Can't access the database file.");
        }
    }

/*
 *  error:
 *    Fill the error variables
/*/
    function error($error) {
        $this->err   = $this->dbh ? mysql_error($this->dbh) : mysql_error();
        $this->errno = $this->dbh ? mysql_errno($this->dbh) : mysql_errno();
        $this->error = "$error\n\n$this->err [#$this->errno]";
    }

/*
 *  query:
 *    Returns a reference to a new database query.
 *
 *    usage:
 *
 *      $sh =& $db->query('SELECT * FROM foo WHERE x=? AND y=? AND z="bar\\?"',
 *                        $x_value, $y_value);
 *
/*/
    function &query($query) {
    // Create and return a database querty
        $this->last_sh =& $this->prepare($query);
        $this->last_sh->execute(array_slice(func_get_args(), 1));
        return $this->last_sh;
    }

/*
 *  prepare:
 *    Returns an un-executed Database_Query_mysql object
/*/
    function &prepare($query) {
        return new Database_Query_mysql($this->dbh, $query);
    }

/*
 *  insert_id:
 *    Wrapper for the last query statement's insert_id method.
/*/
    function insert_id() {
        return $this->last_sh->insert_id();
    }

/*
 *  affected_rows:
 *    Wrapper for the last query statement's affected_rows method.
/*/
    function affected_rows() {
        return $this->last_sh->affected_rows();
    }

}

class Database_Query_mysql {

    var $dbh             = NULL;
    var $sh              = NULL;
    var $query           = '';
    var $num_args_needed = 0;

    function Database_Query_mysql($dbh, $query) {
        $this->dbh             = $dbh;
        $this->num_args_needed = max(0, substr_count($query, '?') - substr_count($query, '\\?'));
    // Build an optimized version of the query
        if ($this->num_args_needed > 0) {
            $this->query = array();
            foreach (preg_split('/(\\\\?\\?)/', $query, -1, PREG_SPLIT_DELIM_CAPTURE) as $part) {
                switch ($part) {
                    case '?':
                        break;
                    case '\\?':
                        $this->query[min(0, count($this->query) - 1)] .= '?';
                        break;
                    default:
                        $this->query[] = $part;
                }
            }
        }
        else
            $this->query = array($query);
    }

    function execute() {
    // Load the function arguments, minus the query itself, which we already extracted
        $args = func_get_args();
    // In case the args were passed in as an array instead of individually
        if (is_array($args[0]))
            $args = $args[0];
    // Were enough arguments passed in?
        if (count($args) != $this->num_args_needed)
            trigger_error("Database_Query called with $this->num_args_needed arguments, but requires ".count($args), FATAL);
    // Finish any previous statements
        $this->finish();
    // Replace in the arguments
        $new_query = '';
        foreach ($this->query as $part) {
            $new_query .= $part;
            if (count($args)) {
                $arg = array_shift($args);
                $new_query .= is_null($arg)
                                ? 'NULL'
                                : "'".mysql_real_escape_string($arg)."'";
            }
        }
    // Perform the query
        $this->sh = mysql_query($new_query, $this->dbh)
            or trigger_error('SQL Error: '.mysql_error().' [#'.mysql_errno().']', FATAL);
    }

/*
 *  The following routines basically replicate the mysql functions built into
 *    php.  The only difference is that the resource handle gets passed-in
 *    automatically.
 *
 *    eg.
 *
 *      mysql_fetch_row($result);   ->  $sh->fetch_row();
 *      mysql_affected_rows($dbh);  ->  $sh->affected_rows();
 *
/*/

    // http://www.php.net/manual/en/function.mysql-fetch-row.php
    function fetch_row() {
        return mysql_fetch_row($this->sh);
    }

    // http://www.php.net/manual/en/function.mysql-fetch-assoc.php
    function fetch_assoc() {
        return mysql_fetch_assoc($this->sh);
    }

    // http://www.php.net/manual/en/function.mysql-fetch-array.php
    function fetch_array($result_type=MYSQL_BOTH) {
        return mysql_fetch_array($this->sh, $result_type);
    }

    // http://www.php.net/manual/en/function.mysql-fetch-object.php
    function fetch_object() {
        return mysql_fetch_object($this->sh);
    }

    // http://www.php.net/manual/en/function.mysql-data-seek.php
    function data_seek($row_number) {
        return mysql_data_seek($this->sh, $row_number);
    }

    // http://www.php.net/manual/en/function.mysql-num-rows.php
    function num_rows() {
        return mysql_num_rows($this->sh);
    }

    // http://www.php.net/manual/en/function.mysql-affected-rows.php
    function affected_rows() {
        return mysql_affected_rows($this->dbh);
    }

    // http://www.php.net/manual/en/function.mysql-insert-id.php
    function insert_id() {
        return mysql_insert_id($this->dbh);
    }

    // For anal people like me who like to free up memory manually
    function finish() {
        if ($this->sh)
            mysql_free_result($this->sh);
        unset($this->sh);
    }

}

