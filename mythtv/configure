#!/bin/sh
#
# ffmpeg configure script (c) 2000, 2001, 2002 Fabrice Bellard
#

x86_mmx_cpus="pentium-mmx,pentium2,pentium3,pentium3m,pentium-m"
x86_mmx_cpus="$x86_mmx_cpus,pentium4,pentium4m,prescott"
x86_mmx_cpus="$x86_mmx_cpus,athlon,athlon-xp,athlon-tbird,athlon-4,athlon-mp,"
x86_mmx_cpus="$x86_mmx_cpus,c3,c3-2,k6,k6-2,k6-3"
x86_cpus="i386,i486,i586,i686,pentium,pentiumpro,${x86_mmx_cpus}"
x86_cmov_cpus="i686,pentiumpro,pentium2,pentium3,pentium3m,pentium-m,pentium4,"
x86_cmov_cpus="pentium4m,prescott,athlon,athlon-xp,athlon-tbird,athlon-4,athlon-mp,c3-2"
x86_64_cpus="x86-64,athlon64,k8,opteron,athlon-fx,nocona"

# default parameters
compile_type="release"
prefix="/usr/local"
libdir=""
mandir=""
bindir=""
cross_prefix=""
cc="gcc"
cxx="g++"
ccache="yes"
distcc="yes"
ar="ar"
ranlib="ranlib"
make="make"
strip="strip"
cpu=`uname -m`
cpu_raw="$cpu"
processor=`uname -p 2>/dev/null`
processor_flags=""
tune="generic"
powerpc_perf="no"
mmx="default"
iwmmxt="default"
altivec="default"
mmi="default"
audio_oss="default"
audio_alsa="default"
audio_arts="default"
audio_jack="default"
ivtv="yes"
ivtv_header="no"
dvb="no"
dvb_path="/usr/src/linux/include"
dvb_eit="no"
lirc="yes"
joystick_menu="yes"
firewire_cable_box="yes"
dbox2_dvb_box="yes"
x11_include_path="/usr/X11R6/include"
x11="yes"
xrandr="yes"
xv="yes"
xvmc="no"
xvmc_vld="yes"
xvmc_pro="no"
opengl_vsync="no"
direct_fb="no"
direct_x="no"
CONFIG_INCLUDEPATH=""
CONFIG_DEFINES=""
PROFILEFLAGS=""
proc_opt="no"
dvd="yes"
v4l="no"
valgrind="no"
frontend="yes"
backend="no"

KERNEL_RELEASE=`uname -r 2>/dev/null`
if test x"$KERNEL_RELEASE" != x"" ; then
    dvb_path="/usr/src/linux-$KERNEL_RELEASE/include"
fi

if test x"$CC" != x"" ; then
    cc="$CC"
fi

if test x"$CXX" != x"" ; then
    cxx="$CXX"
fi

if test x"$1" = x"-h" -o x"$1" = x"--help" ; then
cat << EOF

Usage: configure [options]
Options: [defaults in brackets after descriptions]

EOF
echo "Standard options:"
echo "  --help                   print this message"
echo "  --previous               use previous configure parameters if possible"
echo "  --compile-type=CTYPE     one of release, profile, debug [$compile_type]"
echo "                           NOTE: profile is for sampling profilers"
echo "  --prefix=PREFIX          install in PREFIX [$prefix]"
#echo "  --libdir=DIR             install libs in DIR [PREFIX/lib]"
#echo "  --mandir=DIR             man documentation in DIR [PREFIX/man]"
echo "  --disable-ccache         disable compiler cache (ccache)"
echo "  --disable-distcc         disable distributed compilation (distcc)"
#echo "  --enable-mp3lame         enable mp3 encoding via libmp3lame [default=no]"
#echo "  --enable-libogg          enable ogg support via libogg [default=no]"
#echo "  --enable-vorbis          enable vorbis support via libvorbis [default=no]"
#echo "  --enable-theora          enable theora support via libtheora [default=no]"
#echo "  --enable-faad            enable faad support via libfaad [default=no]"
#echo "  --enable-faadbin         build faad support with runtime linking [default=no]"
#echo "  --enable-faac            enable faac support via libfaac [default=no]"
#echo "  --enable-libgsm          enable gsm support via libgsm [default=no]"
#echo "  --enable-xvid            enable xvid support via xvidcore [default=no]"
#echo "  --enable-x264            enable H.264 encoding via x264 [default=no]"
#echo "  --enable-mingw32         enable mingw32 native/cross windows compile"
#echo "  --enable-a52             enable GPL'ed A52 support [default=no]"
#echo "  --enable-a52bin          open liba52.so.0 at runtime [default=no]"
#echo "  --enable-pp              enable GPL'ed post processing support [default=no]"
#echo "  --enable-shared-pp       use libpostproc.so [default=no]"
#echo "  --enable-shared          build shared libraries [default=no]"
#echo "  --enable-amr_nb          enable amr_nb float audio codec"
#echo "  --enable-amr_nb-fixed    use fixed point for amr-nb codec"
#echo "  --enable-sunmlib         use Sun medialib [default=no]"
#echo ""
echo "Advanced compile options (experts only):"
#echo "  --source-path=PATH       path of source code [$source_path]"
#echo "  --cross-prefix=PREFIX    use PREFIX for compile tools [$cross_prefix]"
#echo "  --cc=CC                  use C compiler CC [$cc]"
#echo "  --make=MAKE              use specified make [$make]"
echo "  --extra-cflags=ECFLAGS    add ECFLAGS to list of flags for C compile"
echo "  --extra-cxxflags=ECXFLAGS add ECXXFLAGS to list of flags for C++ compile"
#echo "  --extra-ldflags=ELDFLAGS add ELDFLAGS to LDFLAGS [$LDFLAGS]"
#echo "  --extra-libs=ELIBS       add ELIBS [$ELIBS]"
#echo "  --build-suffix=SUFFIX    suffix for application specific build []"
echo "  --cpu=CPU                only use instructions available on CPU [$cpu]"
echo "  --tune=CPU               tune instruction usage for a particular CPU [$tune]"
echo "  --arch=CPU               equivalent to \"--cpu=CPU --tune=CPU\""
#echo "  --powerpc-perf-enable    enable performance report on PPC (requires enabling PMC)"
echo "  --enable-proc-opt        enable processor specific compilation"
echo "  --disable-mmx            disable mmx usage"
echo "  --disable-iwmmxt         disable iwmmxt usage"
echo "  --disable-altivec        disable AltiVec usage"
echo "Advanced features (experts only):"
echo "  --disable-audio-oss      disable OSS audio support"
echo "  --disable-audio-alsa     disable ALSA audio support"
echo "  --disable-audio-arts     disable aRts audio support"
echo "  --disable-audio-jack     disable JACK audio support"
echo "  --disable-dvd            disable native DVD playback"
echo "  --enable-valgrind        disables timeouts for valgrind memory debugging"
echo "  --disable-frontend       disable frontend [breaks dependency checking, previews]"
echo "  --disable-backend        disable backend  [breaks dependency checking]"
#echo "  --disable-audio-beos     disable BeOS audio support [default=no]"
#echo "  --disable-dv1394         disable DV1394 grabbing [default=no]"
#echo "  --disable-network        disable network support [default=no]"
#echo "  --disable-zlib           disable zlib [default=no]"
#echo "  --disable-simple_idct    disable simple IDCT routines [default=no]"
#echo "  --disable-vhook          disable video hooking support"
#echo "  --enable-gprof           enable profiling with gprof [$gprof]"
#echo "  --disable-debug          disable debugging symbols"
#echo "  --disable-opts           disable compiler optimizations"
#echo "  --disable-mpegaudio-hp   faster (but less accurate)"
#echo "                           mpegaudio decoding [default=no]"
#echo "  --disable-ffserver       disable ffserver build"
#echo "  --disable-ffplay         disable ffplay build"
#echo "  --enable-small           optimize for size instead of speed"
#echo "  --enable-memalign-hack   emulate memalign, interferes with memory debuggers"
#echo "  --disable-strip          disable stripping of executables and shared libraries"
#echo "  --enable-codec=codec     enables codec"
#echo "  --disable-codec=codec    disables codec"
#echo "  --disable-encoders       disables all encoders"
#echo "  --disable-decoders       disables all decoders"
#echo "  --disable-muxers         disables all muxers"
#echo "  --disable-demuxers       disables all demuxers"
echo "  --disable-lirc           disable lirc support (Infrared Remotes)"
echo "  --disable-joystick-menu  disable joystick menu"
echo "  --disable-firewire       disable support for FireWire cable boxes"
echo "  --disable-dbox2          disable support for Nokia DBOX2 DVB boxes (or compatibles)"
echo "  --disable-v4l            disable Video4Linux support"
echo "  --disable-ivtv           disable ivtv support (PVR-x50) req. v4l support"
#echo "  --enable-ivtv-sys-header use ivtv system headers instead of myth headers"
echo "  --enable-dvb             enable DVB support (must supply header directory)"
echo "  --dvb-path=HDRLOC        location of directory containing"
echo "                           'linux/dvb/frontend.h', not the"
echo "                           directory with frontend.h [$dvb_path]"
echo "  --enable-dvb-eit         enable DVB EIT support (--enable-dvb is required)"
echo "  --disable-x11            disable X11 support"
echo "  --x11-path=X11LOC	 location of X11 include files [$x11_include_path-path]"
echo "  --disable-xrandr         disable X11 resolution switching"
echo "  --disable-xv             disable XVideo   (X11 video output accel.)"
echo "  --enable-xvmc            enable XvMC      (Linux/BSD MPEG accel.)"
echo "  --enable-xvmc-pro        enable XvMC for the unichrome pro (NOT unichrome) chipset"
#echo "  --disable-xvmc-vld       disable XvMC-VLD (VIA Epia MPEG accel.)"
echo "  --enable-opengl-vsync    enable OpenGL vsync method"
echo "  --enable-directfb        enable DirectFB  (Linux non-X11 video)"
echo "  --enable-directx         enable DirectX   (Microsoft video)"
#echo ""
#echo "NOTE: The object files are build at the place where configure is launched"
exit 1
fi

# set temporary file name
if test ! -z "$TMPDIR" ; then
    TMPDIR1="${TMPDIR}"
elif test ! -z "$TEMPDIR" ; then
    TMPDIR1="${TEMPDIR}"
else
    TMPDIR1="/tmp"
fi

TMPC="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.c"
TMPO="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.o"
TMPE="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}"
TMPS="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.S"
TMPH="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.h"

if test -f /proc/cpuinfo ; then
    if test x"$processor" = x"" -o x"$processor" = x"$cpu_raw" -o \
            x"$processor" = x"unknown" ; then
        processor=`cat /proc/cpuinfo | grep "model name" | head -n 1`
    fi
    processor_flags=`cat /proc/cpuinfo | grep "flags" | head -n 1`
fi

# These have to be looked up early for some types of cross-compiling to work
cpu_overide="no"
for opt do
  case "$opt" in
  --cpu=*)
          cpu=`echo $opt | cut -d '=' -f 2`
          cpu_raw="$cpu"
          processor=""
          processor_flags=""
          cpu_overide="yes"
  ;;
  --tune=*)
          tune=`echo $opt | cut -d '=' -f 2`
          tune_raw="$tune"
          processor=""
          processor_flags=""
  ;;
  --arch=*)
          arch=`echo $opt | cut -d '=' -f 2`
          cpu_overide="yes"
          cpu="$arch"
          cpu_raw="$arch"
          tune="$arch"
          tune_raw="$arch"
          processor=""
          processor_flags=""
  ;;
  esac
done

is_x86_cpu() {
    expr ",${x86_cpus}," : ".*,$1," > /dev/null
}

if is_x86_cpu "$cpu" ; then
    cpu="x86"
fi

is_x86_64_cpu() {
    expr ",${x86_64_cpus}," : ".*,$1," > /dev/null
}

if is_x86_64_cpu "$cpu" ; then
    cpu="x86_64"
fi

case "$cpu" in
  x86)
  ;;
  x86_64)
    cpu="x86"
    canon_arch="`cc -dumpmachine | sed -e 's,\([^-]*\)-.*,\1,'`"
    if [ x"$canon_arch" = x"x86_64" -o x"$canon_arch" = x"amd64" ]; then
      if [ -z "`echo $CFLAGS | grep -- -m32`"  ]; then
        cpu="x86_64"
      fi
    fi
  ;;
  # armv4l is a subset of armv5tel
  armv4l|armv5tel)
    cpu="armv4l"
  ;;
  alpha)
    cpu="alpha"
  ;;
  "Power Macintosh"|ppc)
    cpu="powerpc"
  ;;
  mips|mipsel)
    cpu="mips"
  ;;
  sun4u|sparc64)
    cpu="sparc64"
  ;;
  sparc)
    cpu="sparc"
  ;;
  sh4)
    cpu="sh4"
  ;;
  parisc|parisc64)
    cpu="parisc"
  ;;
  s390|s390x)
    cpu="s390"
  ;;
  m68k)
    cpu="m68k"
  ;;
  ia64)
    cpu="ia64"
  ;;
  *)
    cpu="unknown"
  ;;
esac

gprof="no"
audio_beos="no"
dv1394="no"
dc1394="no"
network="yes"
zlib="yes"
libgsm="no"
mp3lame="no"
libogg="no"
vorbis="no"
theora="no"
faad="no"
faadbin="no"
faac="no"
xvid="no"
x264="no"
a52="yes"
a52bin="no"
dts="no"
pp="yes"
shared_pp="no"
mingw32="no"
cygwin="no"
os2="no"
lshared="no"
optimize="yes"
debug="no"
dostrip="yes"
extralibs="-lm"
simpleidct="yes"
bigendian="no"
inttypes="yes"
emu_fast_int="no"
vhook="no"
dlfcn="no"
dlopen="no"
mpegaudio_hp="yes"
SHFLAGS=-shared
netserver="no"
need_inet_aton="no"
ffserver="no"
ffplay="no"
LDFLAGS=-Wl,--warn-common
FFSLDFLAGS=-Wl,-E
LIBPREF="lib"
LIBSUF=".a"
SLIBPREF="lib"
SLIBSUF=".so"
EXESUF=""
BUILDSUF=""
amr_nb="no"
amr_wb="no"
amr_nb_fixed="no"
amr_if2="no"
sunmlib="no"
pthreads="no"
gpl="yes"
memalignhack="no"
muxers="yes"
demuxers="yes"

# OS specific
targetos=`uname -s`
case $targetos in
BeOS)
prefix="/boot/home/config"
# helps building libavcodec
CFLAGS="-DPIC -fomit-frame-pointer"
# 3 gcc releases known for BeOS, each with ugly bugs
gcc_version="`$cc -v 2>&1 | grep version | cut -d ' ' -f3-`"
case "$gcc_version" in
2.9-beos-991026*|2.9-beos-000224*) echo "R5/GG gcc"
mmx="no"
;;
*20010315*) echo "BeBits gcc"
CFLAGS="$CFLAGS -fno-expensive-optimizations"
;;
esac
SHFLAGS=-nostart
# disable linux things
audio_oss="no"
v4l="no"
dv1394="no"
# enable beos things
audio_beos="yes"
# no need for libm, but the inet stuff
# Check for BONE
if (echo $BEINCLUDES|grep 'headers/be/bone' >/dev/null); then
extralibs="-lbind -lsocket"
else
netserver="yes"
need_inet_aton="yes"
extralibs="-lnet"
fi ;;
SunOS)
v4l="no"
dv1394="no"
make="gmake"
LDFLAGS=""
FFSLDFLAGS=""
need_inet_aton="yes"
extralibs="$extralibs -lsocket -lnsl"
;;
NetBSD)
v4l="no"
audio_oss="yes"
dv1394="no"
make="gmake"
LDFLAGS="$LDFLAGS -export-dynamic"
case `uname -r` in
2.*) extralibs="$extralibs -lossaudio"
;;
esac
;;
OpenBSD)
v4l="no"
audio_oss="yes"
joystick_menu="no"
audio_alsa="no"
audio_arts="no"
audio_jack="no"
dv1394="no"
ivtv="no"
dbox2_dvb_box="no"
dvb="no"
backend="no"
make="gmake"
CFLAGS="$CFLAGS \$(PIC) -DPIC"
LDFLAGS="$LDFLAGS -export-dynamic -pthread"
audio_oss_libs="-lossaudio"
extralibs="$extralibs"
CCONFIG="$CCONFIG openbsd"
;;
FreeBSD)
joystick_menu="no"
dv1394="no"
make="gmake"
CFLAGS="-pthread"
LDFLAGS="$LDFLAGS -export-dynamic -pthread"
CCONFIG="$CCONFIG freebsd"
backend="yes"
v4l="yes"
;;
BSD/OS)
v4l="no"
joystick_menu="no"
dv1394="no"
extralibs="-lpoll -lgnugetopt -lm"
make="gmake"
;;
Darwin)
cc="cc"
v4l="no"
ivtv="no"
dvb="no"
x11="no"
joystick_menu="no"
audio_oss="no"
audio_alsa="no"
audio_arts="no"
audio_jack="no"
dv1394="no"
ffserver="no"
SHFLAGS="-dynamiclib"
extralibs=""
darwin="yes"
strip="strip -x"
LDFLAGS="-Wl,-search_paths_first"
FFSLDFLAGS=-Wl,-bind_at_load
;;
MINGW32*)
# Note: the rest of the mingw32 config is done afterwards as mingw32
# can be forced on command line for linux cross compilation
mingw32="yes"
;;
CYGWIN*)
v4l="no"
ivtv="no"
dvb="no"
x11="no"
joystick_menu="no"
audio_oss="no"
audio_alsa="no"
audio_arts="no"
audio_jack="no"
dv1394="no"
extralibs=""
cygwin="yes"
EXESUF=".exe"
CONFIG_DEFINES="$CONFIG_DEFINES _WIN32"
;;
Linux)
LDFLAGS="$LDFLAGS -rdynamic"
CCONFIG="$CCONFIG linux"
backend="yes"
v4l="yes"
;;
IRIX*)
ranlib="echo ignoring ranlib"
v4l="no"
audio_oss="no"
make="gmake"
;;
OS/2)
TMPE=$TMPE".exe"
ar="emxomfar -p128"
ranlib="echo ignoring ranlib"
strip="echo ignoring strip"
CFLAGS="-Zomf"
LDFLAGS="-Zomf -Zstack 16384 -s"
SHFLAGS="-Zdll -Zomf"
FFSLDFLAGS=""
LIBPREF=""
LIBSUF=".lib"
SLIBPREF=""
SLIBSUF=".dll"
EXESUF=".exe"
extralibs=""
v4l="no"
audio_oss="no"
dv1394="no"
network="no"
ffserver="no"
vhook="no"
os2="yes"

;;
*) ;;
esac

# From mplayer configure. We need TARGET_OS available
# to the Makefile, so it can distinguish between flavors
# of AltiVec on PowerPC
TARGET_OS=`uname -s 2>&1`
  case "$TARGET_OS" in
  Linux|FreeBSD|NetBSD|BSD/OS|OpenBSD|SunOS|QNX|Darwin|GNU|BeOS)
    ;;
  IRIX*)
    TARGET_OS=IRIX
    ;;
  HP-UX*)
    TARGET_OS=HP-UX
    ;;
  [cC][yY][gG][wW][iI][nN]*)
    TARGET_OS=CYGWIN
    ;;
  *)
    TARGET_OS="$TARGET_OS-UNKNOWN"
    ;;
  esac

# find source path
source_path="`dirname $0`"
source_path_used="yes"
if test -z "$source_path" -o "$source_path" = "." ; then
    source_path=`pwd`
    source_path_used="no"
else
    source_path="`cd \"$source_path\"; pwd`"
fi

FFMPEG_CONFIGURATION=""
for opt do
  FFMPEG_CONFIGURATION="$FFMPEG_CONFIGURATION ""$opt"
done

CODEC_LIST=`grep 'register_avcodec(&[a-z]' $source_path/libs/libavcodec/allcodecs.c| sed 's/.*&\(.*\)).*/\1/'`

if [ -e config.log ] ; then
    PCONF=`cat config.log | tail -n 1 | grep configure`
    if test x"$PCONF" != x"" ; then
        PCONF=`echo $PCONF | sed 's/.\/configure//g'`
    fi
    for opt do
        if test x"$opt" = x"--prev" -o x"$opt" = x"--previous" ; then
            if test x"$PCONF" != "--prev" ; then
                echo "Options: $PCONF"
                ./configure $PCONF
                exit
            fi
        fi
    done
fi

for opt do
  case "$opt" in
  --compile-type=*) compile_type=`echo $opt | cut -d '=' -f 2`
  ;;  
  --prefix=*) prefix=`echo $opt | cut -d '=' -f 2`; force_prefix=yes
  ;;
  --libdir=*) libdir=`echo $opt | cut -d '=' -f 2`; force_prefix=yes
  ;;
  --mandir=*) mandir=`echo $opt | cut -d '=' -f 2`
  ;;
  --source-path=*) source_path=`echo $opt | cut -d '=' -f 2`
  ;;
  --cross-prefix=*) cross_prefix=`echo $opt | cut -d '=' -f 2`
  ;;
  --cc=*) cc=`echo $opt | cut -d '=' -f 2-`
  ;;
  --make=*) make=`echo $opt | cut -d '=' -f 2`
  ;;
  --extra-cflags=*) ECFLAGS=${opt#--extra-cflags=}
  ;;
  --extra-cxxflags=*) ECXXFLAGS=${opt#--extra-cxxflags=}
  ;;
  --extra-ldflags=*) LDFLAGS="$LDFLAGS ${opt#--extra-ldflags=}"
  ;;
  --extra-libs=*) extralibs=${opt#--extra-libs=}
  ;;
  --build-suffix=*) BUILDSUF=${opt#--build-suffix=}
  ;;
  --disable-ccache) ccache="no"
  ;;
  --disable-distcc) distcc="no"
  ;;
  --powerpc-perf-enable) powerpc_perf="yes"
  ;;
  --enable-proc-opt) proc_opt="yes"
  ;;
  --disable-proc-opt) proc_opt="no"
  ;;
  --enable-mmx) mmx="yes"
  ;;
  --disable-mmx) mmx="no"
  ;;
  --disable-iwmmxt) iwmmxt="no"
  ;;
  --disable-altivec) altivec="no"
  ;;
  --enable-gprof) gprof="yes"
  ;;
  --enable-v4l) v4l="yes"
  ;;
  --disable-v4l) v4l="no"
  ;;
  --disable-audio-oss) audio_oss="no"
  ;;
  --disable-audio-alsa) audio_alsa="no"
  ;;
  --disable-audio-arts) audio_arts="no"
  ;;
  --disable-audio-jack) audio_jack="no"
  ;;
  --disable-audio-beos) audio_beos="no"
  ;;
  --disable-dv1394) dv1394="no"
  ;;
  --disable-network) network="no"; ffserver="no"
  ;;
  --disable-zlib) zlib="no"
  ;;
  --disable-a52) a52="no"
  ;;
  --enable-a52bin) a52bin="yes"
  ;;
  --enable-dts) dts="yes" ; extralibs="$extralibs -ldts"
  ;;
  --disable-pp) pp="no"
  ;;
  --enable-shared-pp) shared_pp="yes"
  ;;
  --enable-libgsm) libgsm="yes"
  ;;
#  --enable-mp3lame) mp3lame="yes"
#  ;;
#  --enable-libogg) libogg="yes"
#  ;;
#  --enable-vorbis) vorbis="yes"
#  ;;
#  --enable-theora) theora="yes"
#  ;;
  --enable-faad) faad="yes"
  ;;
  --enable-faadbin) faadbin="yes"
  ;;
  --enable-faac) faac="yes"
  ;;
  --enable-xvid) xvid="yes"
  ;;
  --enable-x264) x264="yes"; extralibs="$extralibs -lx264"
  ;;
  --enable-dc1394) dc1394="yes"
  ;;
  --disable-vhook) vhook="no"
  ;;
  --disable-simple_idct) simpleidct="no"
  ;;
  --enable-mingw32) mingw32="yes"
  ;;
  --enable-shared) lshared="yes"
  ;;
  --disable-debug) debug="no"
  ;;
  --disable-opts) optimize="no"
  ;;
  --disable-mpegaudio-hp) mpegaudio_hp="no"
  ;;
  --disable-ffserver) ffserver="no"
  ;;
  --disable-ffplay) ffplay="no"
  ;;
  --enable-small) optimize="small"
  ;;
  --enable-amr_nb) amr_nb="yes"
  ;;
  --enable-amr_nb-fixed) amr_nb_fixed="yes"
  ;;
  --enable-amr_wb) amr_wb="yes"
  ;;
  --enable-amr_if2) amr_if2="yes"
  ;;
  --enable-sunmlib) sunmlib="yes"
  ;;
  --enable-pthreads) pthreads="yes"
  ;;
  --enable-gpl) gpl="yes"
  ;;
  --enable-memalign-hack) memalignhack="yes"
  ;;
  --disable-strip) dostrip="no"
  ;;
  --enable-codec=*) CODEC_LIST="$CODEC_LIST ${opt#--enable-codec=}"
  ;;
  --disable-codec=*) CODEC_LIST="`echo $CODEC_LIST | sed -e \"s#${opt#--disable-codec=}##\"`"
  ;;
  --disable-encoders) CODEC_LIST="`echo $CODEC_LIST | sed 's/[-_a-zA-Z0-9]*encoder//g'`"
  ;;
   --disable-decoders) CODEC_LIST="`echo $CODEC_LIST | sed 's/[-_a-zA-Z0-9]*decoder//g'`"
  ;;
  --disable-muxers) muxers="no"
  ;;
  --disable-demuxers) demuxers="no"
  ;;
  --enable-ivtv) ivtv="yes"
  ;;
  --disable-ivtv) ivtv="no"
  ;;
  --enable-ivtv-sys-header) ivtv_header="yes"
  ;;
  --disable-ivtv-sys-header) ivtv_header="no"
  ;;
  --enable-lirc) lirc="yes"
  ;;
  --disable-lirc) lirc="no"
  ;;
  --enable-joystick-menu) joystick_menu="yes"
  ;;
  --disable-joystick-menu) joystick_menu="no"
  ;;
  --enable-firewire) firewire_cable_box="yes"
  ;;
  --disable-firewire) firewire_cable_box="no"
  ;;
  --enable-dbox2) dbox2_dvb_box="yes"
  ;;
  --disable-dbox2) dbox2_dvb_box="no"
  ;;
  --enable-dvb) dvb="yes"
  ;;
  --disable-dvb) dvb="no"
  ;;
  --dvb-path=*) dvb_path=`echo $opt | cut -d '=' -f 2`
  ;;
  --enable-dvb-eit) dvb_eit="yes"
  ;;
  --disable-dvb-eit) dvb_eit="no"
  ;;
  --enable-x11) x11="yes"
  ;;
  --disable-x11) x11="no"
  ;;
  --x11-path=*) x11_include_path=`echo $opt | cut -d '=' -f 2`
  ;;
  --enable-xrandr) xrandr="yes"
  ;;
  --disable-xrandr) xrandr="no"
  ;;
  --enable-xv) xv="yes"
  ;;
  --disable-xv) xv="no"
  ;;
  --enable-xvmc) xvmc="yes"
  ;;
  --disable-xvmc) xvmc="no"
  ;;
  --enable-xvmc-vld) xvmc_vld="yes"
  ;;
  --disable-xvmc-vld) xvmc_vld="no"
  ;;
  --enable-xvmc-pro) xvmc_pro="yes"
  ;;
  --disable-xvmc-pro) xvmc_pro="no"
  ;;
  --enable-opengl-vsync) opengl_vsync="yes"
  ;;
  --disable-opengl-vsync) opengl_vsync="no"
  ;;
  --enable-directfb) direct_fb="yes"
  ;;
  --disable-directfb) direct_fb="no"
  ;;
  --enable-directx) direct_x="yes"
  ;;
  --disable-directx) direct_x="no"
  ;;
  --enable-dvd) dvd="yes"
  ;;
  --disable-dvd) dvd="no"
  ;;
  --enable-valgrind) valgrind="yes"
  ;;
  --disable-valgrind) valgrind="no"
  ;;
  --enable-frontend) frontend="yes"
  ;;
  --disable-frontend) frontend="no"
  ;;
  --enable-backend) backend="yes"
  ;;
  --disable-backend) backend="no"
  ;;
  --cpu=*|--tune=*|--arch=*)
      # We already processed these options earlier so the empty case
      # here is so we don't error out and say they're unknown options.
  ;;
  *)
  echo "Unknown option \"$opt\"."
  echo "See $0 --help for available options."
  exit 1
  ;;
  esac
done

if test x"$v4l" = x"no" ; then
  ivtv="no"
fi

has_library()
{
    if test -f /etc/ld.so.conf ; then
        LIBPATHS=`cat /etc/ld.so.conf | grep -v "#" | grep -v "include"`
    else
        LIBPATHS=''
    fi
    LIBPATHS="$LIBPATHS `echo $LD_LIBRARY_PATH | sed s/':'/' '/g` "
    # Mac OS X has a different variable for this:
    LIBPATHS="$LIBPATHS `echo $DYLD_LIBRARY_PATH | sed s/':'/' '/g` "

    # recurse down just one level, should be enough in most cases
    if test -f /etc/ld.so.conf ; then
        INCL=`cat /etc/ld.so.conf | grep -v "#" | grep  "include"`
        SRCH=`echo $INCL | sed s/"include "//g`
        for x in $SRCH ; do
            LP_APPEND=`cat /etc/$x | grep -v "#" | grep -v "include"`
            LIBPATHS="$LIBPATHS $LP_APPEND"
        done
    fi

    LIBPATHS="`echo $LIBPATHS /lib /usr/lib /usr/local/lib /usr/X11R6/lib | sed s/'\/ '/' '/g` "

    HAS_IT="no"
    for LIBPATH in $LIBPATHS ; do
        if test x`ls $LIBPATH/$1* 2> /dev/null | head -n 1` != x"" ; then
            HAS_IT="yes"
        fi
    done
    expr $HAS_IT : "yes" > /dev/null
}

has_header()
{
    HPATHS="/usr/local/include /usr/include /usr/include/g++-v3 /usr/X11R6/include"
    INCL=`echo $DYLD_LIBRARY_PATH $LD_LIBRARY_PATH | sed s/':'/' '/g`
    HPATHS="$HPATHS `echo $INCL | sed s/lib/include/g` "

    HAS_IT="no"
    for HPATH in $HPATHS ; do
        if test x`ls $HPATH/$1* 2> /dev/null | head -n 1` != x"" ; then
            HAS_IT="yes"
        fi
    done
    expr $HAS_IT : "yes" > /dev/null
}

CCONFIG="$CCONFIG $compile_type"
if test x$compile_type = x"profile" ; then
    PROFILEFLAGS="-g -DNDEBUG"
fi

if test "$theora" = "yes" ; then
    if test "$libogg" = "no"; then
        echo "libogg must be enabled to enable Theora"
        fail="yes"
        theora="no"
    fi
fi

if test "$vorbis" = "yes" ; then
    if test "$libogg" = "no"; then
        echo "libogg must be enabled to enable Vorbis"
        fail="yes"
        vorbis="no"
    fi
fi

if test "$gpl" != "yes"; then
    if test "$pp" != "no" -o "$shared_pp" != "no"; then
        echo "The Postprocessing code is under GPL and --enable-gpl is not specified"
        fail="yes"
    fi

    if test "$a52" != "no" -o "$a52bin" != "no"; then
        echo "liba52 is under GPL and --enable-gpl is not specified"
        fail="yes"
    fi

    if test "$xvid" != "no"; then
        echo "libxvidcore is under GPL and --enable-gpl is not specified"
        fail="yes"
    fi

    if test "$x264" != "no"; then
        echo "x264 is under GPL and --enable-gpl is not specified"
        fail="yes"
    fi

    if test "$dts" != "no"; then
        echo "libdts is under GPL and --enable-gpl is not specified"
        fail="yes"
    fi

    if test "$faad" != "no" -o "$faadbin" != "no"; then
        cat > $TMPC << EOF
            #include <faad.h>
            int main( void ) { return 0; }
EOF

        if $cc $CFLAGS -o $TMPE $TMPC 2> /dev/null ; then
            cat > $TMPC << EOF
                #include <faad.h>
                #ifndef FAAD2_VERSION
                ok faad1
                #endif
                int main( void ) { return 0; }
EOF
            if $cc $CFLAGS -o $TMPE $TMPC 2> /dev/null ; then
                echo "faad2 is under GPL and --enable-gpl is not specified"
                fail="yes"
            fi
        else
            faad="no"
            faadbin="no"
            echo "faad test failed"
        fi
    fi


    if test "$fail" = "yes"; then
        exit 1
    fi
fi

is_x86_mmx() {
    expr ",${x86_mmx_cpus}," : ".*,$1," > /dev/null
}

# compute mmx state
if test x"$mmx" = x"default"; then
    mmx="no"
    if test x"$cpu" = x"x86_64"; then
        mmx="yes"
    fi
    # defaults to mmx="yes" with i686 (despite pentiumpro),
    if is_x86_mmx "$cpu_raw"; then
        mmx="yes"
    fi

    # if !cpu && !tune && !arch & processor_flags, then...
    if test x"$cpu_overide" != x"yes" -a x"$tune_raw" = x"" -a \
            x"$processor_flags" != x"" ; then
        mmx="no"
        if expr "$processor_flags" : ".*mmx" > /dev/null ; then
            mmx="yes"
        fi
    fi
fi

# check iwmmxt support
if test $iwmmxt = "default" -a $cpu = "armv4l"; then
    cat > $TMPC << EOF
        int main(void) {
        __asm__ __volatile__ ("wunpckelub wr6, wr4");
        }
EOF

    iwmmxt=no
    if ${cross_prefix}${cc} -o $TMPO $TMPC 2> /dev/null ; then
        iwmmxt=yes
    fi
fi

#Darwin CC versions
needmdynamicnopic="no"
if test $targetos = Darwin; then
    if test -n "`$cc -v 2>&1 | grep xlc`"; then
        CFLAGS="$CFLAGS -qpdf2 -qlanglvl=extc99 -qmaxmem=-1 -qarch=auto -qtune=auto"
    else
	gcc_version="`$cc -v 2>&1 | grep version | cut -d ' ' -f3-`"
	case "$gcc_version" in
	    *2.95*) 
                CFLAGS="$CFLAGS -no-cpp-precomp -pipe -fomit-frame-pointer"
		;;
	    *[34].*)
                CFLAGS="$CFLAGS -no-cpp-precomp -pipe -fomit-frame-pointer -force_cpusubtype_ALL -Wno-sign-compare"
		if test "$lshared" = no; then
		   needmdynamicnopic="yes"
		fi
		;;
	    *)
		CFLAGS="$CFLAGS -no-cpp-precomp -pipe -fomit-frame-pointer"
		if test "$lshared" = no; then
		   needmdynamicnopic="yes"
		fi
		;;
	esac
    fi
fi

# Can only do AltiVec on PowerPC
if test $altivec = "default"; then
    if test $cpu = "powerpc"; then
        altivec="yes"
    else
        altivec="no"
    fi
fi

# Add processor-specific flags
TUNECPU="generic"
POWERPCMODE="32bits"
if test $tune != "generic"; then
    case $tune in
	601|ppc601|PowerPC601)
            ARCHFLAGS="-mcpu=601"
	    if test $altivec = "yes"; then
		echo "WARNING: tuning for PPC601 but altivec enabled !";
	    fi
	    TUNECPU=ppc601
	;;
	603*|ppc603*|PowerPC603*)
	    ARCHFLAGS="-mcpu=603"
	    if test $altivec = "yes"; then
		echo "WARNING: tuning for PPC603 but altivec enabled !";
	    fi
	    TUNECPU=ppc603
	;;
	604*|ppc604*|PowerPC604*)
	    ARCHFLAGS="-mcpu=604"
	    if test $altivec = "yes"; then
		echo "WARNING: tuning for PPC604 but altivec enabled !";
	    fi
	    TUNECPU=ppc604
	;;
	G3|g3|75*|ppc75*|PowerPC75*)
	    ARCHFLAGS="-mcpu=750 -mtune=750 -mpowerpc-gfxopt"
	    if test $altivec = "yes"; then
		echo "WARNING: tuning for PPC75x but altivec enabled !";
	    fi
	    TUNECPU=ppc750
	;;
	G4|g4|745*|ppc745*|PowerPC745*)
	    ARCHFLAGS="-mcpu=7450 -mtune=7450 -mpowerpc-gfxopt"
	    if test $altivec = "no"; then
		echo "WARNING: tuning for PPC745x but altivec disabled !";
	    fi
	    TUNECPU=ppc7450
	;;
	74*|ppc74*|PowerPC74*)
	    ARCHFLAGS="-mcpu=7400 -mtune=7400 -mpowerpc-gfxopt"
	    if test $altivec = "no"; then
		echo "WARNING: tuning for PPC74xx but altivec disabled !";
	    fi
	    TUNECPU=ppc7400
	;;
	G5|g5|970|ppc970|PowerPC970|power4*|Power4*)
	    ARCHFLAGS="-mcpu=970 -mtune=970 -mpowerpc-gfxopt -mpowerpc64"
	    if test $altivec = "no"; then
		echo "WARNING: tuning for PPC970 but altivec disabled !";
	    fi
	    TUNECPU=ppc970
            POWERPCMODE="64bits"
	;;
	*)
            ARCHFLAGS="-mtune=$tune"
            TUNECPU="$tune"
	;;
    esac
fi

if test x"$cpu_overide" = x"yes"; then
    ARCHFLAGS="-mcpu=$cpu_raw $ARCHFLAGS"
fi

# AltiVec flags: The FSF version of GCC differs from the Apple version 
if test $cpu = "powerpc"; then
    if test $altivec = "yes"; then
        if test -n "`$cc -v 2>&1 | grep version | grep Apple`"; then
            ARCHFLAGS="$ARCHFLAGS -faltivec"
        else
            ARCHFLAGS="$ARCHFLAGS -maltivec -mabi=altivec"
        fi
    fi
fi

# See if we have <altivec.h>
cat > $TMPC << EOF
#include <altivec.h>
int main( void ) { return 0; }
EOF

_altivec_h="no"
if $cc $CFLAGS $ARCHFLAGS -o $TMPE $TMPC 2> /dev/null ; then
_altivec_h="yes"
fi

# See does our compiler support Motorola AltiVec C API
if test $altivec = "yes"; then
if test $_altivec_h = "yes"; then
cat > $TMPC << EOF
#include <altivec.h>
int main(void) {
    vector signed int v1, v2, v3;
    v1 = vec_add(v2,v3);
    return 0;
}
EOF
else
cat > $TMPC << EOF
int main(void) {
    vector signed int v1, v2, v3;
    v1 = vec_add(v2,v3);
    return 0;
}
EOF
fi
$cc $CFLAGS $ARCHFLAGS -o $TMPE $TMPC 2> /dev/null || altivec="no"
fi

# if either tune or cpu is c3 or c3-2 optimize for smallness
if test x"$cpu_raw" = x"c3" -o x"$cpu_raw" = x"c3-2"; then
    ARCHFLAGS="-march=$cpu"
    optimize="small"
fi
if test x"$tune" = x"c3" -o x"$tune" = x"c3-2"; then
    ARCHFLAGS="-march=$tune"
    optimize="small"
fi

# if no tune setting and we know cpu class look at $processor 
if test x"$tune" = x"generic" -a x"$cpu_overide" != x"yes"; then
# first try to tune based on processor info

# P4
   if expr "$processor" : "pentium4" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*Pentium(R) [4M]" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*Xeon(TM) CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*Celeron(R) M processor" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
       optimize="small"
   elif expr "$processor" : ".*Celeron(R) CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
       optimize="small"
# P3
   elif expr "$processor" : "pentium3" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
   elif expr "$processor" : ".*Pentium.* III" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
   elif expr "$processor" : ".*Coppermine" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
       optimize="small"
   elif expr "$processor" : ".*Celeron(TM) CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
       optimize="small"
# P2
   elif expr "$processor" : "pentium2" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
   elif expr "$processor" : ".*Mendocino" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
       optimize="small"
   elif expr "$processor" : ".*Klamath" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
       optimize="small"
   elif expr "$processor" : ".*Deschutes" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
       optimize="small"
# AMD Turion
   elif expr "$processor" : ".*AMD Turion(tm) 64" > /dev/null ; then
       ARCHFLAGS="-march=k8"
# Athlon 64
   elif expr "$processor" : ".*AMD Athlon(tm) 64" > /dev/null ; then
       ARCHFLAGS="-march=k8"
# Athlon XP
   elif expr "$processor" : "athlon-xp" > /dev/null ; then
       ARCHFLAGS="-march=pentiumpro -mmmx"
   elif expr "$processor" : ".*AMD Athlon(tm) XP" > /dev/null ; then
       ARCHFLAGS="-march=pentiumpro -mmmx"
   elif expr "$processor" : ".*AMD Sempron(tm)" > /dev/null ; then
       ARCHFLAGS="-march=pentiumpro -mmmx"
# Athlon
   elif expr "$processor" : "athlon" > /dev/null ; then
       ARCHFLAGS="-march=athlon"
   elif expr "$processor" : ".*AMD Athlon(..)" > /dev/null ; then
       ARCHFLAGS="-march=athlon"
   elif expr "$processor" : ".*AMD Duron(..)" > /dev/null ; then
       ARCHFLAGS="-march=athlon"
       optimize="small"
# K6
   elif expr "$processor" : ".*AMD-K6(tm) 3D" > /dev/null ; then
       ARCHFLAGS="-march=pentium-mmx"
       optimize="small"
# Transmeta Crusoe
   elif expr "$processor" : ".*Crusoe(m) Processor TM5600" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
# c3-2
   elif expr "$processor" : ".*VIA Nehemiah" > /dev/null ; then
       ARCHFLAGS="-march=c3-2"
       optimize="small"
       cpu_raw="c3-2"
# c3
   elif expr "$processor" : ".*VIA.*Ezra" > /dev/null ; then
       ARCHFLAGS="-march=c3"
       optimize="small"
       cpu_raw="c3"
   elif expr "$processor" : ".*VIA Samuel" > /dev/null ; then
       ARCHFLAGS="-march=c3"
       optimize="small"
       cpu_raw="c3"

# if no known processor info, tune base on cpu_raw info
   elif test x"$cpu_raw" = x"i686" -a x"$mmx" = x"yes" ; then
       ARCHFLAGS="-march=pentium2"
       proc_error_msg="yes"
   elif test x"$cpu_raw" = x"i686" -a x"$mmx" = x"no" ; then
       ARCHFLAGS="-march=pentiumpro"
       proc_error_msg="yes"
   elif test x"$cpu_raw" = x"i586" -a x"$mmx" = x"yes" ; then
       ARCHFLAGS="-march=pentium-mmx"
       proc_error_msg="yes"
   elif test x"$cpu_raw" = x"i586" -a x"$mmx" = x"no" ; then
       ARCHFLAGS="-march=i586"
       proc_error_msg="yes"
   elif test x"$cpu_raw" = x"i486"; then
       ARCHFLAGS="-march=i486"
       proc_error_msg="yes"
   elif test x"$cpu_raw" = x"i386"; then
       ARCHFLAGS="-march=i386"
       proc_error_msg="yes"
   fi
fi
if test x"$tune" = x"generic" -a x"$cpu" = x"x86_64" -a x"$cpu_overide" != x"yes"; then
   ARCHFLAGS="-march=k8"
fi

if test x"$proc_error_msg" = x"yes"; then
    UNAME_M_INFO=` uname -m 2> /dev/null`
    UNAME_P_INFO=` uname -p 2> /dev/null`
    PROC_INFO=`cat /proc/cpuinfo | grep "model name" | head -n 1 | sed s/"\t"//g 2>/dev/null`
    PROC_FLAG=`cat /proc/cpuinfo | grep "flags" | head -n 1 | sed s/"\t"//g 2>/dev/null`
    echo ""
    echo " *** WARNING *** "
    echo " Your CPU was not detected properly:"
    echo "   uname -m: $UNAME_M_INFO"
    echo "   uname -p: $UNAME_P_INFO"
    echo " $PROC_INFO"
    echo "      $PROC_FLAG"
    echo ""
    echo " If you are using a recent CVS checkout, "
    echo " please e-mail the above to mythtv-users@mythtv.org"
    echo " With the subject \"configure did not detect my cpu\""
    echo ""
fi

is_x86_cmov() {
    expr ",${x86_cmov_cpus}," : ".*,$1," > /dev/null
}

if test x"$proc_opt" = x"no"; then
    optimize="yes"
    if is_x86_cmov "$cpu_raw" -a x"$ARCHFLAGS" != x"-march=k8"; then
        ARCHFLAGS="-march=pentiumpro";
    fi
else
    echo "WARNING: include the output of ./configure along with"
    echo "any bug report, when using a processor optimized build."
fi

# if arch flag is present ignore tune and cpu and just use arch
if test x"$arch" != x""; then
    ARCHFLAGS="-march=$arch"
fi

# if architecture specific flags don't work blank them
echo "int main( void ) { return 0; }" > $TMPC
TMP_ARCHFLAGS=$ARCHFLAGS
$cc $CFLAGS $ARCHFLAGS -o $TMPE $TMPC 2> /dev/null || ARCHFLAGS=""
if test x"$ARCHFLAGS" = x""; then
    if test "$cpu_overide" = "yes" -o x"$tune_raw" != x""; then
        echo "ERROR: CPU specific ./configure options failed compile test"
        echo "       Removing CPU specific compilation options. ($TMP_ARCHFLAGS)"
        echo ""
    fi
fi


# Can only do mmi on mips
if test $mmi = "default"; then
    if test $cpu = "mips"; then
        mmi="yes"
    else
        mmi="no"
    fi
fi

# See does our compiler support mmi
if test $mmi = "yes"; then
cat > $TMPC << EOF
int main(void) {
    __asm__ ("lq \$2, 0(\$2)");
    return 0;
}
EOF
$cc -o $TMPE $TMPC 2> /dev/null || mmi="no"
fi

if test "$mingw32" = "yes" ; then
    v4l="no"
    ivtv="no"
    dvb="no"
    x11="no"
    joystick_menu="no"
    audio_oss="no"
    audio_alsa="no"
    audio_arts="no"
    audio_jack="no"
    dv1394="no"
    dc1394="no"
    ffserver="no"
    network="no"
    SLIBPREF=""
    SLIBSUF=".dll"
    EXESUF=".exe"
    if test "$force_prefix" != yes; then prefix="/c/Program Files/FFmpeg"; fi
    if test "$force_libdir" != yes; then bindir="$prefix"; fi
    CONFIG_DEFINES="$CONFIG_DEFINES _WIN32"
fi

cc="${cross_prefix}${cc}"
ar="${cross_prefix}${ar}"
ranlib="${cross_prefix}${ranlib}"
strip="${cross_prefix}${strip}"

if test -z "$cross_prefix" ; then

# ---
# big/little endian test
cat > $TMPC << EOF
#include <inttypes.h>
int main(int argc, char ** argv){
	volatile uint32_t i=0x01234567;
	return (*((uint8_t*)(&i))) == 0x67;
}
EOF

if $cc -o $TMPE $TMPC 2>/dev/null ; then
$TMPE && bigendian="yes"
else
echo big/little test failed
fi

else

# if cross compiling, cannot launch a program, so make a static guess
if test "$cpu" = "powerpc" -o "$cpu" = "mips" ; then
    bigendian="yes"
fi

fi

# test for distcc
if test x"$distcc" = x"yes"; then
    if test x"`distcc --version 2> /dev/null`" = x""; then
        distcc="no"
    else
        XYZ=`which $cc`
        if test x"$XYZ" != x"" -a x"`ls -l $XYZ | grep distcc`" != x""; then
            distcc="yes, using distcc symlinked $cc"
        fi
    fi
fi

# test for ccache
if test x"$ccache" = x"yes"; then
    if test x"`ccache -V 2> /dev/null`" = x""; then
        ccache="no"
    else
        XYZ=`which $cc`
        if test x"$XYZ" != x"" -a x"`ls -l $XYZ | grep ccache`" != x""; then
            ccache="yes, using ccache symlinked $cc"
        fi
    fi
fi

# ccache should be used before distcc for better cache coherency
if test x"$distcc" = x"yes"; then
    if test x"$ccache" = x"no"; then
        cc="distcc $cc"
        cxx="distcc $cxx"
    elif test x"$ccache" = x"yes"; then
        cc="ccache distcc $cc"
        cxx="ccache distcc $cxx"
    else
        distcc="not using distcc explicitly, since ccache symlink is present"
    fi
else
    if test x"$ccache" = x"yes"; then
        cc="ccache $cc"
        cxx="ccache $cxx"
    fi
fi


# ---
# *inttypes.h* test
cat > $TMPC << EOF
#include <inttypes.h>
int main(int argc, char ** argv){
    return 0;
}
EOF

$cc -o $TMPE $TMPC 2>/dev/null || inttypes="no"

# ---
# *int_fast* test
cat > $TMPC << EOF
#include <inttypes.h>
int main(int argc, char ** argv){
	volatile uint_fast64_t i=0x01234567;
	return 0;
}
EOF

$cc -o $TMPE $TMPC 2>/dev/null || emu_fast_int="yes"

# ---
# check availability of some header files

cat > $TMPC << EOF
#include <malloc.h>
int main( void ) { return 0; }
EOF

_memalign=no
_malloc_h=no
if $cc -o $TMPE $TMPC 2> /dev/null ; then
_malloc_h=yes
_memalign=yes
# check for memalign - atmos
cat > $TMPC << EOF
#include <stdio.h>
#include <malloc.h>
int main ( void ) {
char *string = NULL;
string = memalign(64, sizeof(char));
return 0;
}
EOF
$cc -o $TMPE $TMPC 2> /dev/null || _memalign=no
fi

if test "$_memalign" = "no" -a "$mmx" = "yes" -a "$memalignhack" != "yes"; then
    echo "error, no memalign() but sse enabled, either disable it or use --enable-memalign-hack"
    exit 1
fi

cat > $TMPC << EOF
#include <time.h>
int main( void ) { localtime_r(NULL, NULL); }
EOF

localtime_r=no
if $cc -o $TMPE $TMPC 2> /dev/null ; then
  localtime_r=yes
fi

cat > $TMPC << EOF
#include <stdint.h>
int main( void ) { return 0; }
EOF

_stdint_h=no
if $cc -o $TMPE $TMPC 2> /dev/null ; then
  _stdint_h=yes
fi

if test "$zlib" = "yes"; then
# check for zlib - mmu_man
cat > $TMPC << EOF
#include <zlib.h>
int main ( void ) {
if (zlibVersion() != ZLIB_VERSION)
   puts("zlib version differs !!!");
   return 1;
return 0;
}
EOF
$cc $CFLAGS $LDFLAGS -o $TMPE $TMPC -lz 2> /dev/null || zlib="no"
# $TMPE 2> /dev/null > /dev/null || zlib="no"
# XXX: more tests needed - runtime test
fi
if test "$zlib" = "yes"; then
extralibs="$extralibs -lz"
fi

# test for lrint in math.h
cat > $TMPC << EOF
#define _ISOC9X_SOURCE  1
#include <math.h>
int main( void ) { return (lrint(3.999f) > 0)?0:1; }
EOF

have_lrint="no"
if $cc $extralibs -o $TMPE $TMPC 2> /dev/null ; then
  have_lrint="yes"
  $TMPE 2> /dev/null > /dev/null || have_lrint="no"
fi

# test for lrintf in math.h
cat > $TMPC << EOF
#define _ISOC9X_SOURCE  1
#include <math.h>
int main( void ) { return (lrintf(3.999f) > 0)?0:1; }
EOF

have_lrintf="no"
if $cc $extralibs -o $TMPE $TMPC 2> /dev/null ; then
  have_lrintf="yes"
  # allanc@chickenandporn.com: cannot execute cross-compiled
  # code on the host.  Only execute if not cross-compiling.
  if test -z "$cross_prefix" ; then
    $TMPE 2> /dev/null > /dev/null || have_lrintf="no"
  fi
fi

#test for round()
cat > $TMPC << EOF
#define _ISOC9X_SOURCE  1
#include <math.h>
int main( void ) { return (round(3.999f) > 0)?0:1; }
EOF

have_round="no"
if $cc $extralibs -o $TMPE $TMPC 2> /dev/null ; then
  have_round="yes"
  $TMPE 2> /dev/null > /dev/null || have_round="no"
fi


# test for sizeof(int)
for sizeof in 1 2 4 8 16; do
  echo "void foo(){switch (0) case 0: case (sizeof(int) == $sizeof):;}" > $TMPC
  if $cc -c -o $TMPO $TMPC 2> /dev/null; then
    _sizeof_int=$sizeof
    break;
  fi
done

# test for sizeof(long)
for sizeof in 1 2 4 8 16; do
  echo "void foo(){switch (0) case 0: case (sizeof(long) == $sizeof):;}" > $TMPC
  if $cc -c -o $TMPO $TMPC 2> /dev/null; then
    _sizeof_long=$sizeof
    break;
  fi
done

_restrict=
for restrict_keyword in restrict __restrict__ __restrict; do
  echo "void foo(char * $restrict_keyword p);" > $TMPC
  if $cc -c -o $TMPO $TMPC 2> /dev/null; then
    _restrict=$restrict_keyword
    break;
  fi
done

# test gcc version to see if vector builtins can be used
# currently only used on i386 for MMX builtins
cat > $TMPC << EOF
#include <xmmintrin.h>
int main(void) { 
#if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 2)
return 0;
#else
#error no vector builtins
#endif
}
EOF

builtin_vector=no
if $cc -msse -o $TMPO $TMPC 2> /dev/null ; then
  builtin_vector=yes
fi

# dlopen/dlfcn.h probing

cat > $TMPC << EOF
#include <dlfcn.h>
int main( void ) { return (int) dlopen("foo", 0); }
EOF

ldl=-ldl

if $cc -o $TMPE $TMPC -ldl > /dev/null 2>&1 ; then
dlfcn=yes
dlopen=yes
fi

if $cc -o $TMPE $TMPC > /dev/null 2>&1 ; then
dlfcn=yes
dlopen=yes
ldl=""
fi

cat > $TMPC << EOF
int main( void ) { return (int) dlopen("foo", 0); }
EOF

if $cc -o $TMPE $TMPC -ldl > /dev/null 2>&1  ; then
dlopen=yes
fi

if $cc -o $TMPE $TMPC > /dev/null 2>&1  ; then
dlopen=yes
ldl=""
fi

if test "$vhook" = "default" ; then
  vhook="$dlopen"
fi

if test "$vhook" = "yes" -o "$a52bin" = "yes" -o "$faadbin" = "yes"; then
  extralibs="$extralibs $ldl"
fi

##########################################
# imlib probe

cat > $TMPC << EOF
#include <X11/Xlib.h>
#include <Imlib2.h>
int main( void ) { return (int) imlib_load_font("foo"); }
EOF

imlib2=no
if $cc $CFLAGS $LDFLAGS -o $TMPE $TMPC -lImlib2 -lm > /dev/null 2>&1  ; then
imlib2=yes
fi

##########################################
# freetype probe

cat > $TMPC << EOF
#include <ft2build.h>
int main( void ) { return (int) FT_Init_FreeType(0); }
EOF

freetype2=no
if test "x$targetos" != "xBeOS" && test "$os2" != "yes"; then
  if (freetype-config --version) >/dev/null 2>&1 ; then
    if $cc -o $TMPE $TMPC `freetype-config --cflags` `freetype-config --libs`  > /dev/null 2>&1 ; then
      freetype2=yes
    fi
  fi
fi

##########################################
# SDL probe

#cat > $TMPC << EOF
##include <SDL.h>
##undef main /* We don't want SDL to override our main() */
#int main( void ) { return SDL_Init (SDL_INIT_VIDEO); }
#EOF
#
#sdl_too_old=no
#sdl=no
#if $cc -o $TMPE `sdl-config --cflags` $TMPC `sdl-config --libs`  > /dev/null 2>&1 ; then
#_sdlversion=`sdl-config --version | sed 's/[^0-9]//g'`
#if test "$_sdlversion" -lt 121 ; then
#sdl_too_old=yes
#else
#sdl=yes
#fi
#fi

##########################################
# texi2html probe

texi2html=no
if (texi2html -version) >/dev/null 2>&1; then
texi2html=yes
fi

if test "$network" = "yes" ; then
##########################################
# IPv6 probe

cat > $TMPC << EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
int main( void ) {
  struct sockaddr_storage saddr;
  struct ipv6_mreq mreq6;
  getaddrinfo(0,0,0,0);
  getnameinfo(0,0,0,0,0,0,0);
  IN6_IS_ADDR_MULTICAST(0);
}
EOF

ipv6=no
if $cc -o $TMPE $TMPC > /dev/null 2>&1  ; then
ipv6=yes
fi
fi

##########################################
# OSS probe

if test x"$audio_oss" = x"default" -o x"$audio_oss" = x"yes" ; then

cat > $TMPC << EOF
#include <sys/ioctl.h>
#include <sys/soundcard.h>
int main(void) { return (int) EV_SEQ_LOCAL; }
EOF

   audio_oss=no
   if $cc -o $TMPE $TMPC > /dev/null 2>&1; then
      have_sys_soundcard_h=yes
      audio_oss=yes
   elif test "$targetos" = "OpenBSD" ; then
      have_soundcard_h=yes
      audio_oss=yes
   fi
fi

##########################################
# ALSA probe

if test x"$audio_alsa" = x"default" -o x"$audio_alsa" = x"yes" ; then

cat > $TMPC << EOF
#include <alsa/asoundlib.h>
int main(void) { return (int) SND_LIB_MAJOR; }
EOF

audio_alsa=no
audio_alsa_libs="-lasound"
if $cc -o $TMPE $TMPC $audio_alsa_libs > /dev/null 2>&1; then
audio_alsa=yes
fi

fi

##########################################
# aRts probe

if test x"$audio_arts" = x"default" -o x"$audio_arts" = x"yes" ; then

cat > $TMPC << EOF
#include <artsc.h>
int main(void) { return (int) ARTS_P_BUFFER_SIZE; }
EOF

audio_arts=no
if (artsc-config --version) > /dev/null 2>&1; then
audio_arts_libs=`artsc-config --libs`
audio_arts_tmp=`artsc-config --cflags`
audio_arts_cflags=`echo $audio_arts_tmp | sed "s/include\/artsc/include/g"`
if $cc -o $TMPE $TMPC $audio_arts_cflags $audio_arts_libs > /dev/null 2>&1; then
audio_arts=yes
fi
fi

fi

##########################################
# JACK probe

if test x"$audio_jack" = x"default" -o x"$audio_jack" = x"yes" ; then

cat > $TMPC << EOF
#include <jack/jack.h>
int main(void) { return (int) JACK_MAX_FRAMES; }
EOF

audio_jack=no
audio_jack_libs="-ljack"
if $cc -o $TMPE $TMPC $audio_jack_libs > /dev/null 2>&1; then
audio_jack=yes
fi

fi



case "`$cc -v 2>&1 | grep version`" in
    *gcc*)
	CFLAGS="-Wall -Wno-switch $CFLAGS"
	;;
    *)
	;;
esac

if test "$sdl" = "no" ; then
   ffplay=no
fi

if test "$debug" = "yes"; then
	CFLAGS="-g $CFLAGS"
fi

if test "$optimize" = "small"; then
#  CFLAGS=${CFLAGS//-O3/-Os}
  CFLAGS="$CFLAGS -Os"
fi

if test "$optimize" = "yes"; then
    if test -n "`$cc -v 2>&1 | grep xlc`"; then
	CFLAGS="$CFLAGS -O5"
	LDFLAGS="$LDFLAGS -O5"
    else
	CFLAGS="-O3 $CFLAGS"
    fi
fi

if test x"$bindir" = x""; then
bindir="${prefix}/bin"
fi

if test x"$libdir" = x""; then
libdir="${prefix}/lib"
fi

if test x"$mandir" = x""; then
mandir="${prefix}/man"
fi

if test x"$dvb" = x"yes" ; then
    dvb="no"
    if test -f "$dvb_path"/linux/dvb/frontend.h ; then
        if test -f "$dvb_path"/linux/timer.h ; then
            echo "Warning: DVB location points into kernel (ok if kernel >= 2.6.11)"
        fi
        dvb="yes"
    else
        echo "DVB location does not contain linux/dvb/frontend.h [$dvb_path]"
    fi
fi

if test x"$dvb_eit" = x"yes" ; then
    dvb_eit="no"
    if test x"$dvb" = x"yes" ; then
        dvb_eit="yes"
    fi
fi

lamemp3="no"
if has_library libmp3lame ; then
    if has_header lame/lame.h ; then
        lamemp3="yes"
    fi
fi

if test x"$lamemp3" = x"no" ; then
    echo "You must have the Lame MP3 encoding library installed to compile Myth."
    exit -1
fi

#test for lirc client libraries
if test x"$lirc" = x"yes" ; then
    lirc="no"
    if has_library liblirc_client ; then
        lirc="yes"
    fi
fi

#test for lirc client header
if test x"$lirc" = x"yes" ; then
   lirc="no"
cat > $TMPC << EOF
#include <lirc/lirc_client.h>
int main( void ) { return 0; }
EOF

    if $cc $CFLAGS $ARCHFLAGS -o $TMPE $TMPC 2> /dev/null ; then
        lirc="yes"
    fi
fi


if test x"$firewire_cable_box" = x"yes" ; then
    firewire_cable_box="no"
    if has_library libiec61883 -a has_library libavc1394 ; then
            firewire_cable_box="yes"
    fi
fi

if test x"$x11" = x"yes" ; then
    x11="no"
    if has_library libX11 ; then
        x11="yes"
    fi
fi
if test x"$x11" = x"no" ; then
    xrandr="no"
    xv="no"
    xvmc="no"
    xvmc_vld="no"
fi

if test x"$xrandr" = x"yes" ; then
    xrandr="no"
    if has_header X11/extensions/Xrandr.h ; then
        xrandr="yes"
    fi
fi

if test x"$xv" = x"yes" ; then
    xv="no"
    if has_library libXv ; then
        xv="yes"
    fi
fi

if test x"$dvd" = x"yes" ; then
    dvd="no"
    if has_library libdvdnav ; then
        if has_header dvdnav/dvdnav.h ; then
            dvd="yes"
        fi
    fi
fi


VENDOR_XVMC_LIBS=""
if test x"$xvmc" = x"yes"; then
    xvmc="no"
    if has_library libXvMCW ; then
        CCONFIG="$CCONFIG using_xvmcw"
        VENDOR_XVMC_LIBS="-lXvMCW"
        xvmc="yes"
        if has_header X11/extensions/vldXvMC.h ; then
            echo > /dev/null
        else
            xvmc_vld="no"
        fi
    elif test x"$xvmc_pro" = x"yes"; then
        if has_library libviaXvMCPro ; then
            VENDOR_XVMC_LIBS="-lviaXvMCPro"
            xvmc="yes"
            xvmc_vld="yes"
        fi
    elif has_library libviaXvMC ; then
        VENDOR_XVMC_LIBS="-lviaXvMC"
        xvmc="yes"
    elif has_library libXvMCNVIDIA ; then
        VENDOR_XVMC_LIBS="-lXvMCNVIDIA"
        xvmc="yes"
        if test x"$xvmc_vld" = x"yes"; then
            xvmc_vld="no"
        fi
    elif has_library libI810XvMC ; then
        VENDOR_XVMC_LIBS="-lI810XvMC"
        xvmc="yes"
        if test x"$xvmc_vld" = x"yes"; then
            xvmc_vld="no"
        fi
    fi
else
    xvmc_vld="no"
fi

if test x"$opengl_vsync" = x"yes" ; then
    CONFIG_OPENGL_VSYNC_LIBS="-lGL -lGLU"
fi

if test x"$direct_fb" = x"yes" ; then
    direct_fb="no"
    if test x`which directfb-config 2> /dev/null` != x"" ; then
        direct_fb="yes"
        CONFIG_DIRECTFB_LIBS=`directfb-config --libs`
        CONFIG_DIRECTFB_CXXFLAGS=`directfb-config --cflags`
    fi
fi

echo "# Basic Settings"
echo "Compile type     $compile_type"
echo "Compiler cache   $ccache"
echo "DistCC           $distcc"
echo "Install prefix   $prefix"
#echo "Source path      $source_path"
#echo "C compiler       $cc"
#echo "make             $make"
if test x"$processor" != x"" ; then
    echo "CPU              $cpu ($processor)"
elif test x"$cpu_raw" != x"" ; then
    echo "CPU              $cpu ($cpu_raw)"
else
    echo "CPU              $cpu"
fi
#if test "$BUILDSUF" != ""; then
#echo "Build suffix     $BUILDSUF"
#fi
echo "Big Endian       $bigendian"
#echo "inttypes.h       $inttypes"
#echo "broken inttypes.h $emu_fast_int"
if test $cpu = "x86" -o $cpu = "x86_64"; then
echo "MMX enabled      $mmx"
echo "Vector Builtins  $builtin_vector"
fi
if test $cpu = "armv4l"; then
echo "IWMMXT enabled   $iwmmxt"
fi
if test $cpu = "mips"; then
echo "MMI enabled      $mmi"
fi
if test $cpu = "powerpc"; then
echo "AltiVec enabled  $altivec"
fi
#echo "gprof enabled    $gprof"
#echo "zlib enabled     $zlib"
#echo "libgsm enabled   $libgsm"
#echo "mp3lame enabled  $mp3lame"
#echo "libogg enabled   $libogg"
#echo "vorbis enabled   $vorbis"
#echo "theora enabled   $theora"
#echo "faad enabled     $faad"
#echo "faadbin enabled  $faadbin"
#echo "faac enabled     $faac"
#echo "xvid enabled     $xvid"
#echo "x264 enabled     $x264"
#echo "a52 support      $a52"
#echo "a52 dlopened     $a52bin"
#echo "pp support       $pp"
#echo "shared pp        $shared_pp"
#echo "Video hooking    $vhook"
#echo "SDL support      $sdl"
#if test $sdl_too_old = "yes"; then
#echo "-> Your SDL version is too old - please upgrade to have FFplay/SDL support"
#fi
#echo "optimize for size $small"

#if test "$vhook" = "yes" ; then
#echo "Imlib2 support   $imlib2"
#echo "freetype support $freetype2"
#fi
#echo "Sun medialib support"  $sunmlib
#echo "AMR-NB float support"  $amr_nb
#echo "AMR-NB fixed support"  $amr_nb_fixed
#echo "AMR-WB float support"  $amr_wb
#echo "AMR-WB IF2 support"    $amr_if2
#echo "network support      $network"
#if test "$network" = "yes" ; then
#echo "IPv6 support         $ipv6"
#fi
#if test "$gpl" = "no" ; then
#echo "License: LGPL"
#else
#echo "License: GPL"
#fi
echo
if test x"$frontend" = x"yes" ; then
  echo "# Input Support"
  echo "Joystick menu    $joystick_menu"
  echo "lirc support     $lirc"
fi

if test x"$backend" = x"yes" ; then
  echo "Video4Linux sup. $v4l"
  echo "ivtv support     $ivtv"
  if test x"$ivtv_header" = x"yes" ; then
    echo "ivtv sys headers $ivtv_header"
  fi
  echo "FireWire support $firewire_cable_box"
  echo "DVB support      $dvb [$dvb_path]"
  echo "DBox2 support    $dbox2_dvb_box"
fi

if test x"$frontend" = x"yes" ; then
  echo
  echo "# Sound Output Support"
  echo "OSS support      $audio_oss"
  echo "ALSA support     $audio_alsa"
  echo "aRts support     $audio_arts"
  echo "JACK support     $audio_jack"
  echo
  echo "# Video Output Support"
  echo "x11 support      $x11"
  echo "xrandr support   $xrandr"
  echo "xv support       $xv"
  echo "XvMC support     $xvmc"
  echo "XvMC VLD support $xvmc_vld"
  echo "XvMC pro support $xvmc_pro"
  echo "XvMC libs        $VENDOR_XVMC_LIBS"
  echo "OpenGL vsync     $opengl_vsync"
  echo "DirectFB         $direct_fb"
  if test x"$mingw32" = x"yes" -o x"$cygwin" = x"yes" ; then
  echo "DirectX          $direct_x"
fi
echo
fi

echo "# Misc Features"
echo "DVD playback     $dvd"
echo "Frontend         $frontend"
echo "Backend          $backend"
echo

MYTH_CONFIG_H=libs/libmyth/mythconfig.h
MYTH_CONFIG_MAK=libs/libmyth/mythconfig.mak
echo "Creating $MYTH_CONFIG_H and $MYTH_CONFIG_MAK"

date >> config.log
echo "   $0$FFMPEG_CONFIGURATION" >> config.log
echo "# Automatically generated by configure - do not modify" > $MYTH_CONFIG_MAK
echo "/* Automatically generated by configure - do not modify */" > $TMPH
echo "#define FFMPEG_CONFIGURATION "'"'"$FFMPEG_CONFIGURATION"'"' >> $TMPH

echo "PREFIX=$prefix" >> $MYTH_CONFIG_MAK
#echo "libdir=$libdir" >> $MYTH_CONFIG_MAK
#echo "bindir=$bindir" >> $MYTH_CONFIG_MAK
#echo "mandir=$mandir" >> $MYTH_CONFIG_MAK
#echo "MAKE=$make" >> $MYTH_CONFIG_MAK
echo "QMAKE_CC=$cc" >> $MYTH_CONFIG_MAK
echo "QMAKE_CXX=$cxx" >> $MYTH_CONFIG_MAK
echo "QMAKE_LINK=$cxx" >> $MYTH_CONFIG_MAK
#echo "AR=$ar" >> $MYTH_CONFIG_MAK
#echo "RANLIB=$ranlib" >> $MYTH_CONFIG_MAK
#if test "$dostrip" = "yes" ; then
#echo "STRIP=$strip" >> $MYTH_CONFIG_MAK
#echo "INSTALLSTRIP=-s" >> $MYTH_CONFIG_MAK
#else
#echo "STRIP=echo ignoring strip" >> $MYTH_CONFIG_MAK
#echo "INSTALLSTRIP=" >> $MYTH_CONFIG_MAK
#fi

## SHCFLAGS is a copy of CFLAGS without -mdynamic-no-pic.  Used when building
## shared modules on OS/X (vhook/Makefile).
#SHCFLAGS=$CFLAGS
#if test "$needmdynamicnopic" = yes; then
#   CFLAGS="$CFLAGS -mdynamic-no-pic"
#fi

echo "ARCHFLAGS=$ARCHFLAGS" >> $MYTH_CONFIG_MAK
echo "PROFILEFLAGS=$PROFILEFLAGS" >> $MYTH_CONFIG_MAK
echo "OPTFLAGS=$CFLAGS" >> $MYTH_CONFIG_MAK
echo "ECFLAGS=$ECFLAGS" >> $MYTH_CONFIG_MAK
echo "ECXXFLAGS=$ECXXFLAGS" >> $MYTH_CONFIG_MAK
#echo "SHCFLAGS=$SHCFLAGS">>$MYTH_CONFIG_MAK
#echo "LDFLAGS=$LDFLAGS" >> $MYTH_CONFIG_MAK
#echo "FFSLDFLAGS=$FFSLDFLAGS" >> $MYTH_CONFIG_MAK
#echo "SHFLAGS=$SHFLAGS" >> $MYTH_CONFIG_MAK
#echo "BUILDSUF=$BUILDSUF" >> $MYTH_CONFIG_MAK
#echo "LIBPREF=$LIBPREF" >> $MYTH_CONFIG_MAK
#echo "LIBSUF=\${BUILDSUF}$LIBSUF" >> $MYTH_CONFIG_MAK
#echo "SLIBPREF=$SLIBPREF" >> $MYTH_CONFIG_MAK
#echo "SLIBSUF=\${BUILDSUF}$SLIBSUF" >> $MYTH_CONFIG_MAK
#echo "EXESUF=\${BUILDSUF}$EXESUF" >> $MYTH_CONFIG_MAK
echo "TARGET_OS=$TARGET_OS" >> $MYTH_CONFIG_MAK
if test "$cpu" = "x86" ; then
  echo "TARGET_ARCH_X86=yes" >> $MYTH_CONFIG_MAK
  echo "#define ARCH_X86 1" >> $TMPH
elif test "$cpu" = "x86_64" ; then
  echo "TARGET_ARCH_X86_64=yes" >> $MYTH_CONFIG_MAK
  echo "#define ARCH_X86_64 1" >> $TMPH
elif test "$cpu" = "armv4l" ; then
  echo "TARGET_ARCH_ARMV4L=yes" >> $MYTH_CONFIG_MAK
  echo "#define ARCH_ARMV4L 1" >> $TMPH
elif test "$cpu" = "alpha" ; then
  echo "TARGET_ARCH_ALPHA=yes" >> $MYTH_CONFIG_MAK
  echo "#define ARCH_ALPHA 1" >> $TMPH
elif test "$cpu" = "sparc64" ; then
  echo "TARGET_ARCH_SPARC64=yes" >> $MYTH_CONFIG_MAK
  echo "#define ARCH_SPARC64 1" >> $TMPH
  echo "TARGET_ARCH_SPARC=yes" >> $MYTH_CONFIG_MAK
  echo "#define ARCH_SPARC 1" >> $TMPH
elif test "$cpu" = "sparc" ; then
  echo "TARGET_ARCH_SPARC=yes" >> $MYTH_CONFIG_MAK
  echo "#define ARCH_SPARC 1" >> $TMPH
elif test "$cpu" = "powerpc" ; then
  echo "TARGET_ARCH_POWERPC=yes" >> $MYTH_CONFIG_MAK
  echo "#define ARCH_POWERPC 1" >> $TMPH
  if test $POWERPCMODE = "32bits"; then
    echo "#define POWERPC_MODE_32BITS 1" >> $TMPH
  else
    echo "#define POWERPC_MODE_64BITS 1" >> $TMPH
  fi
  if test "$powerpc_perf" = "yes"; then
    echo "#define POWERPC_PERFORMANCE_REPORT 1" >> $TMPH
  fi
elif test "$cpu" = "mips" ; then
  echo "TARGET_ARCH_MIPS=yes" >> $MYTH_CONFIG_MAK
  echo "#define ARCH_MIPS 1" >> $TMPH
elif test "$cpu" = "sh4" ; then
  echo "TARGET_ARCH_SH4=yes" >> $MYTH_CONFIG_MAK
  echo "#define ARCH_SH4 1" >> $TMPH
elif test "$cpu" = "parisc" ; then
  echo "TARGET_ARCH_PARISC=yes" >> config.mak
  echo "#define ARCH_PARISC 1" >> $TMPH
elif test "$cpu" = "s390" ; then
  echo "TARGET_ARCH_S390=yes" >> config.mak
  echo "#define ARCH_S390 1" >> $TMPH
elif test "$cpu" = "m68k" ; then
  echo "TARGET_ARCH_M68K=yes" >> config.mak
  echo "#define ARCH_M68K 1" >> $TMPH
elif test "$cpu" = "ia64" ; then
  echo "TARGET_ARCH_IA64=yes" >> config.mak
  echo "#define ARCH_IA64 1" >> $TMPH
fi
echo "#define TUNECPU $TUNECPU" >> $TMPH
if test "$bigendian" = "yes" ; then
  echo "WORDS_BIGENDIAN=yes" >> $MYTH_CONFIG_MAK
  echo "#define WORDS_BIGENDIAN 1" >> $TMPH
fi
if test "$inttypes" != "yes" ; then
  echo "#define EMULATE_INTTYPES 1" >> $TMPH
fi
if test "$emu_fast_int" = "yes" ; then
  echo "#define EMULATE_FAST_INT 1" >> $TMPH
fi
if test "$mmx" = "yes" ; then
  echo "TARGET_MMX=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_MMX 1" >> $TMPH
  echo "#define __CPU__ 586" >> $TMPH
fi
#if test "$builtin_vector" = "yes" ; then
#  echo "TARGET_BUILTIN_VECTOR=yes" >> $MYTH_CONFIG_MAK
#  echo "#define HAVE_BUILTIN_VECTOR 1" >> $TMPH
#fi
if test "$iwmmxt" = "yes" ; then
  echo "TARGET_IWMMXT=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_IWMMXT 1" >> $TMPH
fi
if test "$mmi" = "yes" ; then
  echo "TARGET_MMI=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_MMI 1" >> $TMPH
fi
if test "$altivec" = "yes" ; then
  echo "TARGET_ALTIVEC=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_ALTIVEC 1" >> $TMPH
  echo "// Enable the next line to use the reference C code instead of AltiVec" >> $TMPH
  echo "// #define ALTIVEC_USE_REFERENCE_C_CODE 1" >> $TMPH
  if test "$_altivec_h" = "yes" ; then
    echo "#define HAVE_ALTIVEC_H 1" >> $TMPH
  else
    echo "#undef HAVE_ALTIVEC_H" >> $TMPH
  fi
fi
if test "$gprof" = "yes" ; then
  echo "TARGET_GPROF=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_GPROF 1" >> $TMPH
fi
if test "$localtime_r" = "yes" ; then
  echo "#define HAVE_LOCALTIME_R 1" >> $TMPH
fi
if test "$imlib2" = "yes" ; then
  echo "HAVE_IMLIB2=yes" >> $MYTH_CONFIG_MAK
fi
if test "$freetype2" = "yes" ; then
  echo "HAVE_FREETYPE2=yes" >> $MYTH_CONFIG_MAK
fi
if test "$sunmlib" = "yes" ; then
  echo "HAVE_MLIB=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_MLIB 1" >> $TMPH
  extralibs="$extralibs -lmlib"
fi
if test "$pthreads" = "yes" ; then
  echo "HAVE_PTHREADS=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_PTHREADS 1" >> $TMPH
  echo "#define HAVE_THREADS 1" >> $TMPH
  if test $targetos != FreeBSD -a $targetos != OpenBSD ; then
     extralibs="$extralibs -lpthread"
  fi
fi
if test "$sdl" = "yes" ; then
  echo "CONFIG_SDL=yes" >> $MYTH_CONFIG_MAK
  echo "SDL_LIBS=`sdl-config --libs`" >> $MYTH_CONFIG_MAK
  echo "SDL_CFLAGS=`sdl-config --cflags`" >> $MYTH_CONFIG_MAK
fi
if test "$texi2html" = "yes"; then
  echo "BUILD_DOC=yes" >> $MYTH_CONFIG_MAK
fi
if test "$have_lrintf" = "yes" ; then
  echo "#define HAVE_LRINTF 1" >> $TMPH
fi
if test "$have_lrint" = "yes" ; then
  echo "#define HAVE_LRINT 1" >> $TMPH
fi
if test "$have_round" = "yes" ; then
  echo "#define HAVE_ROUND 1" >> $TMPH
fi
echo "#define SIZEOF_INT $_sizeof_int" >> $TMPH
echo "#define SIZEOF_LONG $_sizeof_long" >> $TMPH
if test "$vhook" = "yes" ; then
  echo "BUILD_VHOOK=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_VHOOK 1" >> $TMPH
fi
if test "$lshared" = "yes" ; then
  echo "BUILD_SHARED=yes" >> $MYTH_CONFIG_MAK
  echo "PIC=-fPIC -DPIC" >> $MYTH_CONFIG_MAK
fi
echo "" >>$MYTH_CONFIG_MAK
# if you do not want to use encoders, disable that.
echo "#define CONFIG_ENCODERS 1" >> $TMPH
echo "CONFIG_ENCODERS=yes" >> $MYTH_CONFIG_MAK

# if you do not want to use decoders, disable that.
echo "#define CONFIG_DECODERS 1" >> $TMPH
echo "CONFIG_DECODERS=yes" >> $MYTH_CONFIG_MAK

# muxers
if test "$muxers" = "yes" ; then
  echo "#define CONFIG_MUXERS 1" >> $TMPH
  echo "CONFIG_MUXERS=yes" >> config.mak
fi

# demuxers
if test "$demuxers" = "yes" ; then
  echo "#define CONFIG_DEMUXERS 1" >> $TMPH
  echo "CONFIG_DEMUXERS=yes" >> config.mak
fi

# AC3
if test "$a52" = "yes" ; then
  echo "#define CONFIG_AC3 1" >> $TMPH
  echo "CONFIG_AC3=yes" >> $MYTH_CONFIG_MAK

  if test "$a52bin" = "yes" ; then
    echo "#define CONFIG_A52BIN 1" >> $TMPH
    echo "CONFIG_A52BIN=yes" >> $MYTH_CONFIG_MAK
  fi
fi

# DTS
if test "$dts" = "yes" ; then
  echo "#define CONFIG_DTS 1" >> $TMPH
  echo "CONFIG_DTS=yes" >> $MYTH_CONFIG_MAK
fi

# PP
if test "$pp" = "yes" ; then
  echo "#define CONFIG_PP 1" >> $TMPH
  echo "CONFIG_PP=yes" >> $MYTH_CONFIG_MAK

  if test "$shared_pp" = "yes" ; then
    echo "#define SHARED_PP 1" >> $TMPH
    echo "SHARED_PP=yes" >> $MYTH_CONFIG_MAK
  fi
fi

# mpeg audio high precision mode
if test "$mpegaudio_hp" = "yes" ; then
  echo "#define CONFIG_MPEGAUDIO_HP 1" >> $TMPH
fi

if test "$v4l" = "yes" ; then
  CCONFIG="$CCONFIG using_v4l"
  echo "#define CONFIG_VIDEO4LINUX 1" >> $TMPH
  echo "CONFIG_VIDEO4LINUX=yes" >> $MYTH_CONFIG_MAK
fi

if test "$dv1394" = "yes" ; then
  echo "#define CONFIG_DV1394 1" >> $TMPH
  echo "CONFIG_DV1394=yes" >> $MYTH_CONFIG_MAK
fi

if test "$dc1394" = "yes" ; then
  echo "#define CONFIG_DC1394 1" >> $TMPH
  echo "CONFIG_DC1394=yes" >> $MYTH_CONFIG_MAK
fi

if test "$dlopen" = "yes" ; then
  echo "#define CONFIG_HAVE_DLOPEN 1" >> $TMPH
fi

if test "$dlfcn" = "yes" ; then
  echo "#define CONFIG_HAVE_DLFCN 1" >> $TMPH
fi

if test "$audio_oss" = "yes" ; then
    CCONFIG="$CCONFIG using_oss"
  echo "#define CONFIG_AUDIO_OSS 1" >> $TMPH

  if test "$have_sys_soundcard_h" = "yes" ; then
    echo "#define HAVE_SYS_SOUNDCARD_H 1" >> $TMPH
  fi

  if test "$have_soundcard_h" = "yes" ; then
    echo "#define HAVE_SOUNDCARD_H 1" >> $TMPH
  fi

  if test "$targetos" = "OpenBSD" ; then
   echo "CONFIG_AUDIO_OSS_LIBS=$audio_oss_libs" >> $MYTH_CONFIG_MAK
  fi
fi

if test "$audio_alsa" = "yes" ; then
    CCONFIG="$CCONFIG using_alsa"
  echo "#define CONFIG_AUDIO_ALSA 1" >> $TMPH
  echo "CONFIG_AUDIO_ALSA_LIBS=$audio_alsa_libs" >> $MYTH_CONFIG_MAK
fi

if test "$audio_arts" = "yes" ; then
    CCONFIG="$CCONFIG using_arts"
  echo "#define CONFIG_AUDIO_ARTS 1" >> $TMPH
  echo "CONFIG_AUDIO_ARTS_LIBS=$audio_arts_libs" >> $MYTH_CONFIG_MAK
  echo "CONFIG_AUDIO_ARTS_CFLAGS=$audio_arts_cflags" >> $MYTH_CONFIG_MAK
fi

if test "$audio_jack" = "yes" ; then
    CCONFIG="$CCONFIG using_jack"
  echo "#define CONFIG_AUDIO_JACK 1" >> $TMPH
  echo "CONFIG_AUDIO_JACK_LIBS=$audio_jack_libs" >> $MYTH_CONFIG_MAK
fi

if test "$audio_beos" = "yes" ; then
  echo "#define CONFIG_AUDIO_BEOS 1" >> $TMPH
  echo "CONFIG_AUDIO_BEOS=yes" >> $MYTH_CONFIG_MAK
fi

if test "$network" = "yes" ; then
  echo "#define CONFIG_NETWORK 1" >> $TMPH
  echo "CONFIG_NETWORK=yes" >> $MYTH_CONFIG_MAK
fi

if test "$ipv6" = "yes" ; then
  echo "#define CONFIG_IPV6 1" >> $TMPH
fi

if test "$zlib" = "yes" ; then
  echo "#define CONFIG_ZLIB 1" >> $TMPH
  echo "CONFIG_ZLIB=yes" >> $MYTH_CONFIG_MAK
fi

if test "$libgsm" = "yes" ; then
  echo "#define CONFIG_LIBGSM 1" >> $TMPH
  echo "CONFIG_LIBGSM=yes" >> config.mak
fi

if test "$mp3lame" = "yes" ; then
  echo "#define CONFIG_MP3LAME 1" >> $TMPH
  echo "CONFIG_MP3LAME=yes" >> $MYTH_CONFIG_MAK
fi

if test "$libogg" = "yes" ; then
  echo "#define CONFIG_LIBOGG 1" >> $TMPH
  echo "CONFIG_LIBOGG=yes" >> $MYTH_CONFIG_MAK
fi

if test "$vorbis" = "yes" ; then
  echo "#define CONFIG_LIBVORBIS 1" >> $TMPH
  echo "CONFIG_LIBVORBIS=yes" >> $MYTH_CONFIG_MAK
fi

if test "$theora" = "yes" ; then
  echo "#define CONFIG_LIBTHEORA 1" >> $TMPH
  echo "CONFIG_LIBTHEORA=yes" >> $MYTH_CONFIG_MAK
fi

if test "$faad" = "yes" ; then
  echo "#define CONFIG_FAAD 1" >> $TMPH
  echo "CONFIG_FAAD=yes" >> $MYTH_CONFIG_MAK
fi

if test "$faadbin" = "yes" ; then
  echo "#define CONFIG_FAADBIN 1" >> $TMPH
  echo "CONFIG_FAADBIN=yes" >> $MYTH_CONFIG_MAK
fi

if test "$faac" = "yes" ; then
  echo "#define CONFIG_FAAC 1" >> $TMPH
  echo "CONFIG_FAAC=yes" >> $MYTH_CONFIG_MAK
fi

if test "$xvid" = "yes" ; then
  echo "#define CONFIG_XVID 1" >> $TMPH
  echo "CONFIG_XVID=yes" >> $MYTH_CONFIG_MAK
fi

if test "$x264" = "yes" ; then
  echo "#define CONFIG_X264 1" >> $TMPH
  echo "CONFIG_X264=yes" >> $MYTH_CONFIG_MAK
fi

if test "$mingw32" = "yes" ; then
  echo "#define CONFIG_WIN32 1" >> $TMPH
  echo "CONFIG_WIN32=yes" >> $MYTH_CONFIG_MAK
  echo "HAVE_W32THREADS=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_W32THREADS 1" >> $TMPH
  echo "#define HAVE_THREADS 1" >> $TMPH
  echo "#ifndef __MINGW32__" >> $TMPH
  echo "#define __MINGW32__ 1" >> $TMPH
  echo "#endif" >> $TMPH
fi

if test "$os2" = "yes" ; then
  echo "#define CONFIG_OS2 1" >> $TMPH
  echo "CONFIG_OS2=yes" >> $MYTH_CONFIG_MAK
fi

if test "$TARGET_OS" = "SunOS" ; then
  echo "#define CONFIG_SUNOS 1" >> $TMPH
fi

if test "$TARGET_OS" = "BeOS" ; then
  echo "HAVE_BEOSTHREADS=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_BEOSTHREADS 1" >> $TMPH
  echo "#define HAVE_THREADS 1" >> $TMPH
fi

if test "$darwin" = "yes"; then
  echo "#define CONFIG_DARWIN 1"  >> $TMPH
  echo "CONFIG_DARWIN=yes" >> $MYTH_CONFIG_MAK
fi

if test "$_stdint_h" = "yes" ; then
  echo "#define HAVE_STDINT_H 1" >> $TMPH
else
  echo "#undef  HAVE_STDINT_H" >> $TMPH
fi

if test "$_malloc_h" = "yes" ; then
  echo "#define HAVE_MALLOC_H 1" >> $TMPH
else
  echo "#undef  HAVE_MALLOC_H" >> $TMPH
fi

if test "$_memalign" = "yes" ; then
  echo "#define HAVE_MEMALIGN 1" >> $TMPH
else
  echo "#undef  HAVE_MEMALIGN" >> $TMPH
fi

if test "$memalignhack" = "yes" ; then
  echo "#define MEMALIGN_HACK 1" >> $TMPH
fi

if test "$netserver" = "yes" ; then
  echo "#define CONFIG_BEOS_NETSERVER 1" >> $TMPH
  echo "CONFIG_BEOS_NETSERVER=yes" >> $MYTH_CONFIG_MAK
fi

if test "$need_inet_aton" = "yes" ; then
  echo "NEED_INET_ATON=yes" >> $MYTH_CONFIG_MAK
fi

if test "$simpleidct" = "yes" ; then
  echo "#define SIMPLE_IDCT 1" >> $TMPH
fi

if test "$ffserver" = "yes" ; then
  echo "#define CONFIG_FFSERVER 1" >> $TMPH
  echo "CONFIG_FFSERVER=yes" >> $MYTH_CONFIG_MAK
fi

if test "$ffplay" = "yes" ; then
  echo "CONFIG_FFPLAY=yes" >> $MYTH_CONFIG_MAK
fi

if test "$gpl" = "yes" ; then
  echo "#define CONFIG_GPL 1" >> $TMPH
  echo "CONFIG_GPL=yes" >> $MYTH_CONFIG_MAK
fi

echo "#ifndef restrict" >> $TMPH
echo "#define restrict $_restrict" >> $TMPH
echo "#endif" >> $TMPH

if test "$optimize" = "small"; then
  echo "#define always_inline"  >> $TMPH
fi

# build tree in object directory if source path is different from current one
if test "$source_path_used" = "yes" ; then
    DIRS="libavformat libavcodec libavcodec/alpha libavcodec/armv4l libavcodec/i386 \
          libavcodec/ppc libavcodec/liba52 libavcodec/mlib libavcodec/libpostproc tests vhook"
    FILES="Makefile libavformat/Makefile libavcodec/Makefile libavcodec/libpostproc/Makefile tests/Makefile vhook/Makefile"
    for dir in $DIRS ; do
            mkdir -p $dir
    done
    for f in $FILES ; do
        ln -sf "$source_path/$f" $f
    done
fi
echo "SRC_PATH='$source_path'" >> $MYTH_CONFIG_MAK

if test "$amr_wb" = "yes" ; then
  echo "#define AMR_WB 1" >> $TMPH
  echo "AMR_WB=yes" >> $MYTH_CONFIG_MAK
  echo
  echo "AMR WB FLOAT NOTICE ! Make sure you have downloaded TS26.204"
  echo "V5.1.0 from "
  echo "http://www.3gpp.org/ftp/Specs/archive/26_series/26.204/26204-510.zip"
  echo "and extracted the source to libavcodec/amrwb_float"
  echo
fi

if test "$amr_nb" = "yes" ; then
  echo "#define AMR_NB 1" >> $TMPH
  echo "AMR_NB=yes" >> $MYTH_CONFIG_MAK
  echo
if test "$amr_nb_fixed" = "yes" ; then
  echo "AMR_NB_FIXED=yes" >> $MYTH_CONFIG_MAK
  echo "#define AMR_NB_FIXED 1" >> $TMPH
  echo "AMR NB FIXED POINT NOTICE! Make sure you have downloaded TS26.073 "
  echo "REL-5 version 5.1.0 from "
  echo "http://www.3gpp.org/ftp/Specs/latest/Rel-5/26_series/26073-5??.zip"
  echo "and extracted src to libavcodec/amr"
  echo "You must also add -DMMS_IO and remove -pedantic-errors to/from CFLAGS in libavcodec/amr/makefile."
  echo "i.e. CFLAGS = -Wall -I. \$(CFLAGS_\$(MODE)) -D\$(VAD) -DMMS_IO"
  echo
else
  echo "AMR NB FLOAT NOTICE ! Make sure you have downloaded TS26.104"
  echo "REL-5 V5.1.0 from "
  echo "http://www.3gpp.org/ftp/Specs/latest/Rel-5/26_series/26104-5??.zip"
  echo "and extracted the source to libavcodec/amr_float"
  echo "and if u try this on an alpha, u may need to change Word32 to int in amr/typedef.h"
  echo
fi

if test "$amr_if2" = "yes" ; then
  echo "AMR_CFLAGS=-DIF2=1" >> $MYTH_CONFIG_MAK
fi

fi

if test x"$mmx" = x"yes"; then
  CONFIG_DEFINES="$CONFIG_DEFINES MMX"
  if test x"$cpu" != x"x86_64" ; then
    CONFIG_DEFINES="$CONFIG_DEFINES i386"
  fi
fi

if test x"$ivtv" = x"yes" ; then
  CCONFIG="$CCONFIG using_ivtv"
fi

if test x"$ivtv_header" = x"yes" ; then
  CCONFIG="$CCONFIG using_ivtv_header"
fi

if test x"$firewire_cable_box" = x"yes" ; then
  CCONFIG="$CCONFIG using_firewire"
  echo "CONFIG_FIREWIRE_LIBS=-lraw1394 -liec61883 -lavc1394" >> $MYTH_CONFIG_MAK
fi

if test x"$dbox2_dvb_box" = x"yes" ; then
  CCONFIG="$CCONFIG using_dbox2"
  CONFIG_DEFINES="$CONFIG_DEFINES USING_DBOX2"
fi

if test x"$lirc" = x"yes" ; then
  CCONFIG="$CCONFIG using_lirc"
  echo "CONFIG_LIRC_LIBS=-llirc_client" >> $MYTH_CONFIG_MAK
fi

if test "$joystick_menu" = "yes" ; then
  CCONFIG="$CCONFIG using_joystick_menu"
fi

if test x"$dvb" = x"yes" ; then
  CCONFIG="$CCONFIG using_dvb"
  CONFIG_INCLUDEPATH="$CONFIG_INCLUDEPATH $dvb_path"
fi

if test x"$dvb_eit" = x"yes" ; then
  CCONFIG="$CCONFIG using_dvb_eit"
fi

if test x"$x11" = x"yes" ; then
  CCONFIG="$CCONFIG using_x11"
  if [ -d $x11_include_path ] ; then
    CONFIG_INCLUDEPATH="$CONFIG_INCLUDEPATH $x11_include_path"
  fi
fi

if test x"$xv" = x"yes" ; then
  CCONFIG="$CCONFIG using_xv"
  echo "CONFIG_XV_LIBS=-lXinerama -lXv -lX11 -lXext -lXxf86vm" >> $MYTH_CONFIG_MAK
fi

if test x"$dvd" = x"yes" ; then
  CCONFIG="$CCONFIG using_dvdnav"
  CONFIG_DEFINES="$CONFIG_DEFINES HAVE_DVDNAV"
  echo "CONFIG_DVD_LIBS=-ldvdnav" >> $MYTH_CONFIG_MAK
fi


if test x"$xrandr" = x"yes" ; then
  CCONFIG="$CCONFIG using_xrandr"
fi

if test x"$xvmc" = x"yes" ; then
  CCONFIG="$CCONFIG using_xvmc"
fi

if test x"$xvmc_vld" = x"yes" ; then
  CCONFIG="$CCONFIG using_xvmc_vld"
fi

if test x"$VENDOR_XVMC_LIBS" != x"" ; then
  echo "CONFIG_XVMC_LIBS=$VENDOR_XVMC_LIBS -lXvMC" >> $MYTH_CONFIG_MAK
fi

if test x"$direct_fb" = x"yes" ; then
  CCONFIG="$CCONFIG using_directfb"
  echo "CONFIG_DIRECTFB_LIBS=$CONFIG_DIRECTFB_LIBS" >> $MYTH_CONFIG_MAK
  echo "CONFIG_DIRECTFB_CXXFLAGS=$CONFIG_DIRECTFB_CXXFLAGS" >> $MYTH_CONFIG_MAK
fi

if test x"$direct_x" = x"yes" ; then
  CCONFIG="$CCONFIG using_directx"
  CONFIG_DEFINES="$CONFIG_DEFINES USING_DIRECTX"
fi

if test x"$opengl_vsync" = x"yes" ; then
  CCONFIG="$CCONFIG using_opengl_vsync"
  echo "CONFIG_OPENGL_VSYNC_LIBS=$CONFIG_OPENGL_VSYNC_LIBS" >> $MYTH_CONFIG_MAK
fi

if test x"$valgrind" = x"yes" ; then
  CCONFIG="$CCONFIG using_valgrind"
fi

if test x"$frontend" = x"yes" ; then
  CCONFIG="$CCONFIG using_frontend"
fi

if test x"$backend" = x"yes" ; then
  CCONFIG="$CCONFIG using_backend"
fi

if test x"$CCONFIG" != x"" ; then
  echo "CCONFIG=$CCONFIG" >> $MYTH_CONFIG_MAK
  echo "#define MYTH_BUILD_CONFIG \"$CCONFIG\"" >>$TMPH
fi

if test x"$CONFIG_DEFINES" != x"" ; then
  echo "CONFIG_DEFINES=$CONFIG_DEFINES" >> $MYTH_CONFIG_MAK
fi

if test x"$CONFIG_INCLUDEPATH" != x"" ; then
  echo "CONFIG_INCLUDEPATH=$CONFIG_INCLUDEPATH" >> $MYTH_CONFIG_MAK
fi

for codec in $CODEC_LIST ; do
    echo "#define CONFIG_`echo $codec | tr a-z A-Z` 1" >> $TMPH
    echo "CONFIG_`echo $codec | tr a-z A-Z`=yes" >> $MYTH_CONFIG_MAK
done

diff $TMPH $MYTH_CONFIG_H >/dev/null 2>&1
if test $? -ne 0 ; then
  mv -f $TMPH $MYTH_CONFIG_H
  rm -f config.h
else
  echo "$MYTH_CONFIG_H is unchanged"
fi
if ! test -L config.h ; then
  ln -s $MYTH_CONFIG_H config.h
fi

if [ ! -e config.h ] ; then
  ln -s $MYTH_CONFIG_H config.h
fi

rm -f config.mak
ln -s $MYTH_CONFIG_MAK config.mak

# Create a special cleanup makefile that will allow make clean to work
if [ ! -e config ] ; then
  mkdir config
fi
cat - > config/Makefile <<END

all:	
qmake_all:
	\$(NONE)

clean:
	\$(NONE)

install:
uninstall:
	\$(NONE)

distclean: clean
	-cd ../setup && qmake && make distclean
	-rm -f ../$MYTH_CONFIG_MAK  ../config.mak 
	-rm -f ../$MYTH_CONFIG_H    ../config.h
	-rm -f ../Makefile

END

rm -f $TMPO $TMPC $TMPE $TMPS $TMPH

qmake mythtv.pro
