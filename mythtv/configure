#!/bin/sh
#
# FFmpeg configure script
#
# Copyright (c) 2000, 2001, 2002 Fabrice Bellard
# Copyright (c) 2005-2006 Diego Biurrun
# Copyright (c) 2005-2006 Mans Rullgard
#

# make sure we are running under a compatible shell
# try to make this part work with most shells

try_exec(){
    echo "Trying shell $1"
    type "$1" >/dev/null 2>&1 && exec "$@"
}

unset foo
(: ${foo%%bar}) 2>/dev/null
E1="$?"

(: ${foo?}) 2>/dev/null
E2="$?"

if test "$E1" != 0 || test "$E2" = 0; then
    echo "Broken shell detected.  Trying alternatives."
    export FF_CONF_EXEC
    if test "0$FF_CONF_EXEC" -lt 1; then
        FF_CONF_EXEC=1
        try_exec bash "$0" "$@"
    fi
    if test "0$FF_CONF_EXEC" -lt 2; then
        FF_CONF_EXEC=2
        try_exec ksh "$0" "$@"
    fi
    if test "0$FF_CONF_EXEC" -lt 3; then
        FF_CONF_EXEC=3
        try_exec /usr/xpg4/bin/sh "$0" "$@"
    fi
    echo "No compatible shell script interpreter found."
    echo "This configure script requires a POSIX-compatible shell"
    echo "such as bash or ksh."
    echo "THIS IS NOT A BUG IN FFMPEG, DO NOT REPORT IT AS SUCH."
    echo "Instead, install a working POSIX-compatible shell."
    echo "Disabling this configure test will create a broken FFmpeg."
    if test "$BASH_VERSION" = '2.04.0(1)-release'; then
        echo "This bash version ($BASH_VERSION) is broken on your platform."
        echo "Upgrade to a later version if available."
    fi
    exit 1
fi

show_help(){
  echo "Usage: configure [options]"
  echo "Options: [defaults in brackets after descriptions]"
  echo
  echo "Standard options:"
  echo "  --help                   print this message"
  echo "  --previous               use previous configure parameters if possible"
  echo "  --compile-type=CTYPE     one of release, profile, debug [$compile_type]"
  echo "                           NOTE: profile is for sampling profilers"
  echo "  --prefix=PREFIX          install in PREFIX [$PREFIX]"
  echo "  --libdir-name=LIBNAME    search/install libraries in PREFIX/LIBNAME [$libdir_name]"
  #echo "  --libdir=DIR             install libs in DIR [PREFIX/lib]"
#  echo "  --shlibdir=DIR           install shared libs in DIR [PREFIX/lib]"
  #echo "  --mandir=DIR             man documentation in DIR [PREFIX/man]"
  echo "  --disable-ccache         disable compiler cache (ccache)"
  echo "  --disable-distcc         disable distributed compilation (distcc)"
  #echo "  --enable-mp3lame         enable mp3 encoding via libmp3lame [default=no]"
  #echo "  --enable-libogg          enable ogg support via libogg [default=no]"
  #echo "  --enable-vorbis          enable vorbis support via libvorbis [default=no]"
  #echo "  --enable-faad            enable faad support via libfaad [default=no]"
  #echo "  --enable-faadbin         build faad support with runtime linking [default=no]"
  #echo "  --enable-faac            enable faac support via libfaac [default=no]"
  #echo "  --enable-libgsm          enable gsm support via libgsm [default=no]"
  #echo "  --enable-xvid            enable Xvid encoding via xvidcore [default=no]"
  #echo "  --enable-x264            enable H.264 encoding via x264 [default=no]"
  #echo "  --enable-mingw32         enable mingw32 native/cross windows compile"
  #echo "  --enable-a52             enable GPL'ed A52 support [default=no]"
  #echo "  --enable-a52bin          open liba52.so.0 at runtime [default=no]"
  #echo "  --enable-pp              enable GPL'ed post processing support [default=no]"
  #echo "  --enable-shared-pp       use libpostproc.so [default=no]"
  #echo "  --enable-shared          build shared libraries [default=no]"
  #echo "  --enable-amr_nb          enable amr_nb float audio codec"
  #echo "  --enable-amr_nb-fixed    use fixed point for amr-nb codec"
  #echo "  --enable-sunmlib         use Sun medialib [default=no]"
  #echo ""
  echo "Advanced compile options (experts only):"
  #echo "  --source-path=PATH       path of source code [$source_path]"
  #echo "  --cross-prefix=PREFIX    use PREFIX for compile tools [$cross_prefix]"
  #echo "  --cc=CC                  use C compiler CC [$cc]"
  #echo "  --make=MAKE              use specified make [$make]"
  echo "  --extra-cflags=ECFLAGS    add ECFLAGS to list of flags for C compile"
  echo "  --extra-cxxflags=ECXFLAGS add ECXXFLAGS to list of flags for C++ compile"
  #echo "  --extra-ldflags=ELDFLAGS add ELDFLAGS to LDFLAGS [$LDFLAGS]"
  #echo "  --extra-libs=ELIBS       add ELIBS [$ELIBS]"
  #echo "  --build-suffix=SUFFIX    suffix for application specific build []"
  echo "  --cpu=CPU                only use instructions available on CPU [$cpu]"
  echo "  --tune=CPU               tune instruction usage for a particular CPU [$tune]"
  echo "  --arch=CPU               equivalent to \"--cpu=CPU --tune=CPU\""
  #echo "  --powerpc-perf-enable    enable performance report on PPC (requires enabling PMC)"
  echo "  --enable-proc-opt        enable processor specific compilation"
  echo "  --disable-mmx            disable mmx usage"
  echo "  --disable-iwmmxt         disable iwmmxt usage"
  echo "  --disable-altivec        disable AltiVec usage"
  echo "Advanced features (experts only):"
  echo "  --disable-audio-oss      disable OSS audio support"
  echo "  --disable-audio-alsa     disable ALSA audio support"
  echo "  --disable-audio-arts     disable aRts audio support"
  echo "  --disable-audio-jack     disable JACK audio support"
  echo "  --enable-valgrind        disables timeouts for valgrind memory debugging"
  echo "  --enable-symbol-visibility  enables symbol visibility options"
  # Don't print disable frontend/backend options, these
  # cause breakage and people use them inappropriately. -- dtk
  #echo "  --disable-frontend       disable frontend [breaks dependency checking, previews]"
  #echo "  --disable-backend        disable backend  [breaks dependency checking]"
  #echo "  --disable-audio-beos     disable BeOS audio support [default=no]"
  #echo "  --disable-dv1394         disable DV1394 grabbing [default=no]"
  #echo "  --disable-network        disable network support [default=no]"
  #echo "  --disable-ipv6           disable ipv6 support [default=no]"
  #echo "  --disable-zlib           disable zlib [default=no]"
  #echo "  --disable-simple_idct    disable simple IDCT routines [default=no]"
  #echo "  --disable-vhook          disable video hooking support"
  #echo "  --enable-gprof           enable profiling with gprof [$gprof]"
  #echo "  --disable-debug          disable debugging symbols"
  #echo "  --disable-opts           disable compiler optimizations"
  #echo "  --disable-mpegaudio-hp   faster (but less accurate)"
  #echo "                           mpegaudio decoding [default=no]"
  #echo "  --disable-ffserver       disable ffserver build"
  #echo "  --disable-ffplay         disable ffplay build"
  #echo "  --enable-small           optimize for size instead of speed"
  #echo "  --enable-memalign-hack   emulate memalign, interferes with memory debuggers"
  #echo "  --disable-strip          disable stripping of executables and shared libraries"
  #echo "  --enable-codec=codec     enables codec"
  #echo "  --disable-codec=codec    disables codec"
  #echo "  --disable-encoders       disables all encoders"
  #echo "  --disable-decoders       disables all decoders"
  #echo "  --disable-muxers         disables all muxers"
  #echo "  --disable-demuxers       disables all demuxers"
  echo "  --disable-lirc           disable lirc support (Infrared Remotes)"
  echo "  --disable-joystick-menu  disable joystick menu"
  echo "  --disable-firewire       disable support for FireWire cable boxes"
  echo "  --disable-iptv           disable support for recording RTSP/UDP/RTP streams"
  echo "  --disable-dbox2          disable support for Nokia DBOX2 DVB boxes (or compatibles)"
  echo "  --disable-hdhomerun      disable support for HDHomeRun boxes"
  echo "  --disable-v4l            disable Video4Linux support"
  echo "  --disable-ivtv           disable ivtv support (PVR-x50) req. v4l support"
  echo "  --enable-dvb             enable DVB support (must supply header directory)"
  echo "  --dvb-path=HDRLOC        location of directory containing"
  echo "                           'linux/dvb/frontend.h', not the"
  echo "                           directory with frontend.h [$dvb_path]"
  echo "  --disable-x11            disable X11 support"
  echo "  --x11-path=X11LOC        location of X11 include files [$x11_include_path-path]"
  echo "  --disable-xrandr         disable X11 resolution switching"
  echo "  --disable-xv             disable XVideo   (X11 video output accel.)"
  echo "  --enable-xvmc            enable XvMC      (Linux/BSD MPEG accel.)"
  echo "  --enable-xvmc-pro        enable XvMC for the unichrome pro (NOT unichrome) chipset"
  echo "  --disable-xvmc-opengl    disable nVidia XvMC OpenGL texture method"
  echo "  --xvmc-lib=LIB           XvMC library override (for crosscompiling)"
  #echo "  --disable-xvmc-vld       disable XvMC-VLD (VIA Epia MPEG accel.)"
  echo "  --enable-mac-accel       enable Mac OS X MPEG acceleration"
  echo "  --enable-opengl-vsync    enable OpenGL vsync method"
  echo "  --enable-directfb        enable DirectFB  (Linux non-X11 video)"
  echo "  --enable-directx         enable DirectX   (Microsoft video)"
  echo ""
  echo "  --enable-mac-bundle      produce standalone OS X apps (e.g. mythfrontend.app)"
  echo ""
  echo "  --with-bindings=LIST     install the bindings specified in the"
  echo "                           comma-separated list"
  echo "                           Supported bindings: perl"
  #echo ""
  #echo "NOTE: The object files are build at the place where configure is launched"
  exit 1
}

log(){
    echo "$@" >>$logfile
}

log_file(){
    log BEGIN $1
    cat -n $1 >>$logfile
    log END $1
}

echolog(){
    log "$@"
    echo "$@"
}

die(){
    echolog "$@"
    cat <<EOF
If you think configure made a mistake, make sure you are using the latest
version from SVN.  If the latest version fails, report the problem to the
mythtv-dev@mythtv.org mailing list or IRC #mythtv on irc.freenode.net
EOF
    if enabled logging; then
        cat <<EOF
Include the log file "$logfile" produced by configure as this will help
solving the problem.
EOF
    else
cat <<EOF
Rerun configure with logging enabled (do not use --log=no), and include the
log this produces with your report.
EOF
    fi
    rm -f $TMPC $TMPCXX $TMPO $TMPE $TMPS $TMPH
    exit 1
}

# "tr '[a-z]' '[A-Z]'" is a workaround for Solaris tr not grokking "tr a-z A-Z"
toupper(){
    echo "$@" | tr '[a-z]' '[A-Z]'
}

set_all(){
    value=$1
    shift
    for var in $*; do
        eval $var=$value
    done
}

enable(){
    set_all yes $*
}

disable(){
    set_all no $*
}

enabled(){
    eval test "x\$$1" = "xyes"
}

enabled_all(){
    for opt; do
        enabled $opt || return 1
    done
}

enabled_any(){
    for opt; do
        enabled $opt && return 0
    done
}

check_deps(){
    for cfg; do
        eval dep_all="\$${cfg}_deps"
        eval dep_any="\$${cfg}_deps_any"
        enabled_all $dep_all || disable $cfg
        enabled_any $dep_any || disable $cfg
    done
}

print_config(){
    pfx=$1
    header=$2
    makefile=$3
    shift 3
    for cfg; do
        if enabled $cfg; then
            ucname="${pfx}`toupper $cfg`"
            echo "#define ${ucname} 1" >> $header
            echo "${ucname}=yes" >> $makefile
        fi
    done
}

flags_saved(){
    (: ${SAVE_CFLAGS?}) 2>/dev/null
}

save_flags(){
    flags_saved && return
    SAVE_CFLAGS="$CFLAGS"
    SAVE_LDFLAGS="$LDFLAGS"
    SAVE_extralibs="$extralibs"
}

restore_flags(){
    CFLAGS="$SAVE_CFLAGS"
    LDFLAGS="$SAVE_LDFLAGS"
    extralibs="$SAVE_extralibs"
    unset SAVE_CFLAGS
    unset SAVE_LDFLAGS
    unset SAVE_extralibs
}

temp_cflags(){
    save_flags
    CFLAGS="$CFLAGS $*"
}

temp_ldflags(){
    save_flags
    LDFLAGS="$LDFLAGS $*"
}

temp_extralibs(){
    save_flags
    extralibs="$extralibs $*"
}

append(){
    var=$1
    shift
    flags_saved && eval "SAVE_$var=\"\$SAVE_$var $*\""
    eval "$var=\"\$$var $*\""
}

add_cflags(){
    append CFLAGS "$@"
}

add_cppflags(){
    append ECXXFLAGS "$@"
}

add_ldflags(){
    append LDFLAGS "$@"
}

add_extralibs(){
    append extralibs "$@"
}

check_cmd(){
    log "$@"
    "$@" >>$logfile 2>&1
}

check_cc(){
    log check_cc "$@"
    cat >$TMPC
    log_file $TMPC
    check_cmd $cc $CFLAGS "$@" -c -o $TMPO $TMPC
}

check_cpp(){
    log check_cpp "$@"
    cat >$TMPCXX
    log_file $TMPCXX
    check_cmd $cxx $CFLAGS "$@" -E -o $TMPO $TMPCXX
}

check_ld(){
    log check_ld "$@"
    check_cc || return
    check_cmd $cc $LDFLAGS "$@" -o $TMPE $TMPO $extralibs
}

check_cflags(){
    log check_cflags "$@"
    check_cc "$@" <<EOF && add_cflags "$@"
int x;
EOF
}

check_cppflags(){
    log check_cppflags "$@"
    check_cpp "$@" <<EOF && add_cppflags "$@"
class X {};
int x;
EOF
}

check_ldflags(){
    log check_ldflags "$@"
    check_ld "$@" <<EOF && add_ldflags "$@"
int main(){
    return 0;
}
EOF
}

check_header(){
    log check_header "$@"
    header=$1
    shift
    check_cpp "$@" <<EOF
#include <$header>
int x;
EOF
    err=$?
    var=`echo $header | sed 's/[^A-Za-z0-9_]/_/g'`
    test "$err" = 0 && enable $var || disable $var
    return $err
}

check_func(){
    log check_func "$@"
    func=$1
    shift
    check_ld "$@" <<EOF
extern int $func();
int main(){
    $func();
}
EOF
    err=$?
    test "$err" = 0 && enable $func || disable $func
    return $err
}

check_lib(){
    log check_lib "$@"
    header="$1"
    func="$2"
    shift 2
    temp_extralibs "$@"
    check_header $header && check_func $func && add_extralibs "$@"
    err=$?
    restore_flags
    return $err
}

check_exec(){
    check_ld "$@" && { test "$cross_compile" = yes || $TMPE >>$logfile 2>&1; }
}

require(){
    name="$1"
    header="$2"
    func="$3"
    shift 3
    check_lib $header $func "$@" || die "ERROR: $name not found"
}

apply(){
    file=$1
    shift
    "$@" < "$file" > "$file.tmp" && mv "$file.tmp" "$file" || rm "$file.tmp"
}

CONFIG_LIST='
    encoders
    decoders
    parsers
    muxers
    demuxers
    amr
    amr_nb
    amr_nb_fixed
    amr_wb
    audio_beos
    audio_oss
    avisynth
    beos_netserver
    bktr
    dc1394
    darwin
    darwin_da
    dv1394
    dvdv
    ffmpeg
    ffplay
    ffserver
    gpl
    ipv6
    liba52
    liba52bin
    libdts
    libfaac
    libfaad
    libfaadbin
    libgsm
    libmp3lame
    libnut
    libogg
    libvorbis
    memalign_hack
    mpegaudio_hp
    network
    pp
    protocols
    swscaler
    vhook
    video4linux
    video4linux2
    wince
    x11grab
    x264
    xvid
    zlib
'

HAVE_LIST='
    altivec_h
    beosthreads
    byteswap_h
    dcbzl
    dev_bktr_ioctl_bt848_h
    dev_bktr_ioctl_meteor_h
    dev_ic_bt8xx_h
    dev_video_meteor_ioctl_meteor_h
    dev_video_bktr_ioctl_bt848_h
    dlfcn_h
    dlopen
    dvdv
    freetype2
    ftime
    getifaddrs
    gettimeofday
    gprof
    imlib2
    inet_aton
    localtime_r
    lrint
    lrintf
    machine_ioctl_bt848_h
    machine_ioctl_meteor_h
    malloc_h
    memalign
    mlib
    os2
    os2threads
    pthreads
    round
    sdl
    sdl_video_size
    soundcard_h
    stdint_h
    sys_soundcard_h
    threads
    w32threads
'

x86_mmx_cpus="pentium-mmx,pentium2,pentium3,pentium3m,pentium-m"
x86_mmx_cpus="$x86_mmx_cpus,pentium4,pentium4m,prescott"
x86_mmx_cpus="$x86_mmx_cpus,athlon,athlon-xp,athlon-tbird,athlon-4,athlon-mp,"
x86_mmx_cpus="$x86_mmx_cpus,c3,c3-2,k6,k6-2,k6-3"

x86_cpus="i386,i486,i586,i686,pentium,pentiumpro,${x86_mmx_cpus}"

x86_cmov_cpus="i686,pentiumpro,pentium2,pentium3,pentium3m,pentium-m,"
x86_cmov_cpus="$x86_cmov_cpus,pentium4,pentium4m,prescott,athlon,"
x86_cmov_cpus="$x86_cmov_cpus,athlon-xp,athlon-tbird,athlon-4,athlon-mp,"
x86_cmov_cpus="$x86_cmov_cpus,c3-2"

x86_slow_cmov_cpus="pentium4,pentium4m,prescott,nocona"

x86_64_cpus="x86-64,athlon64,k8,opteron,athlon-fx,nocona"

if test x"$1" = x"-h" -o x"$1" = x"--help" ; then
    show_help
fi

flashsv_decoder_deps="zlib"
flashsv_encoder_deps="zlib"
mpeg_xvmc_decoder_deps="xvmc"
mpeg_xvmc_vld_decoder_deps="xvmc_vld"
png_decoder_deps="zlib"
png_encoder_deps="zlib"
x264_encoder_deps="x264"
xvid_encoder_deps="xvid"
zmbv_decoder_deps="zlib"
zmbv_encoder_deps="zlib"

aac_decoder_deps="libfaad"
mpeg4aac_decoder_deps="libfaad"
ac3_decoder_deps="liba52"
amr_nb_decoder_deps_any="amr_nb amr_nb_fixed"
amr_nb_encoder_deps_any="amr_nb amr_nb_fixed"
amr_wb_decoder_deps="amr_wb"
amr_wb_encoder_deps="amr_wb"
dts_decoder_deps="libdts"
faac_encoder_deps="libfaac"
libgsm_decoder_deps="libgsm"
libgsm_encoder_deps="libgsm"
mp3lame_encoder_deps="libmp3lame"
oggvorbis_decoder_deps="libvorbis"
oggvorbis_encoder_deps="libvorbis"

audio_demuxer_deps_any="audio_oss audio_beos"
audio_muxer_deps_any="audio_oss audio_beos"
dc1394_demuxer_deps="dc1394"
dv1394_demuxer_deps="dv1394"
gxf_muxer_deps="gpl"
nut_muxer_deps="libnut"
ogg_muxer_deps="libogg"
redir_demuxer_deps="network"
rtp_muxer_deps="network"
rtsp_demuxer_deps="network"
sdp_demuxer_deps="network"
v4l2_demuxer_deps="video4linux2"
video_grab_device_demuxer_deps_any="video4linux bktr"
x11_grab_device_demuxer_deps="x11grab"

# set temporary file name
if test ! -z "$TMPDIR" ; then
    TMPDIR1="${TMPDIR}"
elif test ! -z "$TEMPDIR" ; then
    TMPDIR1="${TEMPDIR}"
else
    TMPDIR1="/tmp"
fi

TMPC="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.c"
TMPCXX="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.cpp"
TMPO="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.o"
TMPE="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}"
TMPS="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.S"
TMPH="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.h"

# default parameters
logging="yes"
logfile="config.err"
compile_type="release"
PREFIX="/usr/local"
libdir_name="lib"
libdir=""
shlibdir=""
incdir=""
mandir=""
bindir=""
cross_prefix=""
cross_compile="no"
cc="gcc"
cxx="g++"
ccache="yes"
distcc="yes"
ar="ar"
ranlib="ranlib"
make="make"
strip="strip"
cpu=`uname -m`
cpu_raw="$cpu"
processor=`uname -p 2>/dev/null`
processor_flags=""
tune="generic"
powerpc_perf="no"
mmx="default"
cmov="no"
cmov_is_fast="no"
armv5te="default"
iwmmxt="default"
altivec="default"
dcbzl="no"
mmi="default"
audio_oss="default"
audio_alsa="default"
audio_arts="default"
audio_jack="default"
ivtv="yes"
dvb="no"
dvb_path="/usr/include"
lirc="yes"
appleremote="no"
joystick_menu="yes"
firewire_cable_box="yes"
dbox2_dvb_box="yes"
hdhomerun_box="yes"
iptv="yes"
x11_include_path="/usr/X11R6/include"
x11="yes"
xrandr="yes"
xv="yes"
xvmc="no"
xvmcw="yes"
xvmc_vld="yes"
xvmc_pro="no"
xvmc_opengl="no"
xvmc_lib=""
dvdv="no"
mac_bundle="no"
mac_corevideo="no"
opengl_vsync="no"
direct_fb="no"
direct_x="no"
CONFIG_INCLUDEPATH=""
CONFIG_DEFINES=""
PROFILEFLAGS=""
proc_opt="no"
valgrind="no"
symbol_visibility="no"
frontend="yes"
backend="no"
opengl="no"

bindings_perl="yes"

if test x"$CC" != x"" ; then
    cc="$CC"
fi

if test x"$CXX" != x"" ; then
    cxx="$CXX"
fi

if test -f /proc/cpuinfo ; then
    if test x"$processor" = x"" -o x"$processor" = x"$cpu_raw" -o \
            x"$processor" = x"unknown" ; then
        processor=`cat /proc/cpuinfo | grep "model name" | head -n 1`
    fi
    processor_flags=`cat /proc/cpuinfo | grep "flags" | head -n 1`
fi

# Mac OS X equivalent
if test -f /usr/bin/hostinfo ; then 
    if test x"$processor" = x"" -o x"$processor" = x"$cpu_raw" -o \
            x"$processor" = x"unknown" -o x"$processor" = x"powerpc" ; then 
        processor=`/usr/bin/hostinfo | grep "Processor type:"` 
        processor=${processor#Processor type: *} 
        processor=${processor% (*} 
        if test x"`echo $processor | cut -c1-3`" = x"ppc" ; then
            tune=$processor 
        else 
            processor=`/usr/sbin/sysctl -n machdep.cpu.model_string` 
            processor_flags=`/usr/sbin/sysctl -n machdep.cpu.features` 
            processor_flags=`echo $processor_flags | tr "[A-Z]" "[a-z]"` 
        fi 
    fi 
fi 

# These have to be looked up early for some types of cross-compiling to work
cpu_overide="no"
for opt do
  case "$opt" in
  --cpu=*)
          cpu=`echo $opt | cut -d '=' -f 2`
          cpu_raw="$cpu"
          processor=""
          processor_flags=""
          cpu_overide="yes"
  ;;
  --tune=*)
          tune=`echo $opt | cut -d '=' -f 2`
          tune_raw="$tune"
          processor=""
          processor_flags=""
  ;;
  --arch=*)
          arch=`echo $opt | cut -d '=' -f 2`
          cpu_overide="yes"
          cpu="$arch"
          cpu_raw="$arch"
          tune="$arch"
          tune_raw="$arch"
          processor=""
          processor_flags=""
  ;;
  esac
done

is_x86_cpu() {
    expr ",${x86_cpus}," : ".*,$1," > /dev/null
}

if is_x86_cpu "$cpu" ; then
    cpu="x86"
fi

is_x86_64_cpu() {
    expr ",${x86_64_cpus}," : ".*,$1," > /dev/null
}

if is_x86_64_cpu "$cpu" ; then
    cpu="x86_64"
fi

is_x86_cmov_cpu() {
    expr ",${x86_cmov_cpus}," : ".*,$1," > /dev/null
}

is_x86_slow_cmov_cpu() {
    expr ",${x86_slow_cmov_cpus}," : ".*,$1," > /dev/null
}

case "$cpu" in
  x86)
    if is_x86_cmov_cpu "$cpu_raw" ; then
        cmov="yes"
        if ! is_x86_slow_cmov_cpu "$cpu_raw" ; then
            cmov_is_fast="yes"
        fi
    fi
  ;;
  x86_64)
    cpu="x86"
    canon_arch="`$cc -dumpmachine | sed -e 's,\([^-]*\)-.*,\1,'`"
    if [ x"$canon_arch" = x"x86_64" -o x"$canon_arch" = x"amd64" ]; then
      if [ -z "`echo $CFLAGS | grep -- -m32`"  ]; then
        cpu="x86_64"
      fi
    fi
    cmov="yes"
    if ! is_x86_slow_cmov_cpu "$cpu_raw" ; then
        cmov_is_fast="yes"
    fi
  ;;
  # armv4l is a subset of armv5tel
  armv4l|armv5tel)
    cpu="armv4l"
  ;;
  alpha)
    cpu="alpha"
  ;;
  "Power Macintosh"|ppc|ppc64|powerpc)
    cpu="powerpc"
  ;;
  mips|mipsel|IP*)
    cpu="mips"
  ;;
  sun4u|sparc64)
    cpu="sparc64"
  ;;
  sparc)
    cpu="sparc"
  ;;
  sh4)
    cpu="sh4"
  ;;
  parisc|parisc64)
    cpu="parisc"
  ;;
  s390|s390x)
    cpu="s390"
  ;;
  m68k)
    cpu="m68k"
  ;;
  ia64)
    cpu="ia64"
  ;;
  *)
    cpu="unknown"
  ;;
esac

gprof="no"
video4linux="yes"
video4linux2="no"
bktr="no"
audio_beos="no"
x11grab="no"
dv1394="no"
dc1394="no"
network="yes"
ipv6="yes"
zlib="yes"
liba52="yes"
liba52bin="no"
libdts="no"
libfaac="no"
libfaad="no"
libfaadbin="no"
libgsm="no"
libmp3lame="no"
libnut="no"
libogg="no"
xvid="no"
x264="no"
pp="yes"
shared_pp="no"
mingw32="no"
wince="no"
os2="no"
lstatic="no"
lshared="yes"
optimize="yes"
debug="no"
extrawarnings="no"
dostrip="yes"
installstrip="-s"
extralibs="-lm"
bigendian="no"
vhook="no"
dlfcn_h="no"
dlopen="no"
mpegaudio_hp="yes"
SHFLAGS='-shared -Wl,-soname,$@'
VHOOKFLAGS="$SHFLAGS"
beos_netserver="no"
protocols="yes"
ffmpeg="no"
ffserver="no"
ffplay="no"
LIBOBJFLAGS=""
FFLDFLAGS=-Wl,--warn-common
LDLATEFLAGS='-Wl,-rpath-link,\$(BUILD_ROOT)/libavcodec -Wl,-rpath-link,\$(BUILD_ROOT)/libavformat -Wl,-rpath-link,\$(BUILD_ROOT)/libavutil'
FFSERVERLDFLAGS=-Wl,-E
LDCONFIG="ldconfig"
LIBPREF="lib"
LIBSUF=".a"
LIB='$(LIBPREF)$(NAME)$(LIBSUF)'
SLIBPREF="lib"
SLIBSUF=".so"
SLIBNAME='$(SLIBPREF)$(NAME)$(SLIBSUF)'
SLIBNAME_WITH_VERSION='$(SLIBNAME).$(LIBVERSION)'
SLIBNAME_WITH_MAJOR='$(SLIBNAME).$(LIBMAJOR)'
EXESUF=""
BUILDSUF=""
amr_nb="no"
amr_wb="no"
amr_nb_fixed="no"
amr_if2="no"
mlib="no"
beosthreads="no"
os2threads="no"
pthreads="no"
w32threads="no"
thread_type="no"
swscaler="no"
gpl="yes"
memalign_hack="no"
asmalign_pot="unknown"

# OS specific
targetos=`uname -s`
case $targetos in
BeOS)
PREFIX="/boot/home/config"
# helps building libavcodec
CFLAGS="$CFLAGS -DPIC -fomit-frame-pointer"
# 3 gcc releases known for BeOS, each with ugly bugs
gcc_version="`$cc -v 2>&1 | grep version | cut -d ' ' -f3-`"
case "$gcc_version" in
2.9-beos-991026*|2.9-beos-000224*) echo "R5/GG gcc"
mmx="no"
;;
*20010315*) echo "BeBits gcc"
CFLAGS="$CFLAGS -fno-expensive-optimizations"
;;
esac
SHFLAGS=-nostart
# disable Linux things
audio_oss="no"
video4linux="no"
dv1394="no"
# enable BeOS things
audio_beos="yes"
# no need for libm, but the inet stuff
# Check for BONE
if (echo $BEINCLUDES|grep 'headers/be/bone' >/dev/null); then
extralibs="-lbind -lsocket"
else
beos_netserver="yes"
extralibs="-lnet"
fi ;;
SunOS)
video4linux="no"
video4linux2="no"
audio_oss="no"
dv1394="no"
make="gmake"
FFLDFLAGS=""
FFSERVERLDFLAGS=""
SHFLAGS="-shared -Wl,-h,\$@"
need_inet_aton="yes"
extralibs="$extralibs -lsocket -lnsl"
;;
NetBSD)
video4linux="no"
video4linux2="no"
bktr="yes"
audio_oss="yes"
dv1394="no"
make="gmake"
extralibs="$extralibs -lossaudio"
;;
OpenBSD)
video4linux="no"
video4linux2="no"
bktr="yes"
audio_oss="yes"
joystick_menu="no"
audio_alsa="no"
audio_arts="no"
audio_jack="no"
dv1394="no"
ivtv="no"
dbox2_dvb_box="no"
hdhomerun_box="yes"
dvb="no"
backend="no"
need_memalign="no"
make="gmake"
LIBOBJFLAGS="\$(PIC)"
LDCONFIG="ldconfig -m \$(libdir)"
SHFLAGS='-shared'
SLIBNAME='$(SLIBPREF)$(NAME)$(SLIBSUF).$(LIBVERSION)'
SLIBNAME_WITH_VERSION='$(SLIBNAME)'
SLIBNAME_WITH_MAJOR='$(SLIBNAME)'
extralibs="$extralibs -lossaudio"
CCONFIG="$CCONFIG openbsd"
;;
FreeBSD)
joystick_menu="no"
video4linux2="no"
bktr="yes"
audio_oss="yes"
dv1394="no"
make="gmake"
need_memalign="no"
backend="yes"
video4linux="yes"
CFLAGS="$CFLAGS -pthread"
CCONFIG="$CCONFIG freebsd"
;;
GNU/kFreeBSD)
video4linux="no"
video4linux2="no"
bktr="yes"
audio_oss="yes"
dv1394="no"
CFLAGS="$CFLAGS -pthread"
;;
BSD/OS)
video4linux="no"
joystick_menu="no"
video4linux2="no"
bktr="yes"
audio_oss="yes"
dv1394="no"
extralibs="-lpoll -lgnugetopt -lm"
make="gmake"
strip="strip -d"
installstrip=""
;;
Darwin)
cc="cc"
video4linux="no"
ivtv="no"
dvb="no"
x11="no"
lirc="no"
appleremote="yes"
joystick_menu="no"
audio_oss="no"
audio_alsa="no"
audio_arts="no"
audio_jack="no"
dv1394="no"
ffserver="no"
backend="yes"
need_memalign="no"
SHFLAGS="-dynamiclib -Wl,-single_module -Wl,-install_name,\$(libdir)/\$(SLIBNAME),-current_version,\$(SPPVERSION),-compatibility_version,\$(SPPVERSION) -Wl,-read_only_relocs,suppress"
VHOOKFLAGS='-dynamiclib -Wl,-single_module -flat_namespace -undefined suppress -Wl,-install_name,$(libdir)/vhook/$@'
extralibs=""
darwin="yes"
strip="strip -x"
installstrip=""
FFLDFLAGS="-Wl,-search_paths_first"
SLIBSUF=".dylib"
SLIBNAME_WITH_VERSION='$(SLIBPREF)$(NAME).$(LIBVERSION)$(SLIBSUF)'
SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(NAME).$(LIBMAJOR)$(SLIBSUF)'
FFSERVERLDFLAGS=-Wl,-bind_at_load
;;
MINGW32*)
# Note: the rest of the mingw32 config is done afterwards as mingw32
# can be forced on the command line for Linux cross compilation.
mingw32="yes"
;;
CYGWIN*)
targetos=CYGWIN
shlibdir='${PREFIX}/bin'
video4linux="no"
ivtv="no"
dvb="no"
x11="no"
joystick_menu="no"
audio_oss="no"
audio_alsa="no"
audio_arts="no"
audio_jack="no"
dv1394="no"
extralibs=""
EXESUF=".exe"
SLIBPREF="cyg"
SLIBSUF=".dll"
SLIBNAME_WITH_VERSION='$(SLIBPREF)$(NAME)-$(LIBVERSION)$(SLIBSUF)'
SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(NAME)-$(LIBMAJOR)$(SLIBSUF)'
SHFLAGS='-shared -Wl,--out-implib=lib$(NAME).dll.a'
;;
Linux)
LDLATEFLAGS="-Wl,--as-needed $LDLATEFLAGS"
CCONFIG="$CCONFIG linux"
backend="yes"
video4linux="yes"
video4linux2="no"
;;
IRIX*)
targetos=IRIX
ranlib="echo ignoring ranlib"
video4linux="no"
video4linux2="no"
audio_oss="no"
make="gmake"
;;
OS/2)
TMPE=$TMPE".exe"
ar="emxomfar -p128"
ranlib="echo ignoring ranlib"
strip="echo ignoring strip"
CFLAGS="$CFLAGS -Zomf"
FFLDFLAGS="-Zomf -Zstack 16384 -s"
SHFLAGS="-Zdll -Zomf"
FFSERVERLDFLAGS=""
LIBPREF=""
LIBSUF=".lib"
SLIBPREF=""
SLIBSUF=".dll"
EXESUF=".exe"
extralibs=""
pkg_requires=""
video4linux="no"
video4linux2="no"
audio_oss="no"
dv1394="no"
ffserver="no"
vhook="no"
os2="yes"
;;
  *)
    targetos="${targetos}-UNKNOWN"
    ;;
  esac

# find source path
source_path="`dirname \"$0\"`"
source_path_used="yes"
if test -z "$source_path" -o "$source_path" = "." ; then
    source_path="`pwd`"
    source_path_used="no"
else
    source_path="`cd \"$source_path\"; pwd`"
    echo "$source_path" | grep -q '[[:blank:]]' &&
      die "Out of tree builds are impossible with whitespace in source path."
fi

if test x"$1" = x"-h" -o x"$1" = x"--help" ; then
    show_help
fi

FFMPEG_CONFIGURATION=" "
for opt do
  FFMPEG_CONFIGURATION="$FFMPEG_CONFIGURATION""$opt "
done

ENCODER_LIST=`sed -n 's/^[^#]*ENC.*, *\(.*\)).*/\1_encoder/p' "$source_path/libs/libavcodec/allcodecs.c"`
DECODER_LIST=`sed -n 's/^[^#]*DEC.*, *\(.*\)).*/\1_decoder/p' "$source_path/libs/libavcodec/allcodecs.c"`
PARSER_LIST=`sed -n 's/^[^#]*PARSER.*, *\(.*\)).*/\1_parser/p' "$source_path/libs/libavcodec/allcodecs.c"`
MUXER_LIST=`sed -n 's/^[^#]*_MUX.*, *\(.*\)).*/\1_muxer/p' "$source_path/libs/libavformat/allformats.c"`
DEMUXER_LIST=`sed -n 's/^[^#]*DEMUX.*, *\(.*\)).*/\1_demuxer/p' "$source_path/libs/libavformat/allformats.c"`

enable $ENCODER_LIST $DECODER_LIST $PARSER_LIST $MUXER_LIST $DEMUXER_LIST

if [ -e config.log ] ; then
    PCONF=`cat config.log | tail -n 1 | grep configure`
    if test x"$PCONF" != x"" ; then
        PCONF=`echo $PCONF | sed 's/.\/configure//g'`
    fi
    for opt do
        if test x"$opt" != x"--prev" -a x"$opt" != x"--previous" ; then
            OTHOPT="$OTHOPT$opt"
        fi
        if test x"$opt" = x"--prev" -o x"$opt" = x"--previous" ; then
            if test x"$PCONF" != "--prev" ; then
                PREV="yes";
            fi
        fi
    done
    if test x"$PREV" = x"yes"; then
        echo "Options: $PCONF $OTHOPT"
        ./configure $PCONF $OTHOPT
        exit
    fi
fi

for opt do
  optval="${opt#*=}"
  case "$opt" in
  --log)
  ;;
  --log=*) logging="$optval"
  ;;
  --compile-type=*) compile_type="$optval"
  ;;  
  --prefix=*) PREFIX="$optval";
  ;;
  --libdir-name=*) libdir_name="$optval"
  ;;
  --libdir=*) libdir="$optval";
  ;;
  --shlibdir=*) shlibdir="$optval"
  ;;
  --mandir=*) mandir="$optval"
  ;;
  --source-path=*) source_path="$optval"
  ;;
  --cross-prefix=*) cross_prefix="$optval"
  ;;
  --cc=*) cc="$optval"
  ;;
  --make=*) make="$optval"
  ;;
  --extra-cflags=*) ECFLAGS="$optval"
  ;;
  --extra-cxxflags=*) ECXXFLAGS="$optval"
  ;;
  --extra-ldflags=*) add_ldflags "$optval"
    ;;
  --extra-libs=*) add_extralibs "$optval"
  ;;
  --build-suffix=*) BUILDSUF="$optval"
  ;;
  --disable-ccache) ccache="no"
  ;;
  --disable-distcc) distcc="no"
  ;;
  --powerpc-perf-enable) powerpc_perf="yes"
  ;;
  --enable-proc-opt) proc_opt="yes"
  ;;
  --disable-proc-opt) proc_opt="no"
  ;;
  --enable-mmx) mmx="yes"
  ;;
  --disable-mmx) mmx="no"
  ;;
  --disable-iwmmxt) iwmmxt="no"
  ;;
  --disable-altivec) altivec="no"
  ;;
  --enable-gprof) gprof="yes"
  ;;
  --enable-v4l) video4linux="yes"
  ;;
  --disable-v4l) video4linux="no"
  ;;
  --enable-audio-oss)  audio_oss="yes"
  ;;
  --disable-audio-oss) audio_oss="no"
  ;;
  --enable-audio-alsa)  audio_alsa="yes"
  ;;
  --disable-audio-alsa) audio_alsa="no"
  ;;
  --enable-audio-arts)  audio_arts="yes"
  ;;
  --disable-audio-arts) audio_arts="no"
  ;;
  --enable-audio-jack)  audio_jack="yes"
  ;;
  --disable-audio-jack) audio_jack="no"
  ;;
  --enable-audio-beos)  audio_beos="yes"
  ;;
  --disable-audio-beos) audio_beos="no"
  ;;
  --disable-dv1394) dv1394="no"
  ;;
  --disable-network) network="no"; ffserver="no"
  ;;
  --disable-ipv6) ipv6="no";
  ;;
  --disable-zlib) zlib="no"
  ;;
  --disable-a52) liba52="no"
  ;;
  --enable-a52bin) liba52bin="yes"
  ;;
  --enable-dts) libdts="yes"
  ;;
  --disable-dts) libdts="no"
  ;;
  --disable-pp) shared_pp="no"
  ;;
  --enable-libgsm) libgsm="yes"
  ;;
#  --enable-mp3lame) libmp3lame="yes"
#  ;;
#  --enable-libogg) libogg="yes"
#  ;;
#  --enable-vorbis) libvorbis="yes"
#  ;;
  --enable-faad) libfaad="yes"
  ;;
  --enable-faadbin) libfaadbin="yes"
  ;;
  --enable-faac) libfaac="yes"
  ;;
  --enable-xvid) xvid="yes"
  ;;
  --enable-x264) x264="yes"
  ;;
  --enable-x11grab) x11grab="yes";
  ;;
  --enable-dc1394) dc1394="yes"
    pkg_requires="$pkg_requires libraw1394"
  ;;
  --disable-vhook) vhook="no"
  ;;
  --enable-mingw32) mingw32="yes"
  ;;
  --enable-mingwce) wince="yes"
  ;;
  --enable-static) lstatic="yes"
  ;;
  --disable-static) lstatic="no"
  ;;
  --enable-shared) lshared="yes"
  ;;
  --disable-shared) lshared="no"
  ;;
  --disable-debug) debug="no"
  ;;
  --disable-opts) optimize="no"
  ;;
  --enable-extra-warnings) extrawarnings="yes"
  ;;
  --disable-mpegaudio-hp) mpegaudio_hp="no"
  ;;
  --disable-protocols) protocols="no"; network="no"; ffserver="no"
  ;;
  --disable-ffmpeg) ffmpeg="no"
  ;;
  --disable-ffserver) ffserver="no"
  ;;
  --disable-ffplay) ffplay="no"
  ;;
  --enable-small) optimize="small"
  ;;
  --enable-amr_nb) amr="yes"; amr_nb="yes"; amr_nb_fixed="no"
  ;;
  --enable-amr_nb-fixed) amr="yes"; amr_nb_fixed="yes"; amr_nb="no"
  ;;
  --enable-amr_wb) amr="yes"; amr_wb="yes"
  ;;
  --enable-amr_if2) amr="yes"; amr_if2="yes"
  ;;
  --enable-sunmlib) mlib="yes"
  ;;
  --enable-ffmpeg-pthreads) pthreads="yes"
  ;;
  --disable-ffmpeg-pthreads) pthreads="no"
  ;;
  --enable-w32threads) w32threads="yes"
  ;;
  --enable-beosthreads) beosthreads="yes"
  ;;
  --enable-os2threads) os2threads="yes"
  ;;
  --enable-swscaler) swscaler="yes"
  ;;
  --enable-gpl) gpl="yes"
  ;;
  --enable-memalign-hack) memalign_hack="yes"
  ;;
  --disable-strip) dostrip="no"
  ;;
  --enable-encoder=*) enable ${optval}_encoder
  ;;
  --enable-decoder=*) enable ${optval}_decoder
  ;;
  --disable-encoder=*) disable ${optval}_encoder
  ;;
  --disable-decoder=*) disable ${optval}_decoder
  ;;
  --disable-encoders) disable $ENCODER_LIST
  ;;
  --disable-decoders) disable $DECODER_LIST
  ;;
  --enable-muxer=*) enable ${optval}_muxer
  ;;
  --disable-muxer=*) disable ${optval}_muxer
  ;;
  --disable-muxers) disable $MUXER_LIST; ffserver="no"
  ;;
  --enable-demuxer=*) enable ${optval}_demuxer
  ;;
  --disable-demuxer=*) disable ${optval}_demuxer
  ;;
  --disable-demuxers) disable $DEMUXER_LIST
  ;;
  --enable-parser=*) enable ${optval}_parser
  ;;
  --disable-parser=*) disable $PARSER_LIST
  ;;
  --disable-parsers) PARSER_LIST=""
  ;;
  --enable-ivtv) ivtv="yes"
  ;;
  --disable-ivtv) ivtv="no"
  ;;
  --enable-lirc) lirc="yes"
  ;;
  --disable-lirc) lirc="no"
  ;;
  --enable-joystick-menu) joystick_menu="yes"
  ;;
  --disable-joystick-menu) joystick_menu="no"
  ;;
  --enable-firewire) firewire_cable_box="yes"
  ;;
  --disable-firewire) firewire_cable_box="no"
  ;;
  --enable-dbox2) dbox2_dvb_box="yes"
  ;;
  --disable-dbox2) dbox2_dvb_box="no"
  ;;
  --enable-iptv) iptv="yes"
  ;;
  --disable-iptv) iptv="no"
  ;;
  --enable-hdhomerun) hdhomerun_box="yes"
  ;;
  --disable-hdhomerun) hdhomerun_box="no"
  ;;
  --enable-dvb) dvb="yes"
  ;;
  --disable-dvb) dvb="no"
  ;;
  --dvb-path=*) dvb_path="$optval"
  ;;
  --enable-x11) x11="yes"
  ;;
  --disable-x11) x11="no"
  ;;
  --x11-path=*) x11_include_path="$optval"
  ;;
  --enable-xrandr) xrandr="yes"
  ;;
  --disable-xrandr) xrandr="no"
  ;;
  --enable-xv) xv="yes"
  ;;
  --disable-xv) xv="no"
  ;;
  --enable-xvmc) xvmc="yes"
  ;;
  --disable-xvmc) xvmc="no"
  ;;
  --enable-xvmcw) xvmcw="yes"
  ;;
  --disable-xvmcw) xvmcw="no"
  ;;
  --enable-xvmc-vld) xvmc_vld="yes"
  ;;
  --disable-xvmc-vld) xvmc_vld="no"
  ;;
  --enable-xvmc-pro) xvmc_pro="yes"
  ;;
  --disable-xvmc-pro) xvmc_pro="no"
  ;;
  --enable-xvmc-opengl) xvmc_opengl="yes"
  ;;
  --disable-xvmc-opengl) xvmc_opengl="no"
  ;;
  --xvmc-lib=*) xvmc_lib="$optval"
  ;;
  --enable-mac-accel) dvdv="yes"
  ;;
  --disable-mac-accel) dvdv="no"
  ;;
  --enable-opengl-vsync) opengl_vsync="yes"
  ;;
  --disable-opengl-vsync) opengl_vsync="no"
  ;;
  --enable-directfb) direct_fb="yes"
  ;;
  --disable-directfb) direct_fb="no"
  ;;
  --enable-directx) direct_x="yes"
  ;;
  --disable-directx) direct_x="no"
  ;;
  --enable-valgrind) valgrind="yes"
  ;;
  --enable-symbol-visibility) symbol_visibility="yes"
  ;;
  --disable-valgrind) valgrind="no"
  ;;
  --enable-frontend) frontend="yes"
  ;;
# disabled due to abuse in Gentoo ebuild
#  --disable-frontend) frontend="no"
#  ;;
  --enable-backend) backend="yes"
  ;;
# disabled due to abuse in Gentoo ebuild
#  --disable-backend) backend="no"
#  ;;
  --enable-mac-bundle) mac_bundle="yes"
  ;;
  --cpu=*|--tune=*|--arch=*)
      # We already processed these options earlier so the empty case
      # here is so we don't error out and say they're unknown options.
  ;;
  --previous|--prev)
      echo "No history of previous configure parameters."
  ;;
  --with-bindings=*)
      tmp_bindings=`echo ${optval} | sed -e 's/,/ /g'`
      for binding in ${tmp_bindings} ; do
          if test x"${binding}" = x"perl"; then
              bindings_perl="yes"
          fi
      done
  ;;
  --without-bindings=*)
      tmp_bindings=`echo ${optval} | sed -e 's/,/ /g'`
      for binding in ${tmp_bindings} ; do
          if test x"${binding}" = x"perl"; then
              bindings_perl="no"
          fi
      done
  ;;
  --help) show_help
  ;;
  *)
  echo "Unknown option \"$opt\"."
  echo "See $0 --help for available options."
  exit 1
  ;;
  esac
done

if test x"$video4linux" = x"no" ; then
  ivtv="no"
fi

has_library()
{
    if test -f /etc/ld.so.conf ; then
        LIBPATHS=`cat /etc/ld.so.conf | grep -v "#" | grep -v "include"`
    else
        LIBPATHS=''
    fi
    LIBPATHS="$LIBPATHS `echo $LD_LIBRARY_PATH | sed s/':'/' '/g` "
    # Mac OS X has a different variable for this:
    LIBPATHS="$LIBPATHS `echo $DYLD_LIBRARY_PATH | sed s/':'/' '/g` "

    # recurse down just one level, should be enough in most cases
    if test -f /etc/ld.so.conf ; then
        INCL=`cat /etc/ld.so.conf | grep -v "#" | grep  "^include"`
        SRCH=`echo "$INCL" | sed '{ s/^include \//\//; s/^include /\/etc\//}'`
        for x in $SRCH ; do
            LP_APPEND=`cat $x | grep -v "#" | grep -v "^include"`
            LIBPATHS="$LIBPATHS $LP_APPEND"
        done
    fi

    LIBPATHS="`echo $LIBPATHS /$libdir_name /usr/$libdir_name /usr/local/$libdir_name /usr/X11R6/$libdir_name | sed s/'\/ '/' '/g` "

    HAS_IT="no"
    for LIBPATH in $LIBPATHS ; do
        if test x`ls $LIBPATH/$1* 2> /dev/null | head -n 1` != x"" ; then
            HAS_IT="yes"
        fi
    done
    expr $HAS_IT : "yes" > /dev/null
}

has_header()
{
    HPATHS="/usr/local/include /usr/include /usr/include/g++-v3 /usr/X11R6/include"
    INCL=`echo $DYLD_LIBRARY_PATH $LD_LIBRARY_PATH | sed s/':'/' '/g`
    HPATHS="$HPATHS `echo $INCL | sed s/$libdir_name/include/g` "

    HAS_IT="no"
    for HPATH in $HPATHS ; do
        if test x`ls $HPATH/$1* 2> /dev/null | head -n 1` != x"" ; then
            HAS_IT="yes"
        fi
    done
    expr $HAS_IT : "yes" > /dev/null
}

CCONFIG="$CCONFIG $compile_type"
if test x$compile_type = x"profile" ; then
    PROFILEFLAGS="-g -DNDEBUG"
fi

if test "$logging" != no; then
    test "$logging" = yes || logfile="$logging"
    echo "# $0 $@" >$logfile
    set >>$logfile
else
    logfile=/dev/null
fi

if test "$mingw32" = "yes" -o "$wince" = "yes"; then
    if test "$lshared" = "yes" && test "$lstatic" = "yes" ; then
        cat <<EOF
You can only build one library type at once on MinGW.
Specify --disable-static --enable-shared to only build
the shared libraries. To build only the static libraries
you do not need to pass additional options.
EOF
        exit 1
    fi
    video4linux="no"
    video4linux2="no"
    audio_oss="no"
    dv1394="no"
    dc1394="no"
    ffserver="no"
    network="no"
    if test "$wince" = "yes"; then
        protocols="no"
    fi
    FFLDFLAGS='-Wl,--output-def,$(@:.dll=.def),--out-implib,lib$(SLIBNAME:$(SLIBSUF)=.dll.a)'
    SLIBPREF=""
    SLIBSUF=".dll"
    EXESUF=".exe"
    if test "$force_prefix" != yes; then PREFIX="$PROGRAMFILES/FFmpeg"; fi
    if test "$force_libdir" != yes; then bindir="$PREFIX"; fi
fi

# Combine FFLDFLAGS and the LDFLAGS environment variable
LDFLAGS="$FFLDFLAGS $EXTRALDFLAGS $LDFLAGS"

test -n "$cross_prefix" && cross_compile=yes
cc="${cross_prefix}${cc}"
ar="${cross_prefix}${ar}"
ranlib="${cross_prefix}${ranlib}"
strip="${cross_prefix}${strip}"

# we need to build at least one lib type
if test "$lstatic" = "no" && test "$lshared" = "no" ; then
    cat <<EOF
At least one library type must be built.
Specify --enable-static to build the static libraries or --enable-shared to
build the shared libraries as well. To only build the shared libraries specify
--disable-static in addition to --enable-shared.
EOF
    exit 1;
fi

if test "$libvorbis" = "yes" && test "$libogg" = "no"; then
        die "libogg must be enabled to enable liborbis."
fi

if test "$gpl" != "yes"; then
    if test "$pp" != "no"; then
        die "The Postprocessing code is under GPL and --enable-gpl is not specified."
    fi

    if test "$liba52" != "no" -o "$liba52bin" != "no"; then
        die "liba52 is under GPL and --enable-gpl is not specified."
    fi

    if test "$xvid" != "no"; then
        die "libxvidcore is under GPL and --enable-gpl is not specified."
        fail="yes"
    fi

    if test "$x264" != "no"; then
        die "x264 is under GPL and --enable-gpl is not specified."
        fail="yes"
    fi

    if test "$libdts" != "no"; then
        edie "libdts is under GPL and --enable-gpl is not specified."
        fail="yes"
    fi

    if test "$libfaad" != "no" -o "$libfaadbin" != "no"; then
        if check_header faad.h; then
            check_cc << EOF
                #include <faad.h>
                #ifndef FAAD2_VERSION
                ok faad1
                #endif
                int main( void ) { return 0; }
EOF
            if test $? = 0; then
                die "FAAD2 is under GPL and --enable-gpl is not specified."
            fi
        else
            libfaad="no"
            libfaadbin="no"
            echo "FAAD test failed."
        fi
    fi

    if test "$x11grab" != "no"; then
        die "The X11 grabber is under GPL and --enable-gpl is not specified."
    fi

    if test "$swscaler" != "no"; then
        die "The software scaler is under GPL and --enable-gpl is not specified."
    fi

    if test "$fail" = "yes"; then
        exit 1
    fi
fi

is_x86_mmx() {
    expr ",${x86_mmx_cpus}," : ".*,$1," > /dev/null
}

# compute mmx state
if test x"$mmx" = x"default"; then
    mmx="no"
    if test x"$cpu" = x"x86_64"; then
        mmx="yes"
    fi
    if is_x86_mmx "$cpu_raw"; then
        mmx="yes"
    fi

    # if !cpu && !tune && !arch & processor_flags, then...
    if test x"$cpu_overide" != x"yes" -a x"$tune_raw" = x"" -a \
            x"$processor_flags" != x"" ; then
        mmx="no"
        if expr "$processor_flags" : ".*mmx" > /dev/null ; then
            mmx="yes"
        fi
    fi
fi

test -z "$need_memalign" && need_memalign="$mmx"

#Darwin CC versions
needmdynamicnopic="no"
if test $targetos = Darwin; then
    if test -n "`$cc -v 2>&1 | grep xlc`"; then
        CFLAGS="$CFLAGS -qpdf2 -qlanglvl=extc99 -qmaxmem=-1 -qarch=auto -qtune=auto"
    else
        gcc_version="`$cc -v 2>&1 | grep version | cut -d ' ' -f3-`"
        case "$gcc_version" in
            *2.95*)
                CFLAGS="$CFLAGS -no-cpp-precomp -pipe"
                ;;
            *[34].*)
                CFLAGS="$CFLAGS -no-cpp-precomp -pipe -force_cpusubtype_ALL -Wno-sign-compare"
                if test "$lshared" = no; then
                   needmdynamicnopic="yes"
                fi
                ;;
            *)
                CFLAGS="$CFLAGS -no-cpp-precomp -pipe"
                if test "$lshared" = no; then
                   needmdynamicnopic="yes"
                fi
                ;;
        esac
    fi
fi

if test x"$optimize" != x"no"; then
    add_cflags "-fomit-frame-pointer"
fi

# Can only do AltiVec on PowerPC
if test $altivec = "default"; then
    if test $cpu = "powerpc"; then
        altivec="yes"
    else
        altivec="no"
    fi
fi

# Add processor-specific flags
POWERPCMODE="32bits"
if test $tune != "generic"; then
    case $tune in
        601|ppc601|PowerPC601)
            ARCHFLAGS="-mcpu=601"
            if test $altivec = "yes"; then
                echo "WARNING: Tuning for PPC601 but AltiVec enabled!";
            fi
        ;;
        603*|ppc603*|PowerPC603*)
            ARCHFLAGS="-mcpu=603"
            if test $altivec = "yes"; then
                echo "WARNING: Tuning for PPC603 but AltiVec enabled!";
            fi
        ;;
        604*|ppc604*|PowerPC604*)
            ARCHFLAGS="-mcpu=604"
            if test $altivec = "yes"; then
                echo "WARNING: Tuning for PPC604 but AltiVec enabled!";
            fi
        ;;
        G3|g3|75*|ppc75*|PowerPC75*)
            ARCHFLAGS="-mcpu=750 -mtune=750 -mpowerpc-gfxopt"
            if test $altivec = "yes"; then
                echo "WARNING: Tuning for PPC75x but AltiVec enabled!";
            fi
        ;;
        G4|g4|745*|ppc745*|PowerPC745*)
            ARCHFLAGS="-mcpu=7450 -mtune=7450 -mpowerpc-gfxopt"
            if test $altivec = "no"; then
                echo "WARNING: Tuning for PPC745x but AltiVec disabled!";
            fi
        ;;
        74*|ppc74*|PowerPC74*)
            ARCHFLAGS="-mcpu=7400 -mtune=7400 -mpowerpc-gfxopt"
            if test $altivec = "no"; then
                echo "WARNING: Tuning for PPC74xx but AltiVec disabled!";
            fi
        ;;
        G5|g5|970|ppc970|PowerPC970|power4*|Power4*)
            ARCHFLAGS="-mcpu=970 -mtune=970 -mpowerpc-gfxopt -mpowerpc64"
            if test $altivec = "no"; then
                echo "WARNING: Tuning for PPC970 but AltiVec disabled!";
            fi
            POWERPCMODE="64bits"
        ;;
        sparc64)
            ARCHFLAGS="-mcpu=v9 -mtune=v9"
        ;;               
	*)
            ARCHFLAGS="-mtune=$tune"
	;;
    esac
fi

if test x"$cpu_overide" = x"yes"; then
    ARCHFLAGS="-mcpu=$cpu_raw $ARCHFLAGS"
fi

# make sure we can execute files in $TMPDIR
cat >$TMPE 2>>$logfile <<EOF
#! /bin/sh
EOF
chmod +x $TMPE >>$logfile 2>&1
if ! $TMPE >>$logfile 2>&1; then
    cat <<EOF
Unable to create and execute files in $TMPDIR1.  Set the TMPDIR environment
variable to another directory and make sure that $TMPDIR1 is not mounted
noexec.
EOF
    die "Sanity test failed."
fi
rm $TMPE

# compiler sanity check
check_exec <<EOF
int main(){
    return 0;
}
EOF
if test "$?" != 0; then
    echo "$cc is unable to create an executable file."
    if test -z "$cross_prefix" -a "$cross_compile" = no; then
        echo "If $cc is a cross-compiler, use the --cross-compile option."
        echo "Only do this if you know what cross compiling means."
    fi
    die "C compiler test failed."
fi

# check for assembler specific support

if test $cpu = "powerpc"; then
check_cc <<EOF && dcbzl=yes
int main(void) {
    register long zero = 0;
    char data[1024];
    asm volatile("dcbzl %0, %1" : : "b" (data), "r" (zero));
return 0;
}
EOF
fi

# check for SIMD availability
#
# AltiVec flags: The FSF version of GCC differs from the Apple version
if test $cpu = "powerpc"; then
    if test $altivec = "yes"; then
        if test -n "`$cc -v 2>&1 | grep version | grep Apple`"; then
            ARCHFLAGS="$ARCHFLAGS -faltivec"
        else
            ARCHFLAGS="$ARCHFLAGS -maltivec -mabi=altivec"
        fi
    fi
fi

check_header altivec.h $ARCHFLAGS

# check if our compiler supports Motorola AltiVec C API
if test $altivec = "yes"; then
    if test $altivec_h = "yes"; then
        inc_altivec_h="#include <altivec.h>"
    else
        inc_altivec_h=
    fi
    check_cc $ARCHFLAGS <<EOF || altivec=no
$inc_altivec_h
int main(void) {
    vector signed int v1, v2, v3;
    v1 = vec_add(v2,v3);
    return 0;
}
EOF
fi

# if either tune or cpu is c3 or c3-2 optimize for smallness
if test x"$cpu_raw" = x"c3" -o x"$cpu_raw" = x"c3-2"; then
    ARCHFLAGS="-march=$cpu"
    optimize="small"
fi
if test x"$tune" = x"c3" -o x"$tune" = x"c3-2"; then
    ARCHFLAGS="-march=$tune"
    optimize="small"
fi

# if no tune setting and we know cpu class look at $processor 
if test x"$tune" = x"generic" -a x"$cpu_overide" != x"yes"; then
# first try to tune based on processor info

# P4
   if expr "$processor" : "pentium4" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*Pentium(R) [4D]" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*Xeon(TM) CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*XEON(TM) CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
# Multiprocessor Xeon
   elif expr "$processor" : ".*XEON(TM) MP CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*Intel(R) Xeon(R) CPU.*5110" > /dev/null ; then
       ARCHFLAGS="-march=k8" # this would be pentium4 on 32 bit systems
# Various Intel Duo processors
   elif expr "$processor" : ".*Genuine.*Intel.*CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*Intel(R).*Core(TM)2.*CPU" > /dev/null ; then
       ARCHFLAGS="-march=k8" # this would be pentium4 on 32 bit systems
   elif expr "$processor" : ".*Celeron(R) CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
       optimize="small"
# P6, which includes Intel Core
   elif expr "$processor" : ".*Intel P6 Family" > /dev/null ; then 
       ARCHFLAGS="-march=pentium4" 
       #cpu_raw="i686" 
# P3
   elif expr "$processor" : "pentium3" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
   elif expr "$processor" : ".*Pentium.* III" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
   elif expr "$processor" : ".*Coppermine" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
       optimize="small"
   elif expr "$processor" : ".*Celeron(TM) CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
       optimize="small"
   elif expr "$processor" : ".*Pentium(R) M" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
   elif expr "$processor" : ".*Celeron(R) M processor" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
       #optimize="small"
# P2
   elif expr "$processor" : "pentium2" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
   elif expr "$processor" : ".*Mendocino" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
       optimize="small"
   elif expr "$processor" : ".*Klamath" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
       optimize="small"
   elif expr "$processor" : ".*Deschutes" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
       optimize="small"
   elif expr "$processor" : ".*Pentium II" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
       optimize="small"
# AMD Turion
   elif expr "$processor" : ".*AMD Turion(tm) 64" > /dev/null ; then
       ARCHFLAGS="-march=k8"
# AMD Geode NX
   elif expr "$processor" : ".*AMD Geode(tm) NX" > /dev/null ; then
       ARCHFLAGS="-march=pentiumpro -mmmx"
       optimize="small"
# Athlon 64
   elif expr "$processor" : ".*AMD Athlon(tm) 64" > /dev/null ; then
       ARCHFLAGS="-march=k8"
# Athlon XP
   elif expr "$processor" : "athlon-xp" > /dev/null ; then
       ARCHFLAGS="-march=pentiumpro -mmmx"
   elif expr "$processor" : ".*AMD Athlon(tm) XP" > /dev/null ; then
       ARCHFLAGS="-march=pentiumpro -mmmx"
   elif expr "$processor" : ".*AMD Sempron(tm)" > /dev/null ; then
       ARCHFLAGS="-march=pentiumpro -mmmx"
# Athlon
   elif expr "$processor" : "athlon" > /dev/null ; then
       ARCHFLAGS="-march=athlon"
   elif expr "$processor" : ".*AMD Athlon(..)" > /dev/null ; then
       ARCHFLAGS="-march=athlon"
   elif expr "$processor" : ".*AMD Duron(..)" > /dev/null ; then
       ARCHFLAGS="-march=athlon"
       optimize="small"
# K6
   elif expr "$processor" : ".*AMD-K6(tm) 3D" > /dev/null ; then
       ARCHFLAGS="-march=pentium-mmx"
       optimize="small"
# Transmeta Crusoe
   elif expr "$processor" : ".*Crusoe(m) Processor TM5600" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
# c3-2
   elif expr "$processor" : ".*VIA Esther" > /dev/null ; then
       ARCHFLAGS="-march=c3-2"
       optimize="small"
       cpu_raw="c3-2"
   elif expr "$processor" : ".*VIA Nehemiah" > /dev/null ; then
       ARCHFLAGS="-march=c3-2"
       optimize="small"
       cpu_raw="c3-2"
# c3
   elif expr "$processor" : ".*VIA.*Ezra" > /dev/null ; then
       ARCHFLAGS="-march=c3"
       optimize="small"
       cpu_raw="c3"
   elif expr "$processor" : ".*VIA Samuel" > /dev/null ; then
       ARCHFLAGS="-march=c3"
       optimize="small"
       cpu_raw="c3"

# if no known processor info, tune base on cpu_raw info
   elif test x"$cpu_raw" = x"i686" -a x"$mmx" = x"yes" ; then
       ARCHFLAGS="-march=pentium2"
       proc_error_msg="yes"
   elif test x"$cpu_raw" = x"i686" -a x"$mmx" = x"no" ; then
       ARCHFLAGS="-march=pentiumpro"
       proc_error_msg="yes"
   elif test x"$cpu_raw" = x"i586" -a x"$mmx" = x"yes" ; then
       ARCHFLAGS="-march=pentium-mmx"
       proc_error_msg="yes"
   elif test x"$cpu_raw" = x"i586" -a x"$mmx" = x"no" ; then
       ARCHFLAGS="-march=i586"
       proc_error_msg="yes"
   elif test x"$cpu_raw" = x"i486"; then
       ARCHFLAGS="-march=i486"
       proc_error_msg="yes"
   elif test x"$cpu_raw" = x"i386"; then
       ARCHFLAGS="-march=i386"
       proc_error_msg="yes"
   fi
fi
if test x"$tune" = x"generic" -a x"$cpu" = x"x86_64" -a x"$cpu_overide" != x"yes"; then
   ARCHFLAGS="-march=k8"
elif test x"$tune" = x"generic" -a x"$cpu" = x"sparc64" -a x"$cpu_overide" != x"yes"; then
   ARCHFLAGS="-mcpu=ultrasparc -mvis"
fi

if test x"$proc_error_msg" = x"yes"; then
    UNAME_M_INFO=` uname -m 2> /dev/null`
    UNAME_P_INFO=` uname -p 2> /dev/null`
    PROC_INFO=`cat /proc/cpuinfo | grep "model name" | head -n 1 | sed s/"\t"//g 2>/dev/null`
    PROC_FLAG=`cat /proc/cpuinfo | grep "flags" | head -n 1 | sed s/"\t"//g 2>/dev/null`
    echo ""
    echo " *** WARNING *** "
    echo " Your CPU was not detected properly:"
    echo "   uname -m: $UNAME_M_INFO"
    echo "   uname -p: $UNAME_P_INFO"
    echo " $PROC_INFO"
    echo "      $PROC_FLAG"
    echo ""
    echo " If you are using a recent checkout from "
    echo "   http://svn.mythtv.org/svn/trunk/mythtv "
    echo " please e-mail the above to mythtv-users@mythtv.org"
    echo " With the subject \"configure did not detect my cpu\""
    echo ""
fi

if test x"$proc_opt" = x"no"; then
    test x"$optimize" = X"no" && optimize="yes"
    if test x"$cpu_cmov" = x"yes" -a x"$ARCHFLAGS" != x"-march=k8"; then
        ARCHFLAGS="-march=pentiumpro";
    fi
fi

# if arch flag is present ignore tune and cpu and just use arch
if test x"$arch" != x""; then
    ARCHFLAGS="-march=$arch"
fi

# if architecture specific flags don't work blank them
echo "int main( void ) { return 0; }" > $TMPC
TMP_ARCHFLAGS=$ARCHFLAGS
$cc $CFLAGS $ARCHFLAGS -o $TMPE $TMPC 2> /dev/null || ARCHFLAGS=""
if test x"$ARCHFLAGS" = x""; then
    if test "$cpu_overide" = "yes" -o x"$tune_raw" != x""; then
        echo "ERROR: CPU specific ./configure options failed compile test"
        echo "       Removing CPU specific compilation options. ($TMP_ARCHFLAGS)"
        echo ""
    fi
fi

# check armv5te instructions support
if test $armv5te = "default" -a $cpu = "armv4l"; then
    armv5te=no
    check_cc <<EOF && armv5te=yes
        int main(void) {
        __asm__ __volatile__ ("qadd r0, r0, r0");
        }
EOF
fi

# check iwmmxt support
if test $iwmmxt = "default" -a $cpu = "armv4l"; then
    iwmmxt=no
    check_cc <<EOF && iwmmxt=yes
        int main(void) {
        __asm__ __volatile__ ("wunpckelub wr6, wr4");
        }
EOF
fi

# mmi only available on mips
if test $mmi = "default"; then
    if test $cpu = "mips"; then
        mmi="yes"
    else
        mmi="no"
    fi
fi

# check if our compiler supports mmi
enabled mmi && check_cc <<EOF || mmi="no"
int main(void) {
    __asm__ ("lq \$2, 0(\$2)");
    return 0;
}
EOF

# "CPU_CLIP" test for SRC / libsamplerate
# test positive wrap
cat > $TMPC << EOF
int main(){
    float f = (1<<(sizeof(short)*8))>>1;
    short s = (short)f;
    if ( s == --f )
        return(0);
    return(1);
}
EOF

if $cc $CFLAGS $ECFLAGS -o $TMPE $TMPC 2>/dev/null ; then
$TMPE && cpuclipspositive="yes"
fi

# test negative wrap
cat > $TMPC << EOF
int main(){
    float f = -((1<<(sizeof(short)*8))>>1) - 1;
    short s = (short)f;
    if ( s == ++f)
        return(0);
    return(1);
}
EOF

if $cc $CFLAGS $ECFLAGS -o $TMPE $TMPC 2>/dev/null ; then
$TMPE && cpuclipsnegative="yes"
fi

# test for distcc
if test x"$distcc" = x"yes"; then
    if test x"`distcc --version 2> /dev/null`" = x""; then
        distcc="no"
    else
        XYZ=`which $cc`
        if test x"$XYZ" != x"" -a x"`ls -l $XYZ | grep distcc`" != x""; then
            distcc="yes, using distcc symlinked $cc"
        fi
    fi
fi

# test for ccache
if test x"$ccache" = x"yes"; then
    if test x"`ccache -V 2> /dev/null`" = x""; then
        ccache="no"
    else
        XYZ=`which $cc`
        if test x"$XYZ" != x"" -a x"`ls -l $XYZ | grep ccache`" != x""; then
            ccache="yes, using ccache symlinked $cc"
        fi
    fi
fi

# ccache should be used before distcc for better cache coherency
if test x"$distcc" = x"yes"; then
    if test x"$ccache" = x"no"; then
        cc="distcc $cc"
        cxx="distcc $cxx"
    elif test x"$ccache" = x"yes"; then
        cc="ccache distcc $cc"
        cxx="ccache distcc $cxx"
    else
        distcc="not using distcc explicitly, since ccache symlink is present"
    fi
else
    if test x"$ccache" = x"yes"; then
        cc="ccache $cc"
        cxx="ccache $cxx"
    fi
fi

# ---
# big/little-endian test
if test "$cross_compile" = "no"; then
    check_ld <<EOF || die "endian test failed" && $TMPE && bigendian="yes"
#include <inttypes.h>
int main(int argc, char ** argv){
        volatile uint32_t i=0x01234567;
        return (*((uint8_t*)(&i))) == 0x67;
}
EOF
else
    # programs cannot be launched if cross compiling, so make a static guess
    if test "$cpu" = "powerpc" -o "$cpu" = "mips" ; then
        bigendian="yes"
    fi
fi

# ---
# check availability of some header files

check_header malloc.h
check_func memalign

if test "$memalign" = "no" -a "$need_memalign" = "yes" -a \
        "$memalign_hack" != "yes"; then
    die "Error, no memalign() but SSE enabled, disable it or use --enable-memalign-hack."
fi

check_ld <<EOF && ftime=yes || ftime=no
#include <sys/timeb.h>
int main( void ) { ftime(0); }
EOF

check_ld << EOF && gettimeofday=yes || gettimeofday=no
#include <sys/time.h>
int main( void ) { gettimeofday(0, 0); }
EOF

check_ld <<EOF && getifaddrs=yes || getifaddrs=no
#include <sys/types.h>
#include <sys/socket.h>
#include <ifaddrs.h>
int main( void ) { struct ifaddrs *p; getifaddrs(&p); }
EOF

check_header byteswap.h

check_func inet_aton
check_func localtime_r
enabled zlib && check_lib zlib.h zlibVersion -lz || zlib="no"

# check for some common methods of building with pthread support
# do this before the optional library checks as some of them require pthreads
if enabled pthreads; then
    if check_func pthread_create; then
        :
    elif check_func pthread_create -pthread; then
        add_cflags -pthread
        add_ldflags -pthread
    elif check_func pthread_create -pthreads; then
        add_cflags -pthreads
        add_ldflags -pthreads
    elif ! check_lib pthread.h pthread_create -lpthread; then
        die "ERROR: can't find pthreads library"
    fi
fi

for thread in pthreads beosthreads os2threads w32threads; do
    if enabled $thread; then
        if test $thread_type != "no"; then
            die "ERROR: Only one thread type must be selected."
        else
            thread_type="$thread"
        fi
    fi
done

# these are off by default, so fail if requested and not available
#enabled libdts  && require libdts dts.h dts_init -ldts
enabled libgsm  && require libgsm gsm.h gsm_create -lgsm
enabled libmp3lame && require LAME lame/lame.h lame_init -lmp3lame
enabled libvorbis && require libvorbis vorbis/vorbisenc.h vorbis_info_init -lvorbis -lvorbisenc -logg
enabled libogg  && require libogg ogg/ogg.h ogg_sync_init -logg
enabled xvid    && require XviD xvid.h xvid_global -lxvidcore
enabled x264    && require x264 x264.h x264_encoder_open -lx264
enabled dc1394  && require libdc1394 libdc1394/dc1394_control.h dc1394_create_handle -ldc1394_control -lraw1394
enabled mlib    && require mediaLib mlib_types.h mlib_VectorSub_S16_U8_Mod -lmlib

# Ugh, libfaac uses stdcall calling convention on win32 so we can't use
# the generic test functions
if enabled libfaac; then
    save_flags
    temp_extralibs -lfaac
    check_ld <<EOF && add_extralibs -lfaac || die "ERROR: libfaac not found"
#include <stdint.h>
#include <faac.h>
int main(){
    char *id, *cpr;
    faacEncGetVersion(&id, &cpr);
    return 0;
}
EOF
    restore_flags
fi

# Ugh, recent faad2 versions have renamed all functions and #define the
# old names in faad.h.  Generic tests won't work.
if enabled libfaad; then
    save_flags
    temp_extralibs -lfaad
    check_ld <<EOF && add_extralibs -lfaad || die "ERROR: libfaad not found"
#include <faad.h>
int main(){
    faacDecOpen();
    return 0;
}
EOF
    restore_flags
fi

_stdint_h=yes
check_header stdint.h || _stdint_h=no

# test for lrint in math.h
check_exec <<EOF && lrint=yes || lrint=no
#define _ISOC9X_SOURCE  1
#include <math.h>
int main( void ) { return (lrint(3.999f) > 0)?0:1; }
EOF

# test for lrintf in math.h
check_exec <<EOF && lrintf=yes || lrintf=no
#define _ISOC9X_SOURCE  1
#include <math.h>
int main( void ) { return (lrintf(3.999f) > 0)?0:1; }
EOF

#test for round()
check_exec <<EOF && round=yes || round=no
#define _ISOC9X_SOURCE  1
#include <math.h>
int main( void ) { return (round(3.999f) > 0)?0:1; }
EOF

# test for sizeof(int)
for sizeof in 1 2 4 8 16; do
    check_cc <<EOF && _sizeof_int=$sizeof && break
void foo(){switch (0) case 0: case (sizeof(int) == $sizeof):;}
EOF
done

# test for sizeof(long)
for sizeof in 1 2 4 8 16; do
  check_cc <<EOF && _sizeof_long=$sizeof && break
void foo(){switch (0) case 0: case (sizeof(long) == $sizeof):;}
EOF
done

_restrict=
for restrict_keyword in restrict __restrict__ __restrict; do
    check_cc <<EOF && _restrict=$restrict_keyword && break
void foo(char * $restrict_keyword p);
EOF
done

# dlopen/dlfcn.h probing

check_header dlfcn.h

if check_func dlopen; then
    ldl=
elif check_func dlopen -ldl; then
    ldl=-ldl
fi

if test "$vhook" = "default"; then
    vhook="$dlopen"
fi

if enabled_any vhook liba52bin libfaadbin; then
    add_extralibs $ldl
fi

if enabled vhook; then
    check_ldflags -rdynamic
    check_ldflags -export-dynamic
fi

##########################################
# imlib check 

temp_extralibs -lImlib2
check_ld <<EOF && imlib2=yes || imlib2=no
#include <X11/Xlib.h>
#include <Imlib2.h>
int main( void ) { return (int) imlib_load_font("foo"); }
EOF
restore_flags

if enabled audio_beos; then
    add_extralibs "-lmedia -lbe"
fi

##########################################
# FreeType check

freetype2=no
if test "x$targetos" != "xBeOS"; then
  if (freetype-config --version) >/dev/null 2>&1 ; then
      temp_cflags `freetype-config --cflags`
      temp_extralibs `freetype-config --libs`
      check_ld <<EOF && freetype2=yes
#include <ft2build.h>
int main( void ) { return (int) FT_Init_FreeType(0); }
EOF
      restore_flags
  fi
fi

##########################################
# SDL check

sdl_too_old=no
sdl=no
#SDL_CONFIG="${cross_prefix}sdl-config"
#if ("${SDL_CONFIG}" --version) >/dev/null 2>&1 ; then
#    temp_cflags `"${SDL_CONFIG}" --cflags`
#    temp_extralibs `"${SDL_CONFIG}" --libs`
#    check_ld <<EOF
##include <SDL.h>
##undef main /* We don't want SDL to override our main() */
#int main( void ) { return SDL_Init (SDL_INIT_VIDEO); }
#EOF
#    if test $? = 0; then
#        _sdlversion=`"${SDL_CONFIG}" --version | sed 's/[^0-9]//g'`
#        if test "$_sdlversion" -lt 121 ; then
#            sdl_too_old=yes
#        else
#            sdl=yes
#            check_cc <<EOF && sdl_video_size=yes || sdl_video_size=no
##include <SDL.h>
#int main(void){
#    const SDL_VideoInfo *vi = SDL_GetVideoInfo();
#    int w = vi->current_w;
#    return 0;
#}
#EOF
#        fi
#    fi
#    restore_flags
#fi

enabled sdl || ffplay=no

##########################################
# texi2html check

texi2html=no
if (texi2html -version) >/dev/null 2>&1; then
texi2html=yes
fi

##########################################
# IPv6 check

enabled network && enabled ipv6 && check_ld <<EOF && ipv6=yes || ipv6=no
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
int main( void ) {
  struct sockaddr_storage saddr;
  struct ipv6_mreq mreq6;
  getaddrinfo(0,0,0,0);
  getnameinfo(0,0,0,0,0,0,0);
  IN6_IS_ADDR_MULTICAST((const struct in6_addr *)0);
}
EOF

##########################################
# OSS probe

if test x"$audio_oss" = x"default" -o x"$audio_oss" = x"yes" ; then

cat > $TMPC << EOF
#include <sys/ioctl.h>
#include <sys/soundcard.h>
int main(void) { return (int) EV_SEQ_LOCAL; }
EOF

   audio_oss=no
   if $cc -o $TMPE $TMPC > /dev/null 2>&1; then
      sys_soundcard_h=yes
      audio_oss=yes
   elif test "$targetos" = "OpenBSD" ; then
      soundcard_h=yes
      audio_oss=yes
   fi
fi

##########################################
# ALSA probe

if test x"$audio_alsa" = x"default" -o x"$audio_alsa" = x"yes" ; then

cat > $TMPC << EOF
#include <alsa/asoundlib.h>
int main(void) { return (int) SND_LIB_MAJOR; }
EOF

audio_alsa=no
audio_alsa_libs="-lasound"
if $cc -o $TMPE $TMPC $audio_alsa_libs > /dev/null 2>&1; then
audio_alsa=yes
fi

fi

##########################################
# aRts probe

if test x"$audio_arts" = x"default" -o x"$audio_arts" = x"yes" ; then

cat > $TMPC << EOF
#include <artsc.h>
int main(void) { return (int) ARTS_P_BUFFER_SIZE; }
EOF

audio_arts=no
if (artsc-config --version) > /dev/null 2>&1; then
    audio_arts_libs=`artsc-config --libs`
    audio_arts_tmp=`artsc-config --cflags`
    if $cc -o $TMPE $TMPC $audio_arts_tmp $audio_arts_libs > /dev/null 2>&1; then
        audio_arts_cflags=`echo $audio_arts_tmp`
        audio_arts=yes
    else
        audio_arts_cflags=`echo $audio_arts_tmp | sed "s/include\/artsc/include/g"`
        if $cc -o $TMPE $TMPC $audio_arts_cflags $audio_arts_libs > /dev/null 2>&1; then
            audio_arts=yes
        fi
    fi
fi

fi

##########################################
# JACK probe

if test x"$audio_jack" = x"default" -o x"$audio_jack" = x"yes" ; then

cat > $TMPC << EOF
#include <jack/jack.h>
int main(void) { return (int) JACK_MAX_FRAMES; }
EOF

audio_jack=no
audio_jack_libs="-ljack"
if $cc -o $TMPE $TMPC $audio_jack_libs > /dev/null 2>&1; then
audio_jack=yes
fi

fi

# check for ioctl_meteor.h, ioctl_bt848.h and alternatives
if enabled bktr; then
    check_header dev/bktr/ioctl_meteor.h
    check_header dev/bktr/ioctl_bt848.h

    check_header machine/ioctl_meteor.h
    check_header machine/ioctl_bt848.h

    check_header dev/video/meteor/ioctl_meteor.h
    check_header dev/video/bktr/ioctl_bt848.h

    check_header dev/ic/bt8xx.h
fi

# Deal with the x11 frame grabber
enabled x11grab                         &&
enabled gpl                             &&
enabled x11_grab_device_demuxer         &&
check_header X11/Xlib.h                 &&
check_header X11/extensions/XShm.h      &&
check_func XOpenDisplay -lX11           &&
check_func XShmCreateImage -lX11 -lXext &&
add_extralibs -lX11 -lXext              ||
disable x11_grab_device_demuxer

enabled debug && add_cflags -g

# add some useful compiler flags if supported
#check_cflags -Wdeclaration-after-statement
check_cflags -Wall
check_cflags -Wno-switch
check_cppflags -Wno-non-virtual-dtor

# GCC version
cat > $TMPC << EOF
int main(int argc, char **argv)
{
    int ret = 0;
    if (argc == 1)
    {
        #if defined(__GNUC__)
            ret = __GNUC__;
        #endif
    }
    else
    {
        #if defined(__GNUC_MINOR__)
            ret = __GNUC_MINOR__;
        #endif
    }

    return ret;
}
EOF

if $cc $CFLAGS $TMPC -o $TMPE ; then
    $TMPE
    GCC_MAJOR=$?
    $TMPE "minor"
    GCC_MINOR=$?
fi

if test x"$symbol_visibility" = x"yes"; then
    if test x"$GCC_MAJOR" = x"4" ; then
        check_cflags -fvisibility-inlines-hidden
        ECXXFLAGS="$ECXXFLAGS -fvisibility-inlines-hidden"
        CCONFIG="$CCONFIG use_hidesyms"
    else
        echo "Warning: --enable-symbol-visibility requires gcc 4.x"
    fi
fi

# not all compilers support -Os
#test "$optimize" = "small" && check_cflags -Os
# disabling -Os for now (2007-01-31) since it has build problems after ffmpeg sync [12645]
test "$optimize" = "small" && check_cflags -O2

if enabled optimize; then
    if test -n "`$cc -v 2>&1 | grep xlc`"; then
        CFLAGS="$CFLAGS -O5"
        LDFLAGS="$LDFLAGS -O5"
    else
        CFLAGS="-O3 $CFLAGS"
    fi
fi

# PIC flags for shared library objects where they are needed
if test "$lshared" = "yes" ; then
    # LIBOBJFLAGS may have already been set in the OS configuration
    if test -z "$LIBOBJFLAGS" ; then
        case "$cpu" in
            x86_64|ia64|alpha|sparc*) LIBOBJFLAGS="\$(PIC)" ;;
        esac
    fi
fi

if test "$gprof" = "yes" ; then
    CFLAGS="$CFLAGS -p"
    LDFLAGS="$LDFLAGS -p"
fi

VHOOKCFLAGS="-fPIC $CFLAGS"
test "$needmdynamicnopic" = yes && add_cflags -mdynamic-no-pic

# find if .align arg is power-of-two or not
if test $asmalign_pot = "unknown"; then
    asmalign_pot="no"
    echo 'asm (".align 3");' | check_cc && asmalign_pot="yes"
fi

if test x"$bindir" = x""; then
    bindir="${PREFIX}/bin"
fi

if test x"$libdir" = x""; then
    libdir="${PREFIX}/${libdir_name}"
fi

if test x"$shlibdir" = x""; then
    shlibdir="$libdir"
fi

if test x"$mandir" = x""; then
    mandir="${PREFIX}/man"
fi

if test x"$libdts" = x"yes"; then
    libdts="no"
    dtslib=""
    if has_library libdts_pic ; then
        dtslib="-ldts_pic"
    elif has_library libdts ; then
        dtslib="-ldts"
    else
        echo "Warning: DTS library not found."
    fi

    if test x"$dtslib" != x"" ; then
        if has_header dts.h ; then
            libdts="yes"
        else
            echo "Warning: DTS header not found."
        fi
    fi
fi

if test x"$dvb" = x"yes" ; then
    dvb="no"
    if test -f "$dvb_path"/linux/dvb/frontend.h ; then
        if test -f "$dvb_path"/../MAINTAINERS ; then
            echo "Warning: DVB location in kernel. May not compile."
        fi
        dvb="yes"
    else
        dvb_path="/usr/src/linux/include"
        KERNEL_RELEASE=`uname -r 2>/dev/null`
        if test x"$KERNEL_RELEASE" != x"" ; then
            dvb_path="/usr/src/linux-$KERNEL_RELEASE/include"
        fi

        if test -f "$dvb_path"/linux/dvb/frontend.h ; then
            if test -f "$dvb_path"/../MAINTAINERS ; then
                echo "Warning: DVB location in kernel. May not compile."
            fi
            dvb="yes"
        else
            echo "DVB location needs to have linux/dvb/frontend.h [$dvb_path]"
        fi
    fi
fi

lamemp3="no"
if has_library libmp3lame ; then
    if has_header lame/lame.h ; then
        lamemp3="yes"
    fi
fi

if test x"$lamemp3" = x"no" ; then
    echo "You must have the Lame MP3 encoding library installed to compile Myth."
    exit 255
fi

#test for lirc client libraries
if test x"$lirc" = x"yes" ; then
    lirc="no"
    if has_library liblirc_client ; then
        lirc="yes"
    fi
fi

#test for lirc client header
if test x"$lirc" = x"yes" ; then
   lirc="no"
cat > $TMPC << EOF
#include <lirc/lirc_client.h>
int main( void ) { return 0; }
EOF

    if $cc $CFLAGS $ARCHFLAGS -o $TMPE $TMPC 2> /dev/null ; then
        lirc="yes"
    fi
fi


if test x"$firewire_cable_box" = x"yes" ; then
    firewire_cable_box="no"
    libavc_5_3="no"
    if has_library libiec61883 -a \
       has_library libavc1394 -a \
       has_library librom1394; then
        if test x`which pkg-config 2>/dev/null` != x"" ; then
            if `pkg-config --atleast-version 0.5.0 libavc1394` ; then
                if `pkg-config --atleast-version 1.0.0 libiec61883` ; then
                    firewire_cable_box="yes"
                    if `pkg-config --atleast-version 0.5.3 libavc1394` ; then
                        libavc_5_3="yes"
                    fi
                fi
            fi
        fi
    fi
    if test x"$darwin" = x"yes" ; then
        # This should pick the newest. e.g. FireWireSDK21 instead of 20
        # Unfortunately, the location keeps changing:
        #/Developer/FireWireSDK20/Examples/AVCVideoServices/Framework
        #/Developer/FireWireSDK21/Examples/Framework
        mac_avc=`find /Developer/FireWireSDK* -name Framework 2> /dev/null \
                 | tail -n 1`
        if test -d "$mac_avc" ; then
            firewire_cable_box="yes"
        else
            echo Firewire being disabled. /Developer/FireWireSDK* missing
        fi
    fi
fi

if test x"$x11" = x"yes" ; then
    x11="no"
    if has_library libX11 ; then
        x11="yes"
    fi
fi
if test x"$x11" = x"no" ; then
    xrandr="no"
    xv="no"
    xvmc="no"
    xvmc_vld="no"
fi

if test x"$xrandr" = x"yes" ; then
    xrandr="no"
    if has_header X11/extensions/Xrandr.h ; then
        xrandr="yes"
    fi
fi

if test x"$xv" = x"yes" ; then
    xv="no"
    if has_library libXv ; then
        xv="yes"
    fi
fi

VENDOR_XVMC_LIBS=""
if test x"$xvmc" = x"yes"; then
    xvmc="no"
    if ! has_library libXvMCW ; then
        xvmcw="no"
    fi
    if test x"$xvmc_lib" != x""; then
        VENDOR_XVMC_LIBS="-l"$xvmc_lib
        xvmc="yes"
        xvmcw="no"
        if has_header X11/extensions/vldXvMC.h ; then
            echo > /dev/null
        else
            xvmc_vld="no"
        fi
    elif test x"$xvmcw" = x"yes" ; then
        CCONFIG="$CCONFIG using_xvmcw"
        VENDOR_XVMC_LIBS="-lXvMCW"
        xvmc="yes"
        if has_header X11/extensions/vldXvMC.h ; then
            echo > /dev/null
        else
            xvmc_vld="no"
        fi
    elif has_library libXvMCNVIDIA ; then
        VENDOR_XVMC_LIBS="-lXvMCNVIDIA"
        xvmc="yes"
        if test x"$xvmc_vld" = x"yes"; then
            xvmc_vld="no"
        fi
    elif test x"$xvmc_pro" = x"yes"; then
        if has_library libviaXvMCPro ; then
            VENDOR_XVMC_LIBS="-lviaXvMCPro"
            xvmc="yes"
            xvmc_vld="yes"
        fi
    elif has_library libviaXvMC ; then
        VENDOR_XVMC_LIBS="-lviaXvMC"
        xvmc="yes"
    elif has_library libI810XvMC ; then
        VENDOR_XVMC_LIBS="-lI810XvMC"
        xvmc="yes"
        if test x"$xvmc_vld" = x"yes"; then
            xvmc_vld="no"
        fi
    fi
else
    xvmc_vld="no"
fi

if test x"$VENDOR_XVMC_LIBS" != x"-lXvMCNVIDIA" ; then
    xvmc_opengl="no"
fi

if ! has_library libGL ; then
    xvmc_opengl="no"
    opengl_vsync="no"
fi

if test x"$opengl_vsync" = x"yes" ; then
    opengl="yes"
fi

if test x"$xvmc_opengl" = x"yes" ; then
    opengl="yes"
fi

if test x"$dvdv" = x"yes" ; then
    # Can only do Mac accel on Mac platform
    if test $targetos != Darwin; then
        dvdv="no"
    fi
fi

# CoreVideo in only available on Mac OS 10.4, or on 10.3 with QuickTime 7.
# This checks for it, and some other calls that the module needs
if test $targetos = Darwin; then
    cat > $TMPC << EOF
#include <QuartzCore/CVDisplayLink.h>
#include <AGL/agl.h>
int main( void ) { return aglGetCGLContext(0,0L); }
EOF
    if $cc -o $TMPE $TMPC -framework AGL > /dev/null 2>&1; then
        mac_corevideo="yes"
    fi
fi

# Ubuntu Dapper installs NVIDIA GL headers to a weird location in order
# not to overwrite the headers installed from Mesa, etc. We need to
# add that path to include paths if that's the case. 
if test -d /usr/share/doc/nvidia-glx-dev/include; then 
    CONFIG_INCLUDEPATH="$CONFIG_INCLUDEPATH /usr/share/doc/nvidia-glx-dev/include"
fi

# Same for Debian Sid.
if test -d /usr/share/nvidia/include/GL; then 
    CONFIG_INCLUDEPATH="$CONFIG_INCLUDEPATH /usr/share/nvidia/include"
fi

if test x"$direct_fb" = x"yes" ; then
    direct_fb="no"
    if test x`which directfb-config 2> /dev/null` != x"" ; then
        direct_fb="yes"
        CONFIG_DIRECTFB_LIBS=`directfb-config --libs`
        CONFIG_DIRECTFB_CXXFLAGS=`directfb-config --cflags`
    fi
fi

lmsensors="no"
if has_header "sensors/sensors.h" && has_library libsensors ; then
    lmsensors="yes"
fi

if test x"$darwin" = x"yes" ; then
    # So far, only OS X 10.4 has this as a non-private framework
    if test -d /System/Library/Frameworks/DiskArbitration.framework/Headers ; then
        darwin_da="yes"
    fi
fi


echo "# Basic Settings"
echo "Compile type     $compile_type"
if test x"$compile_type" = x"debug" -a $cpu = "x86" -a \
        x"$GCC_MAJOR" != x"" -a $GCC_MAJOR -lt "4"; then
    echo "WARNING: backtraces involving libavcodec are not supported for gcc < 4.0"
fi
echo "Compiler cache   $ccache"
echo "DistCC           $distcc"
echo "Install prefix   $PREFIX"
#echo "Source path      $source_path"
#echo "C compiler       $cc"
#echo "make             $make"
if test x"$processor" != x"" ; then
    echo "CPU              $cpu ($processor)"
elif test x"$cpu_raw" != x"" ; then
    echo "CPU              $cpu ($cpu_raw)"
else
    echo "CPU              $cpu"
fi
#if test "$BUILDSUF" != ""; then
#    echo "Build suffix     $BUILDSUF"
#fi
echo "big-endian       $bigendian"
if test $cpu = "x86" -o $cpu = "x86_32" -o $cpu = "x86_64"; then
    echo "MMX enabled      $mmx"
    #echo "CMOV enabled     $cmov"
    #echo "CMOV is fast     $cmov_is_fast"
fi
if test $cpu = "armv4l"; then
    echo "ARMv5TE enabled           $armv5te"
    echo "IWMMXT enabled            $iwmmxt"
fi
if test $cpu = "mips"; then
    echo "MMI enabled               $mmi"
fi
if test $cpu = "powerpc"; then
    echo "AltiVec enabled           $altivec"
    echo "dcbzl available           $dcbzl"
fi
#echo "gprof enabled             $gprof"
#echo "debug symbols             $debug"
#echo "strip symbols             $dostrip"
#echo "optimize                  $optimize"
#echo "static                    $lstatic"
#echo "shared                    $lshared"
#echo "postprocessing support    $pp"
#echo "software scaler enabled   $swscaler"
#echo "video hooking             $vhook"
#if test "$vhook" = "yes" ; then
#    echo "Imlib2 support            $imlib2"
#    echo "FreeType support          $freetype2"
#fi
#echo "network support           $network"
#if test "$network" = "yes" ; then
#    echo "IPv6 support              $ipv6"
#fi
#echo "threading support         $thread_type"
#echo "SDL support               $sdl"
#if test $sdl_too_old = "yes"; then
#    echo "-> Your SDL version is too old - please upgrade to have FFplay/SDL support."
#fi
#echo "Sun medialib support      $mlib"
#echo "AVISynth enabled          $avisynth"
#echo "liba52 support            $liba52"
#echo "liba52 dlopened           $liba52bin"
#echo "libdts support            $libdts"
#echo "libfaac enabled           $libfaac"
#echo "libfaad enabled           $libfaad"
#echo "faadbin enabled           $libfaadbin"
#echo "libgsm enabled            $libgsm"
#echo "libmp3lame enabled        $libmp3lame"
#echo "libnut enabled            $libnut"
#echo "libogg enabled            $libogg"
#echo "libvorbis enabled         $libvorbis"
#echo "x264 enabled              $x264"
#echo "XviD enabled              $xvid"
#echo "zlib enabled              $zlib"
#echo "AMR-NB float support      $amr_nb"
#echo "AMR-NB fixed support      $amr_nb_fixed"
#echo "AMR-WB float support      $amr_wb"
#echo "AMR-WB IF2 support        $amr_if2"
#if test "$gpl" = "no" ; then
#    echo "License: LGPL"
#else
#    echo "License: GPL"
#fi

echo
if test x"$frontend" = x"yes" ; then
  echo "# Input Support"
  echo "Joystick menu    $joystick_menu"
  echo "lirc support     $lirc"
  echo "Apple Remote     $appleremote"
fi

if test x"$backend" = x"yes" ; then
  echo "Video4Linux sup. $video4linux"
  echo "ivtv support     $ivtv"
  echo "FireWire support $firewire_cable_box"
  echo "DVB support      $dvb [$dvb_path]"
  echo "DBox2 support    $dbox2_dvb_box"
  echo "HDHomeRun sup.   $hdhomerun_box"
  echo "IPTV support     $iptv"
fi

if test x"$frontend" = x"yes" ; then
  echo
  echo "# Sound Output Support"
  echo "OSS support      $audio_oss"
  echo "ALSA support     $audio_alsa"
  echo "aRts support     $audio_arts"
  echo "JACK support     $audio_jack"
  echo "DTS passthrough  $libdts"
  echo
  echo "# Video Output Support"
  echo "x11 support      $x11"
  echo "xrandr support   $xrandr"
  echo "xv support       $xv"
  echo "XvMC support     $xvmc"
  echo "XvMC VLD support $xvmc_vld"
  echo "XvMC pro support $xvmc_pro"
  echo "XvMC OpenGL sup. $xvmc_opengl"
if test "$VENDOR_XVMC_LIBS" != "" ; then
  echo "XvMC libs        $VENDOR_XVMC_LIBS"
fi
  echo "Mac acceleration $dvdv"
  echo "OpenGL vsync     $opengl_vsync"
  echo "DirectFB         $direct_fb"
  if test x"$mingw32" = x"yes" -o x"$targetos" = x"CYGWIN" ; then
    echo "DirectX          $direct_x"
  fi
  echo
fi

echo "# Misc Features"
echo "Frontend         $frontend"
echo "Backend          $backend"
echo

echo "# Bindings"
printf "%-16.16s %s\n" "bindings_perl" "${bindings_perl}"

MYTH_CONFIG_H=libs/libmyth/mythconfig.h
MYTH_CONFIG_MAK=libs/libmyth/mythconfig.mak
echo "Creating $MYTH_CONFIG_H and $MYTH_CONFIG_MAK"

date >> config.log
echo "   $0$FFMPEG_CONFIGURATION" >> config.log
echo "# Automatically generated by configure - do not modify" > $MYTH_CONFIG_MAK
echo "/* Automatically generated by configure - do not modify */" > $TMPH
echo "#define FFMPEG_CONFIGURATION "'"'"$FFMPEG_CONFIGURATION"'"' >> $TMPH

echo "PREFIX=$PREFIX" >> $MYTH_CONFIG_MAK
echo "LIBDIR=$libdir" >> $MYTH_CONFIG_MAK
#echo "shlibdir=$shlibdir" >> $MYTH_CONFIG_MAK
#echo "bindir=$bindir" >> $MYTH_CONFIG_MAK
#echo "mandir=$mandir" >> $MYTH_CONFIG_MAK
#echo "MAKE=$make" >> $MYTH_CONFIG_MAK
echo "QMAKE_CC=$cc" >> $MYTH_CONFIG_MAK
echo "QMAKE_CXX=$cxx" >> $MYTH_CONFIG_MAK
echo "QMAKE_LINK=$cxx" >> $MYTH_CONFIG_MAK
#echo "AR=$ar" >> $MYTH_CONFIG_MAK
#echo "RANLIB=$ranlib" >> $MYTH_CONFIG_MAK
#if test "$dostrip" = "yes" ; then
#    echo "STRIP=$strip" >> $MYTH_CONFIG_MAK
#    echo "INSTALLSTRIP=-s" >> $MYTH_CONFIG_MAK
#else
#    echo "STRIP=echo ignoring strip" >> $MYTH_CONFIG_MAK
#    echo "INSTALLSTRIP=" >> $MYTH_CONFIG_MAK
#fi

## SHCFLAGS is a copy of CFLAGS without -mdynamic-no-pic.  Used when building
## shared modules on OS/X (vhook/Makefile).
#SHCFLAGS=$CFLAGS
#test "$needmdynamicnopic" = yes && add_cflags -mdynamic-no-pic

echo "ARCHFLAGS=$ARCHFLAGS" >> $MYTH_CONFIG_MAK
echo "PROFILEFLAGS=$PROFILEFLAGS" >> $MYTH_CONFIG_MAK
echo "OPTFLAGS=$CFLAGS" >> $MYTH_CONFIG_MAK
echo "ECFLAGS=$ECFLAGS" >> $MYTH_CONFIG_MAK
echo "ECXXFLAGS=$ECXXFLAGS" >> $MYTH_CONFIG_MAK
#echo "SHCFLAGS=$SHCFLAGS">>$MYTH_CONFIG_MAK
#echo "LDFLAGS=$LDFLAGS" >> $MYTH_CONFIG_MAK
#echo "FFSERVERLDFLAGS=$FFSERVERLDFLAGS" >> $MYTH_CONFIG_MAK
#echo "SHFLAGS=$SHFLAGS" >> $MYTH_CONFIG_MAK
#echo "VHOOKFLAGS=$VHOOKFLAGS" >> $MYTH_CONFIG_MAK
#echo "LIBOBJFLAGS=$LIBOBJFLAGS" >> config.mak
#echo "BUILD_STATIC=$lstatic" >> config.mak
#echo "BUILDSUF=$BUILDSUF" >> $MYTH_CONFIG_MAK
#echo "LIBPREF=$LIBPREF" >> $MYTH_CONFIG_MAK
#echo "LIBSUF=\${BUILDSUF}$LIBSUF" >> $MYTH_CONFIG_MAK
#if test "$lstatic" = "yes" ; then
#  echo "LIB=$LIB" >> config.mak
#else # Some Make complain if this variable does not exist.
#  echo "LIB=" >> config.mak
#fi
#echo "SLIBPREF=$SLIBPREF" >> $MYTH_CONFIG_MAK
#echo "SLIBSUF=\${BUILDSUF}$SLIBSUF" >> $MYTH_CONFIG_MAK
#echo "EXESUF=\${BUILDSUF}$EXESUF" >> $MYTH_CONFIG_MAK
echo "TARGET_OS=$targetos" >> $MYTH_CONFIG_MAK

ucarch=`toupper $cpu`
echo "TARGET_ARCH_${ucarch}=yes" >> $MYTH_CONFIG_MAK
echo "#define ARCH_${ucarch} 1" >> $TMPH

# special cases
case "$cpu" in
    x86)
        echo "TARGET_ARCH_X86_32=yes" >> $MYTH_CONFIG_MAK
        echo "#define ARCH_X86_32 1" >> $TMPH
        ;;
    x86_32|x86_64)
        echo "TARGET_ARCH_X86=yes" >> $MYTH_CONFIG_MAK
        echo "#define ARCH_X86 1" >> $TMPH
        ;;
    powerpc)
        if test "$POWERPCMODE" = "64bits"; then
            echo "#define POWERPC_MODE_64BITS 1" >> $TMPH
        fi
        if test "$powerpc_perf" = "yes"; then
            echo "#define POWERPC_PERFORMANCE_REPORT 1" >> $TMPH
        fi
        ;;
    sparc64)
        echo "TARGET_ARCH_SPARC=yes" >> $MYTH_CONFIG_MAK
        echo "#define ARCH_SPARC 1" >> $TMPH
        ;;
esac

if test "$bigendian" = "yes" ; then
  echo "WORDS_BIGENDIAN=yes" >> $MYTH_CONFIG_MAK
  echo "#define WORDS_BIGENDIAN 1" >> $TMPH
fi
if test "$mmx" = "yes" ; then
  echo "TARGET_MMX=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_MMX 1" >> $TMPH
  echo "#define __CPU__ 586" >> $TMPH
fi
if test "$cmov" = "yes" ; then
  echo "TARGET_CMOV=yes" >> config.mak
  echo "#define HAVE_CMOV 1" >> $TMPH
fi
if test "$cmov_is_fast" = "yes" ; then
  echo "TARGET_CMOV_IS_FAST=yes" >> config.mak
  echo "#define CMOV_IS_FAST 1" >> $TMPH
fi
if test "$cpuclipspositive" = "yes"; then
  echo "#define CPU_CLIPS_POSITIVE 1" >> $TMPH
else
  echo "#define CPU_CLIPS_POSITIVE 0" >> $TMPH
fi
if test "$cpuclipsnegative" = "yes"; then
  echo "#define CPU_CLIPS_NEGATIVE 1" >> $TMPH
else
  echo "#define CPU_CLIPS_NEGATIVE 0" >> $TMPH
fi
if test "$iwmmxt" = "yes" ; then
  echo "TARGET_IWMMXT=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_IWMMXT 1" >> $TMPH
fi
if test "$mmi" = "yes" ; then
  echo "TARGET_MMI=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_MMI 1" >> $TMPH
fi
if test "$altivec" = "yes" ; then
  echo "TARGET_ALTIVEC=yes" >> $MYTH_CONFIG_MAK
  echo "#define HAVE_ALTIVEC 1" >> $TMPH
fi
if test "$freetype2" = "yes" ; then
  echo "HAVE_FREETYPE2=yes" >> $MYTH_CONFIG_MAK
  echo "FREETYPE_CFLAGS=`freetype-config --cflags`" >> $MYTH_CONFIG_MAK
  echo "FREETYPE_LIBS=`freetype-config --libs`" >> $MYTH_CONFIG_MAK
fi
if test "$lmsensors" = "yes" ; then
  CCONFIG="$CCONFIG using_lmsensors"
  echo "#define HAVE_LMSENSORS 1" >> $TMPH
fi
if test "$sdl" = "yes" ; then
  echo "CONFIG_SDL=yes" >> $MYTH_CONFIG_MAK
  echo "SDL_LIBS=`"${SDL_CONFIG}" --libs`" >> $MYTH_CONFIG_MAK
  echo "SDL_CFLAGS=`"${SDL_CONFIG}" --cflags`" >> $MYTH_CONFIG_MAK
fi
if test "$texi2html" = "yes"; then
  echo "BUILD_DOC=yes" >> $MYTH_CONFIG_MAK
fi
echo "#define SIZEOF_INT $_sizeof_int" >> $TMPH
echo "#define SIZEOF_LONG $_sizeof_long" >> $TMPH
if test "$lshared" = "yes" ; then
  echo "BUILD_SHARED=yes" >> $MYTH_CONFIG_MAK
  echo "PIC=-fPIC -DPIC" >> $MYTH_CONFIG_MAK
fi
if test x"$libdts" = x"yes" ; then
  echo "#define CONFIG_DTS 1" >> $TMPH
  echo "CONFIG_DTS=yes" >> $MYTH_CONFIG_MAK
  echo "CONFIG_DTSLIB=$dtslib" >>  $MYTH_CONFIG_MAK
fi
if test x"$pthreads" = x"yes" ; then
  CCONFIG="$CCONFIG using_ffmpeg_threads"
  echo "#define HAVE_THREADS 1" >> $TMPH
  echo "HAVE_PTHREADS=yes" >> $MYTH_CONFIG_MAK
  if test $targetos != FreeBSD -a $targetos != OpenBSD ; then
     extralibs="$extralibs -lpthread"
  fi
fi
echo "" >>$MYTH_CONFIG_MAK

enabled_any $ENCODER_LIST && enable encoders
enabled_any $DECODER_LIST && enable decoders
enabled_any $MUXER_LIST   && enable muxers
enabled_any $DEMUXER_LIST && enable demuxers

enabled_any pthreads beosthreads os2threads w32threads && enable threads

check_deps $CONFIG_LIST $HAVE_LIST $DECODER_LIST $ENCODER_LIST $PARSER_LIST \
    $DEMUXER_LIST $MUXER_LIST

print_config HAVE_   $TMPH $MYTH_CONFIG_MAK $HAVE_LIST
print_config CONFIG_ $TMPH $MYTH_CONFIG_MAK $CONFIG_LIST

if test x"$video4linux" = x"yes" ; then
  CCONFIG="$CCONFIG using_v4l"
fi

if test "$audio_oss" = "yes" ; then
    CCONFIG="$CCONFIG using_oss"
  echo "#define CONFIG_AUDIO_OSS 1" >> $TMPH
fi

if test "$audio_alsa" = "yes" ; then
    CCONFIG="$CCONFIG using_alsa"
  echo "#define CONFIG_AUDIO_ALSA 1" >> $TMPH
  echo "CONFIG_AUDIO_ALSA_LIBS=$audio_alsa_libs" >> $MYTH_CONFIG_MAK
fi

if test "$audio_arts" = "yes" ; then
    CCONFIG="$CCONFIG using_arts"
  echo "#define CONFIG_AUDIO_ARTS 1" >> $TMPH
  echo "CONFIG_AUDIO_ARTS_LIBS=$audio_arts_libs" >> $MYTH_CONFIG_MAK
  echo "CONFIG_AUDIO_ARTS_CFLAGS=$audio_arts_cflags" >> $MYTH_CONFIG_MAK
fi

if test "$audio_jack" = "yes" ; then
    CCONFIG="$CCONFIG using_jack"
  echo "#define CONFIG_AUDIO_JACK 1" >> $TMPH
  echo "CONFIG_AUDIO_JACK_LIBS=$audio_jack_libs" >> $MYTH_CONFIG_MAK
fi

if test "$dvdv" = "yes" ; then
  CCONFIG="$CCONFIG using_dvdv"
fi

if test "$mac_bundle" = "yes"; then
  CCONFIG="$CCONFIG mac_bundle"
fi

if test "$mac_corevideo" = "yes"; then
  CCONFIG="$CCONFIG using_corevideo"
fi

if test x"$targetos" = x"CYGWIN" ; then
  echo "#define CONFIG_CYGWIN 1" >> $TMPH
  echo "#ifndef llrint" >> $TMPH
  echo "#define llrint llrint  // make sure not to define twice" >> $TMPH
  echo "static inline long long int llrint (double x)" >> $TMPH
  echo "{" >> $TMPH
  echo "    long long int llrintres;" >> $TMPH
  echo "    asm" >> $TMPH
  echo "    (\"fistpll %0\"" >> $TMPH
  echo "    : \"=m\" (llrintres) : \"t\" (x) : \"st\");" >> $TMPH
  echo "    return llrintres;" >> $TMPH
  echo "}" >> $TMPH
  echo "#endif" >> $TMPH
fi

if test "$darwin_da" = "yes"; then
  CCONFIG="$CCONFIG darwin_da"
fi

echo "#define restrict $_restrict" >> $TMPH

if test "$optimize" = "small"; then
  echo "#define always_inline"  >> $TMPH
  echo "#define CONFIG_SMALL 1" >> $TMPH
fi

if test "$amr_if2" = "yes" ; then
  echo "AMR_CFLAGS=-DIF2=1" >> $MYTH_CONFIG_MAK
fi
 
# Apparently it's not possible to portably echo a backslash.
if test "$asmalign_pot" = "yes" ; then
  printf '#define ASMALIGN(ZEROBITS) ".align " #ZEROBITS "\\n\\t"\n' >> $TMPH
else
  printf '#define ASMALIGN(ZEROBITS) ".align 1<<" #ZEROBITS "\\n\\t"\n' >> $TMPH
fi

for codec in $DECODER_LIST $ENCODER_LIST $PARSER_LIST $DEMUXER_LIST $MUXER_LIST; do
    ucname="`toupper $codec`"
    config_name="CONFIG_$ucname"
    enabled_name="ENABLE_$ucname"
    if enabled $codec; then
        echo "#define $config_name 1" >> $TMPH
        echo "#define $enabled_name 1" >> $TMPH
        echo "$config_name=yes" >> $MYTH_CONFIG_MAK
    else
        echo "#define $enabled_name 0" >> $TMPH
    fi
done

# build tree in object directory if source path is different from current one
if test "$source_path_used" = "yes" ; then
    DIRS="libavformat libavcodec libavcodec/alpha libavcodec/armv4l libavcodec/i386 \
          libavcodec/ppc libavcodec/liba52 libavcodec/mlib libavcodec/libpostproc tests vhook"
    FILES="Makefile libavformat/Makefile libavcodec/Makefile libavcodec/libpostproc/Makefile tests/Makefile vhook/Makefile"
    for dir in $DIRS ; do
            mkdir -p $dir
    done
    for f in $FILES ; do
        ln -sf "$source_path/$f" $f
    done
fi
echo "SRC_PATH='$source_path'" >> $MYTH_CONFIG_MAK

if test x"$frontend" = x"no" ; then
    echo
    echo "WARNING: --disable-frontend is only intended to aid porting."
    echo "WARNING: THIS WILL BREAK THINGS. You are on your own now."
fi

if test x"$backend" = x"no" ; then
    echo
    echo "WARNING: --disable-backend is only intended to aid porting."
    echo "WARNING: You are on your own now."
    ivtv="no"
    dbox2_dvb_box="no"
    hdhomerun_box="no"
    iptv="no"
    dvb="no"
fi

if test x"$proc_opt" = x"yes"; then
    echo
    echo "WARNING: When using --enable-proc-opt you must include the "
    echo "         output of ./configure along with any bug report."
fi

if test x"$proc_opt" = x"no" -a x"$dvb" = x"yes" ; then
    echo
    echo "WARNING: If you plan to watch HDTV recordings you probably"
    echo "         need to run ./configure with --enable-proc-opt   "
fi

echo # add a newline after any warnings.

if test x"$mmx" = x"yes"; then
  CONFIG_DEFINES="$CONFIG_DEFINES MMX"
  if test x"$cpu" != x"x86_64" ; then
    CONFIG_DEFINES="$CONFIG_DEFINES i386"
  fi
fi

if test x"$ivtv" = x"yes" ; then
  CCONFIG="$CCONFIG using_ivtv"
fi

if test x"$firewire_cable_box" = x"yes" ; then
  CCONFIG="$CCONFIG using_firewire"
  if test x"$darwin" = x"yes" ; then
      echo "CONFIG_MAC_AVC=$mac_avc" >>  $MYTH_CONFIG_MAK
  else
      echo "CONFIG_FIREWIRE_LIBS=-lraw1394 -liec61883 -lavc1394 -lrom1394" >>  $MYTH_CONFIG_MAK
      if test x"$libavc_5_3" = x"yes" ; then
          CCONFIG="$CCONFIG using_libavc_5_3"
      fi
  fi
fi

if test x"$dbox2_dvb_box" = x"yes" ; then
  CCONFIG="$CCONFIG using_dbox2"
fi

if test x"$hdhomerun_box" = x"yes" ; then
  CCONFIG="$CCONFIG using_hdhr"
fi

if test x"$iptv" = x"yes" ; then
    CCONFIG="$CCONFIG using_iptv using_live"
fi

if test x"$lirc" = x"yes" ; then
  CCONFIG="$CCONFIG using_lirc"
  echo "CONFIG_LIRC_LIBS=-llirc_client" >> $MYTH_CONFIG_MAK
fi

if test x"$appleremote" = x"yes" ; then
  CCONFIG="$CCONFIG using_appleremote"
  CONFIG_DEFINES="$CONFIG_DEFINES USING_APPLEREMOTE"
fi

if test "$joystick_menu" = "yes" ; then
  CCONFIG="$CCONFIG using_joystick_menu"
fi

if test x"$dvb" = x"yes" ; then
  CCONFIG="$CCONFIG using_dvb"
  CONFIG_INCLUDEPATH="$CONFIG_INCLUDEPATH $dvb_path"
fi

if test x"$x11" = x"yes" ; then
  CCONFIG="$CCONFIG using_x11"
  if [ -d $x11_include_path ] ; then
    CONFIG_INCLUDEPATH="$CONFIG_INCLUDEPATH $x11_include_path"
  fi
fi

if test x"$xv" = x"yes" ; then
  CCONFIG="$CCONFIG using_xv"
  echo "CONFIG_XV_LIBS=-lXinerama -lXv -lX11 -lXext -lXxf86vm" >> $MYTH_CONFIG_MAK
fi

if test x"$xrandr" = x"yes" ; then
  CCONFIG="$CCONFIG using_xrandr"
  echo "CONFIG_XRANDR_LIBS=-lXrandr" >> $MYTH_CONFIG_MAK
fi

if test x"$xvmc" = x"yes" ; then
  CCONFIG="$CCONFIG using_xvmc"
fi

if test x"$xvmc_vld" = x"yes" ; then
  CCONFIG="$CCONFIG using_xvmc_vld"
fi

if test x"$xvmc_opengl" = x"yes" ; then
  CCONFIG="$CCONFIG using_xvmc_opengl"
fi

if test x"$VENDOR_XVMC_LIBS" != x"" ; then
  echo "CONFIG_XVMC_LIBS=$VENDOR_XVMC_LIBS -lXvMC" >> $MYTH_CONFIG_MAK
  if test x"$VENDOR_XVMC_LIBS" = x"-lXvMCNVIDIA" ; then
      CCONFIG="$CCONFIG using_xvmc_pbuffer"
  fi
fi

if test x"$direct_fb" = x"yes" ; then
  CCONFIG="$CCONFIG using_directfb"
  echo "CONFIG_DIRECTFB_LIBS=$CONFIG_DIRECTFB_LIBS" >> $MYTH_CONFIG_MAK
  echo "CONFIG_DIRECTFB_CXXFLAGS=$CONFIG_DIRECTFB_CXXFLAGS" >> $MYTH_CONFIG_MAK
fi

if test x"$direct_x" = x"yes" ; then
  CCONFIG="$CCONFIG using_directx"
  CONFIG_DEFINES="$CONFIG_DEFINES USING_DIRECTX"
fi

if test x"$opengl_vsync" = x"yes" ; then
  CCONFIG="$CCONFIG using_opengl_vsync"
fi

if test x"$opengl" = x"yes" ; then
  CCONFIG="$CCONFIG using_opengl"
  echo "CONFIG_OPENGL_LIBS=-lGL -lGLU" >> $MYTH_CONFIG_MAK
fi

if test x"$valgrind" = x"yes" ; then
  CCONFIG="$CCONFIG using_valgrind"
fi

if test x"$frontend" = x"yes" ; then
  CCONFIG="$CCONFIG using_frontend"
fi

if test x"$backend" = x"yes" ; then
  CCONFIG="$CCONFIG using_backend"
fi

if test x"${bindings_perl}" = x"yes"; then
  CCONFIG="$CCONFIG using_bindings_perl"
fi

if test x"$CCONFIG" != x"" ; then
  echo "CCONFIG=$CCONFIG" >> $MYTH_CONFIG_MAK
  echo "#define MYTH_BUILD_CONFIG \"$CCONFIG\"" >>$TMPH
fi

if test x"$CONFIG_DEFINES" != x"" ; then
  echo "CONFIG_DEFINES=$CONFIG_DEFINES" >> $MYTH_CONFIG_MAK
fi

if test x"$CONFIG_INCLUDEPATH" != x"" ; then
  echo "CONFIG_INCLUDEPATH=$CONFIG_INCLUDEPATH" >> $MYTH_CONFIG_MAK
fi

if test x"$GCC_MAJOR" != x"" ; then
  echo "GCC_MAJOR=$GCC_MAJOR" >> $MYTH_CONFIG_MAK
fi

if test x"$GCC_MINOR" != x"" ; then
  echo "GCC_MINOR=$GCC_MINOR" >> $MYTH_CONFIG_MAK
fi

diff $TMPH $MYTH_CONFIG_H >/dev/null 2>&1
if test $? -ne 0 ; then
  mv -f $TMPH $MYTH_CONFIG_H
  rm -f config.h
else
  echo "$MYTH_CONFIG_H is unchanged"
fi

if ! test -L config.h ; then
  ln -s $MYTH_CONFIG_H config.h
fi

if [ ! -e config.h ] ; then
  ln -s $MYTH_CONFIG_H config.h
fi

rm -f config.mak
ln -s $MYTH_CONFIG_MAK config.mak

# Create a special cleanup makefile that will allow make clean to work
if [ ! -e config ] ; then
  mkdir config
fi
cat - > config/Makefile <<END

all:	
qmake_all:
	\$(NONE)

clean:
	\$(NONE)

install:
uninstall:
	\$(NONE)

distclean: clean
	-rm -f ../$MYTH_CONFIG_MAK  ../config.mak 
	-rm -f ../$MYTH_CONFIG_H    ../config.h
	-rm -f ../Makefile          ../config.err

END

rm -f $TMPO $TMPC $TMPE $TMPS $TMPH

qmake mythtv.pro
