#!/bin/sh
#
# FFmpeg configure script
#
# Copyright (c) 2000, 2001, 2002 Fabrice Bellard
# Copyright (c) 2005-2006 Diego Biurrun
# Copyright (c) 2005-2006 Mans Rullgard
#

# make sure we are running under a compatible shell
# try to make this part work with most shells

try_exec(){
    echo "Trying shell $1"
    type "$1" >/dev/null 2>&1 && exec "$@"
}

unset foo
(: ${foo%%bar}) 2>/dev/null
E1="$?"

(: ${foo?}) 2>/dev/null
E2="$?"

if test "$E1" != 0 || test "$E2" = 0; then
    echo "Broken shell detected.  Trying alternatives."
    export FF_CONF_EXEC
    if test "0$FF_CONF_EXEC" -lt 1; then
        FF_CONF_EXEC=1
        try_exec bash "$0" "$@"
    fi
    if test "0$FF_CONF_EXEC" -lt 2; then
        FF_CONF_EXEC=2
        try_exec ksh "$0" "$@"
    fi
    if test "0$FF_CONF_EXEC" -lt 3; then
        FF_CONF_EXEC=3
        try_exec /usr/xpg4/bin/sh "$0" "$@"
    fi
    echo "No compatible shell script interpreter found."
    echo "This configure script requires a POSIX-compatible shell"
    echo "such as bash or ksh."
    echo "THIS IS NOT A BUG IN FFMPEG, DO NOT REPORT IT AS SUCH."
    echo "Instead, install a working POSIX-compatible shell."
    echo "Disabling this configure test will create a broken FFmpeg."
    if test "$BASH_VERSION" = '2.04.0(1)-release'; then
        echo "This bash version ($BASH_VERSION) is broken on your platform."
        echo "Upgrade to a later version if available."
    fi
    exit 1
fi

show_help(){
  echo "Usage: configure [options]"
  echo "Options: [defaults in brackets after descriptions]"
  echo
  echo "Standard options:"
  echo "  --help                   print this message"
  #echo "  --log[=FILE|yes|no]      log tests and output to FILE [config.err]"
  echo "  --previous               use previous configure parameters if possible"
  echo "  --compile-type=CTYPE     one of release, profile, debug [$compile_type]"
  echo "                           NOTE: profile is for sampling profilers"
  echo "  --prefix=PREFIX          install in PREFIX [$PREFIX]"
  echo "  --libdir-name=LIBNAME    search/install libraries in PREFIX/LIBNAME [$libdir_name]"
  echo "  --disable-ccache         disable compiler cache (ccache)"
  echo "  --disable-distcc         disable distributed compilation (distcc)"
  #echo "  --libdir=DIR             install libs in DIR [PREFIX/lib]"
  #echo "  --shlibdir=DIR           install shared libs in DIR [PREFIX/lib]"
  #echo "  --incdir=DIR             install includes in DIR [PREFIX/include/ffmpeg]"
  #echo "  --mandir=DIR             install man page in DIR [PREFIX/man]"
  #echo "  --enable-mingw32         enable MinGW native/cross Windows compile"
  #echo "  --enable-mingwce         enable MinGW native/cross WinCE compile"
  #echo "  --enable-static          build static libraries [default=yes]"
  #echo "  --disable-static         do not build static libraries [default=no]"
  #echo "  --enable-shared          build shared libraries [default=no]"
  #echo "  --disable-shared         do not build shared libraries [default=yes]"
  #echo "  --enable-pp              enable GPLed postprocessing support [default=no]"
  #echo "  --enable-swscaler        software scaler support [default=no]"
  #echo "  --enable-beosthreads     use BeOS threads [default=no]"
  #echo "  --enable-os2threads      use OS/2 threads [default=no]"
  #echo "  --enable-pthreads        use pthreads [default=no]"
  #echo "  --enable-w32threads      use Win32 threads [default=no]"
  #echo
  #echo "External library support:"
  #echo "  --enable-sunmlib         use Sun medialib [default=no]"
  #echo "  --enable-dc1394          enable IIDC-1394 grabbing using libdc1394"
  #echo "                           and libraw1394 [default=no]"
  #echo "  --enable-a52             enable GPLed liba52 support [default=no]"
  #echo "  --enable-a52bin          open liba52.so.0 at runtime [default=no]"
  #echo "  --enable-avisynth        allow reading AVISynth script files [default=no]"
  #echo "  --enable-libdts          enable GPLed libdts support [default=no]"
  #echo "  --enable-libfaac         enable FAAC support via libfaac [default=no]"
  #echo "  --enable-libfaad         enable FAAD support via libfaad [default=no]"
  #echo "  --enable-libfaadbin      build FAAD support with runtime linking [default=no]"
  #echo "  --enable-libgsm          enable GSM support via libgsm [default=no]"
  #echo "  --enable-libmp3lame      enable MP3 encoding via libmp3lame [default=no]"
  #echo "  --enable-libnut          enable NUT (de)muxing via libnut,"
  #echo "                           native demuxer exists [default=no]"
  #echo "  --enable-libogg          enable Ogg muxing via libogg [default=no]"
  #echo "  --enable-libtheora       enable Theora encoding via libtheora [default=no]"
  #echo "  --enable-libvorbis       enable Vorbis en/decoding via libvorbis,"
  #echo "                           native implementations exist [default=no]"
  #echo "  --enable-x264            enable H.264 encoding via x264 [default=no]"
  #echo "  --enable-xvid            enable Xvid encoding via xvidcore,"
  #echo "                           native MPEG-4/Xvid encoder exists [default=no]"
  #echo "  --enable-amr-nb          enable amr-nb floating point audio codec"
  #echo "  --enable-amr-nb-fixed    enable amr-nb fixed-point codec"
  #echo "  --enable-amr-wb          enable amr-wb floating point audio codec"
  echo ""
  echo "Advanced options (experts only):"
  #echo "  --source-path=PATH       path to source code [$source_path]"
  #echo "  --cross-prefix=PREFIX    use PREFIX for compilation tools [$cross_prefix]"
  #echo "  --cross-compile          assume a cross-compiler is used"
  #echo "  --target-os=OS           compiler targets OS [$targetos]"
  #echo "  --cc=CC                  use C compiler CC [$cc]"
  #echo "  --make=MAKE              use specified make [$make]"
  echo "  --extra-cflags=ECFLAGS   add ECFLAGS to CFLAGS [$CFLAGS]"
  echo "  --extra-ldflags=ELDFLAGS add ELDFLAGS to LDFLAGS [$LDFLAGS]"
  echo "  --enable-symbol-visibility  enables symbol visibility options"
  #echo "  --extra-libs=ELIBS       add ELIBS [$ELIBS]"
  #echo "  --build-suffix=SUFFIX    suffix for application specific build []"
  echo "  --arch=ARCH              select architecture  [$arch]"
  echo "  --tune=CPU               tune instruction usage for a particular CPU [$tune]"
  echo "  --cpu=CPU                selects the minimum cpu required (affects"
  echo "                           instruction selection, may crash on older CPUs)"
  #echo "  --enable-powerpc-perf    enable performance report on PPC"
  #echo "                           (requires enabling PMC)"
  echo "  --disable-mmx            disable MMX usage"
  #echo "  --disable-armv5te        disable armv5te usage"
  #echo "  --disable-armv6          disable armv6 usage"
  #echo "  --disable-iwmmxt         disable iwmmxt usage"
  #echo "  --disable-altivec        disable AltiVec usage"
  echo "Advanced features (experts only):"
  echo "  --disable-audio-oss      disable OSS audio support [default=no]"
  echo "  --disable-audio-alsa     disable ALSA audio support"
  echo "  --disable-audio-arts     disable aRts audio support"
  echo "  --disable-audio-jack     disable JACK audio support"
  echo "  --enable-valgrind        disables timeouts for valgrind memory debugging"
  # Don't print disable frontend/backend options, these
  # cause breakage and people use them inappropriately. -- dtk
  #echo "  --disable-frontend       disable frontend [breaks dependency checking, previews]"
  #echo "  --disable-backend        disable backend  [breaks dependency checking]"
  echo "  --disable-lirc           disable lirc support (Infrared Remotes)"
  echo "  --disable-joystick-menu  disable joystick menu"
  echo "  --disable-firewire       disable support for FireWire cable boxes"
  echo "  --disable-iptv           disable support for recording RTSP/UDP/RTP streams"
  echo "  --disable-dbox2          disable support for Nokia DBOX2 DVB boxes (or compatibles)"
  echo "  --disable-hdhomerun      disable support for HDHomeRun boxes"
  echo "  --disable-v4l            disable Video4Linux support"
  echo "  --disable-ivtv           disable ivtv support (PVR-x50) req. v4l support"
  echo "  --enable-dvb             enable DVB support (must supply header directory)"
  echo "  --dvb-path=HDRLOC        location of directory containing"
  echo "                           'linux/dvb/frontend.h', not the"
  echo "                           directory with frontend.h [$dvb_path]"
  echo "  --disable-x11            disable X11 support"
  echo "  --x11-path=X11LOC        location of X11 include files [$x11_include_path-path]"
  echo "  --disable-xrandr         disable X11 resolution switching"
  echo "  --disable-xv             disable XVideo   (X11 video output accel.)"
  echo "  --enable-xvmc            enable XvMC      (Linux/BSD MPEG accel.)"
  echo "  --enable-xvmc-pro        enable XvMC for the unichrome pro (NOT unichrome) chipset"
  echo "  --enable-xvmc-opengl     enable nVidia XvMC OpenGL texture method"
  echo "  --xvmc-lib=LIB           XvMC library override (for crosscompiling)"
  #echo "  --disable-xvmc-vld       disable XvMC-VLD (VIA Epia MPEG accel.)"
  echo "  --enable-mac-accel       enable Mac OS X MPEG acceleration"
  echo "  --enable-opengl-vsync    enable OpenGL vsync method"
  echo "  --enable-directfb        enable DirectFB  (Linux non-X11 video)"
  echo "  --enable-directx         enable DirectX   (Microsoft video)"
  echo ""
  echo "  --enable-mac-bundle      produce standalone OS X apps (e.g. mythfrontend.app)"
  echo ""
  echo "  --with-bindings=LIST     install the bindings specified in the"
  echo "                           comma-separated list"
  echo "                           Supported bindings: perl"
  #echo "  --disable-audio-beos     disable BeOS audio support [default=no]"
  #echo "  --disable-v4l            disable video4linux grabbing [default=no]"
  #echo "  --disable-v4l2           disable video4linux2 grabbing [default=no]"
  #echo "  --disable-bktr           disable bktr video grabbing [default=no]"
  #echo "  --disable-dv1394         disable DV1394 grabbing [default=no]"
  #echo "  --disable-network        disable network support [default=no]"
  #echo "  --disable-ipv6           disable ipv6 support [default=no]"
  #echo "  --disable-zlib           disable zlib [default=no]"
  #echo "  --disable-vhook          disable video hooking support"
  #echo "  --disable-debug          disable debugging symbols"
  #echo "  --disable-mpegaudio-hp   faster (but less accurate)"
  #echo "                           MPEG audio decoding [default=no]"
  #echo "  --disable-protocols      disable I/O protocols support [default=no]"
  #echo "  --disable-ffmpeg         disable ffmpeg build"
  #echo "  --disable-ffserver       disable ffserver build"
  #echo "  --disable-ffplay         disable ffplay build"
  #echo "  --enable-small           optimize for size instead of speed"
  #echo "  --enable-memalign-hack   emulate memalign, interferes with memory debuggers"
  #echo "  --disable-encoder=NAME   disables encoder NAME"
  #echo "  --enable-encoder=NAME    enables encoder NAME"
  #echo "  --disable-decoder=NAME   disables decoder NAME"
  #echo "  --enable-decoder=NAME    enables decoder NAME"
  #echo "  --disable-encoders       disables all encoders"
  #echo "  --disable-decoders       disables all decoders"
  #echo "  --disable-muxer=NAME     disables muxer NAME"
  #echo "  --enable-muxer=NAME      enables muxer NAME"
  #echo "  --disable-muxers         disables all muxers"
  #echo "  --disable-demuxer=NAME   disables demuxer NAME"
  #echo "  --enable-demuxer=NAME    enables demuxer NAME"
  #echo "  --disable-demuxers       disables all demuxers"
  #echo "  --enable-parser=NAME     enables parser NAME"
  #echo "  --disable-parser=NAME    disables parser NAME"
  #echo "  --disable-parsers        disables all parsers"
  #echo
  #echo "Developer options (useful when working on FFmpeg itself):"
  #echo "  --enable-gprof           enable profiling with gprof [$gprof]"
  #echo "  --disable-opts           disable compiler optimizations"
  #echo "  --enable-extra-warnings  enable more compiler warnings"
  #echo "  --disable-strip          disable stripping of executables and shared libraries"
  #echo ""
  #echo "NOTE: Object files are built at the place where configure is launched."
  exit 1
}

log(){
    echo "$@" >>$logfile
}

log_file(){
    log BEGIN $1
    cat -n $1 >>$logfile
    log END $1
}

echolog(){
    log "$@"
    echo "$@"
}

die(){
    echolog "$@"
    cat <<EOF
If you think configure made a mistake, make sure you are using the latest
version from SVN.  If the latest version fails, report the problem to the
mythtv-dev@mythtv.org mailing list or IRC #mythtv on irc.freenode.net
EOF
    if enabled logging; then
        cat <<EOF
Include the log file "$logfile" produced by configure as this will help
solving the problem.
EOF
    else
cat <<EOF
Rerun configure with logging enabled (do not use --log=no), and include the
log this produces with your report.
EOF
    fi
    rm -f $TMPC $TMPCXX $TMPO $TMPE $TMPS $TMPH
    exit 1
}

# "tr '[a-z]' '[A-Z]'" is a workaround for Solaris tr not grokking "tr a-z A-Z"
toupper(){
    echo "$@" | tr '[a-z]' '[A-Z]'
}

tolower(){
    echo "$@" | tr '[A-Z]' '[a-z]'
}

set_all(){
    value=$1
    shift
    for var in $*; do
        eval $var=$value
    done
}

pushvar(){
    for var in $*; do
        eval level=\${${var}_level:=0}
        eval ${var}_${level}="\$$var"
        eval ${var}_level=$(($level+1))
    done
}

popvar(){
    for var in $*; do
        eval level=\${${var}_level:-0}
        test $level = 0 && continue
        eval level=$(($level-1))
        eval $var="\${${var}_${level}}"
        eval ${var}_level=$level
        eval unset ${var}_${level}
    done
}

enable(){
    set_all yes $*
}

disable(){
    set_all no $*
}

enabled(){
    eval test "x\$$1" = "xyes"
}

disabled(){
    eval test "x\$$1" = "xno"
}

enabled_all(){
    for opt; do
        enabled $opt || return 1
    done
}

disabled_all(){
    for opt; do
        disabled $opt || return 1
    done
}

enabled_any(){
    for opt; do
        enabled $opt && return 0
    done
}

disabled_any(){
    for opt; do
        disabled $opt && return 0
    done
}

check_deps(){
    for cfg; do
        enabled ${cfg}_checking && die "Circular dependency for $cfg."
        disabled ${cfg}_checking && continue
        enable ${cfg}_checking

        eval dep_all="\$${cfg}_deps"
        eval dep_any="\$${cfg}_deps_any"

        pushvar cfg dep_all dep_any
        check_deps $dep_all $dep_any
        popvar cfg dep_all dep_any

        enabled_all $dep_all || disable $cfg
        enabled_any $dep_any || disable $cfg

        disable ${cfg}_checking
    done
}

print_config(){
    pfx=$1
    header=$2
    makefile=$3
    shift 3
    for cfg; do
        if enabled $cfg; then
            ucname="${pfx}`toupper $cfg`"
            echo "#define ${ucname} 1" >> $header
            echo "${ucname}=yes" >> $makefile
        fi
    done
}

flags_saved(){
    (: ${SAVE_CFLAGS?}) 2>/dev/null
}

save_flags(){
    flags_saved && return
    SAVE_CFLAGS="$CFLAGS"
    SAVE_LDFLAGS="$LDFLAGS"
    SAVE_extralibs="$extralibs"
}

restore_flags(){
    flags_saved || return
    CFLAGS="$SAVE_CFLAGS"
    LDFLAGS="$SAVE_LDFLAGS"
    extralibs="$SAVE_extralibs"
    unset SAVE_CFLAGS
    unset SAVE_LDFLAGS
    unset SAVE_extralibs
}

temp_cflags(){
    save_flags
    CFLAGS="$CFLAGS $*"
}

temp_ldflags(){
    save_flags
    LDFLAGS="$LDFLAGS $*"
}

temp_extralibs(){
    save_flags
    extralibs="$extralibs $*"
}

append(){
    var=$1
    shift
    flags_saved && eval "SAVE_$var=\"\$SAVE_$var $*\""
    eval "$var=\"\$$var $*\""
}

add_cflags(){
    append CFLAGS "$@"
}

add_cppflags(){
    append ECXXFLAGS "$@"
}

add_ldflags(){
    append LDFLAGS "$@"
}

add_extralibs(){
    append extralibs "$@"
}

check_cmd(){
    log "$@"
    "$@" >>$logfile 2>&1
}

check_cc(){
    log check_cc "$@"
    cat >$TMPC
    log_file $TMPC
    check_cmd $cc $CFLAGS "$@" -c -o $TMPO $TMPC
}

check_cpp(){
    log check_cpp "$@"
    cat >$TMPCXX
    log_file $TMPCXX
    check_cmd $cxx $CFLAGS "$@" -E -o $TMPO $TMPCXX
}

check_ld(){
    log check_ld "$@"
    check_cc || return
    check_cmd $cc $LDFLAGS "$@" -o $TMPE $TMPO $extralibs
}

check_cflags(){
    log check_cflags "$@"
    check_cc "$@" <<EOF && add_cflags "$@"
int x;
EOF
}

check_cppflags(){
    log check_cppflags "$@"
    check_cpp "$@" <<EOF && add_cppflags "$@"
class X {};
int x;
EOF
}

check_ldflags(){
    log check_ldflags "$@"
    check_ld "$@" <<EOF && add_ldflags "$@"
int main(){
    return 0;
}
EOF
}

check_header(){
    log check_header "$@"
    header=$1
    shift
    var=`echo $header | sed 's/[^A-Za-z0-9_]/_/g'`
    disable $var
    check_cpp "$@" <<EOF && enable $var
#include <$header>
int x;
EOF
}

check_func(){
    log check_func "$@"
    func=$1
    shift
    disable $func
    check_ld "$@" <<EOF && enable $func
extern int $func();
int main(){
    $func();
}
EOF
}

check_func2(){
    log check_func2 "$@"
    headers=$1
    func=$2
    shift 2
    disable $func
    incs=""
    for hdr in $headers; do
        incs="$incs
#include <$hdr>"
    done
    check_ld "$@" <<EOF && enable $func
$incs
int main(){
    (void) $func;
    return 0;
}
EOF
}

check_lib(){
    log check_lib "$@"
    header="$1"
    func="$2"
    shift 2
    temp_extralibs "$@"
    check_header $header && check_func $func && add_extralibs "$@"
    err=$?
    restore_flags
    return $err
}

check_lib2(){
    log check_lib2 "$@"
    headers="$1"
    func="$2"
    shift 2
    temp_extralibs "$@"
    check_func2 "$headers" $func && add_extralibs "$@"
    err=$?
    restore_flags
    return $err
}

check_exec(){
    check_ld "$@" && { enabled cross_compile || $TMPE >>$logfile 2>&1; }
}

check_exec_crash(){
    code=`cat`

    # exit() is not async signal safe.  _Exit (C99) and _exit (POSIX)
    # are safe but may not be available everywhere.  Thus we use
    # raise(SIGTERM) instead.  The check is run in a subshell so we
    # can redirect the "Terminated" message from the shell.  SIGBUS
    # is not defined by standard C so it is used conditionally.

    (check_exec "$@") >>$logfile 2>&1 <<EOF
#include <signal.h>
static void sighandler(int sig){
    raise(SIGTERM);
}
int main(){
    signal(SIGILL, sighandler);
    signal(SIGFPE, sighandler);
    signal(SIGSEGV, sighandler);
#ifdef SIGBUS
    signal(SIGBUS, sighandler);
#endif
    { $code }
}
EOF
}

require(){
    name="$1"
    header="$2"
    func="$3"
    shift 3
    check_lib $header $func "$@" || die "ERROR: $name not found"
}

require2(){
    name="$1"
    headers="$2"
    func="$3"
    shift 3
    check_lib2 "$headers" $func "$@" || die "ERROR: $name not found"
}

check_foo_config(){
    cfg=$1
    pkg=$2
    header=$3
    func=$4
    shift 4
    disable $cfg
    check_cmd ${pkg}-config --version
    err=$?
    if test "$err" = 0; then
        temp_cflags `${pkg}-config --cflags`
        temp_extralibs `${pkg}-config --libs`
        check_lib "$@" $header $func && enable $cfg
    fi
    return $err
}

apply(){
    file=$1
    shift
    "$@" < "$file" > "$file.tmp" && mv "$file.tmp" "$file" || rm "$file.tmp"
}

x86_mmx_cpus="pentium-mmx,pentium2,pentium3,pentium3m,pentium-m"
x86_mmx_cpus="$x86_mmx_cpus,pentium4,pentium4m,prescott"
x86_mmx_cpus="$x86_mmx_cpus,athlon,athlon-xp,athlon-tbird,athlon-4,athlon-mp,"
x86_mmx_cpus="$x86_mmx_cpus,c3,c3-2,k6,k6-2,k6-3"

x86_cpus="i386,i486,i586,i686,pentium,pentiumpro,${x86_mmx_cpus}"

x86_slow_cmov_cpus="pentium4,pentium4m,prescott,nocona"

x86_cmov_cpus="i686,pentiumpro,pentium2,pentium3,pentium3m,pentium-m,"
x86_cmov_cpus="$x86_cmov_cpus,athlon,athlon-xp,athlon-tbird,athlon-4,"
x86_cmov_cpus="$x86_cmov_cpus,athlon-mp,c3-2,$x86_slow_cmov_cpus"

x86_64_cpus="x86-64,athlon64,k8,opteron,athlon-fx,nocona"


is_x86_cpu() {
    expr ",${x86_cpus}," : ".*,$1," > /dev/null
}

is_x86_64_cpu() {
    expr ",${x86_64_cpus}," : ".*,$1," > /dev/null
}

is_x86_mmx() {
    expr ",${x86_mmx_cpus}," : ".*,$1," > /dev/null
}

is_x86_cmov_cpu() {
    expr ",${x86_cmov_cpus}," : ".*,$1," > /dev/null
}

is_x86_slow_cmov_cpu() {
    expr ",${x86_slow_cmov_cpus}," : ".*,$1," > /dev/null
}

CONFIG_LIST='
    encoders
    decoders
    parsers
    muxers
    demuxers
    amr
    amr_nb
    amr_nb_fixed
    amr_wb
    audio_beos
    audio_oss
    avisynth
    beos_netserver
    bktr
    dc1394
    dv1394
    ebp_available
    ebx_available
    ffmpeg
    ffplay
    ffserver
    gpl
    gprof
    ipv6
    liba52
    liba52bin
    libdts
    libfaac
    libfaad
    libfaadbin
    libgsm
    libmp3lame
    libnut
    libogg
    libtheora
    libvorbis
    memalign_hack
    mpegaudio_hp
    network
    powerpc_perf
    pp
    protocols
    swscaler
    vhook
    v4l
    v4l2
    wince
    x11grab
    x264
    xvid
    zlib
'

THREADS_LIST='
    beosthreads
    os2threads
    pthreads
    w32threads
'

HAVE_LIST="
    $THREADS_LIST
    altivec
    altivec_h
    armv5te
    armv6
    arpa_inet_h
    byteswap_h
    cmov
    dcbzl
    dev_bktr_ioctl_bt848_h
    dev_bktr_ioctl_meteor_h
    dev_ic_bt8xx_h
    dev_video_meteor_ioctl_meteor_h
    dev_video_bktr_ioctl_bt848_h
    dlfcn_h
    dlopen
    fast_64bit
    fast_cmov
    freetype2
    ftime
    getifaddrs
    gettimeofday
    imlib2
    inet_aton
    iwmmxt
    localtime_r
    lrint
    lrintf
    machine_ioctl_bt848_h
    machine_ioctl_meteor_h
    malloc_h
    memalign
    mlib
    mmi
    mmx
    os2
    round
    sdl
    sdl_video_size
    soundcard_h
    stdint_h
    sys_poll_h
    sys_soundcard_h
    threads
"

TARGET_LIST='
    altivec
    armv5te
    armv6
    iwmmxt
    mmi
    mmx
'

MYTHTV_LIST='
    audio_alsa
    audio_arts
    audio_jack
    backend
    dbox2
    darwin
    darwin_da
    directfb
    directx
    dvb
    dvdv
    firewire
    frontend
    iptv
    ivtv
    hdhomerun
    joystick_menu
    mac_bundle
    lirc
    lmsensors
    opengl_vsync
    proc_opt
    symbol_visibility
    valgrind
    x11
    xrandr
    xv
    xvmc_opengl
    xvmc_pro
    xvmc_vld
    xvmc
    xvmcw
'

CMDLINE_SELECT="
    $CONFIG_LIST
    $TARGET_LIST
    $THREADS_LIST
    $MYTHTV_LIST
    debug
    extra_warnings
    shared
    static
"

dxa_decoder_deps="zlib"
flashsv_decoder_deps="zlib"
flashsv_encoder_deps="zlib"
mpeg_xvmc_decoder_deps="xvmc"
mpeg_xvmc_vld_decoder_deps="xvmc_vld"
png_decoder_deps="zlib"
png_encoder_deps="zlib"
x264_encoder_deps="x264"
xvid_encoder_deps="xvid"
zmbv_decoder_deps="zlib"
zmbv_encoder_deps="zlib"

aac_decoder_deps="libfaad"
mpeg4aac_decoder_deps="libfaad"
amr_nb_decoder_deps_any="amr_nb amr_nb_fixed"
amr_nb_encoder_deps_any="amr_nb amr_nb_fixed"
amr_wb_decoder_deps="amr_wb"
amr_wb_encoder_deps="amr_wb"
dts_decoder_deps="libdts"
faac_encoder_deps="libfaac"
liba52_decoder_deps="liba52"
libgsm_decoder_deps="libgsm"
libgsm_encoder_deps="libgsm"
libgsm_ms_decoder_deps="libgsm"
libgsm_ms_encoder_deps="libgsm"
libtheora_encoder_deps="libtheora"
mp3lame_encoder_deps="libmp3lame"
oggvorbis_decoder_deps="libvorbis"
oggvorbis_encoder_deps="libvorbis"

ac3_demuxer_deps="ac3_parser"
audio_demuxer_deps_any="audio_oss audio_beos"
audio_muxer_deps_any="audio_oss audio_beos"
dc1394_demuxer_deps="dc1394"
dv1394_demuxer_deps="dv1394"
gxf_muxer_deps="gpl"
libnut_demuxer_deps="libnut"
libnut_muxer_deps="libnut"
ogg_muxer_deps="libogg"
redir_demuxer_deps="network"
rtp_muxer_deps="network"
rtsp_demuxer_deps="network"
sdp_demuxer_deps="network"
v4l2_demuxer_deps="v4l2"
video_grab_bktr_demuxer_deps="bktr"
video_grab_v4l_demuxer_deps="v4l"
x11_grab_device_demuxer_deps="x11grab"

ffplay_deps="sdl"
ffserver_deps="network protocols muxers"
network_deps="protocols"

# mythtv dependencies
dbox2="backend"
dvb="backend"
firewire="backend"
iptv="backend"
ivtv="backend v4l"
hdhomerun="backend"
v4l="backend"
xrandr="x11"
xv="x11"
xvmc="x11"
xvmc_vld="x11"


# set temporary file name
if test ! -z "$TMPDIR" ; then
    TMPDIR1="${TMPDIR}"
elif test ! -z "$TEMPDIR" ; then
    TMPDIR1="${TEMPDIR}"
else
    TMPDIR1="/tmp"
fi

TMPC="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.c"
TMPCXX="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.cpp"
TMPO="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.o"
TMPE="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}"
TMPS="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.S"
TMPH="${TMPDIR1}/ffmpeg-conf-${RANDOM}-$$-${RANDOM}.h"

# default parameters

logging="yes"
logfile="config.err"
compile_type="release"

# installation paths
PREFIX="/usr/local"
libdir_name="lib"
libdir=""
shlibdir="$libdir"
incdir='${PREFIX}/include/mythtv'
mandir='${PREFIX}/man'
bindir='${PREFIX}/bin'

# toolchain
cross_prefix=""
cross_compile="no"
cc="gcc"
cxx="g++"
ccache="yes"
distcc="yes"
ar="ar"
ranlib="ranlib"
make="make"
strip="strip"
asmalign_pot="unknown"

if test x"$CC" != x"" ; then
    cc="$CC"
fi

if test x"$CXX" != x"" ; then
    cxx="$CXX"
fi

# machine
arch=`uname -m`
arch_raw="$arch"
cpu="generic"
cpu_overide="no"
processor=`uname -p 2>/dev/null`
processor_flags=""
tune="generic"
powerpc_perf="no"
mmx="default"
cmov="no"
fast_cmov="no"
armv5te="default"
armv6="default"
iwmmxt="default"
altivec="default"
dcbzl="no"
mmi="default"
bigendian="no"

if test -f /proc/cpuinfo ; then
    if test x"$processor" = x"" -o x"$processor" = x"$arch_raw" -o \
            x"$processor" = x"unknown" ; then
        processor=`cat /proc/cpuinfo | grep "model name" | head -n 1`
    fi
    processor_flags=`cat /proc/cpuinfo | grep "flags" | head -n 1`
fi

# Mac OS X equivalent
if test -f /usr/bin/hostinfo ; then 
    if test x"$processor" = x"" -o x"$processor" = x"$arch_raw" -o \
            x"$processor" = x"unknown" -o x"$processor" = x"powerpc" ; then 
        processor=`/usr/bin/hostinfo | grep "Processor type:"` 
        processor=${processor#Processor type: *} 
        processor=${processor% (*} 
        if test x"`echo $processor | cut -c1-3`" = x"ppc" ; then
            tune=$processor 
        else 
            processor=`/usr/sbin/sysctl -n machdep.cpu.model_string` 
            processor_flags=`/usr/sbin/sysctl -n machdep.cpu.features` 
            processor_flags=`echo $processor_flags | tr "[A-Z]" "[a-z]"` 
        fi 
    fi 
fi 

# OS
targetos=$(tolower $(uname -s))
beos_netserver="no"
os2="no"
wince="no"

# non-library system interfaces
audio_beos="default"
audio_oss="yes"
bktr="yes"
dv1394="yes"
v4l2="yes"
v4l="yes"

# mythtv settings
CONFIG_DEFINES=""
CONFIG_INCLUDEPATH=""
PROFILEFLAGS=""
appleremote="no"
audio_alsa="default"
audio_arts="default"
audio_jack="default"
backend="no"
bindings_perl="yes"
dbox2="yes"
directfb="no"
directx="no"
dvb_path="/usr/include"
dvb="no"
dvdv="no"
firewire="yes"
frontend="yes"
hdhomerun="yes"
iptv="yes"
ivtv="yes"
joystick_menu="no"
lirc="yes"
mac_bundle="no"
mac_corevideo="no"
opengl="no"
opengl_vsync="no"
proc_opt="no"
symbol_visibility="no"
v4l="yes"
valgrind="no"
x11="yes"
x11_include_path="/usr/X11R6/include"
xrandr="yes"
xv="yes"
xvmc="no"
xvmc_lib=""
xvmc_opengl="no"
xvmc_pro="no"
xvmc_vld="yes"
xvmcw="yes"

# libraries
amr_nb="no"
amr_nb_fixed="no"
amr_wb="no"
avisynth="no"
dc1394="no"
dlfcn_h="no"
dlopen="no"
liba52="no"
liba52bin="no"
libdts="no"
libfaac="no"
libfaad2="no"
libfaad="no"
libfaadbin="no"
libgsm="no"
libmp3lame="no"
libnut="no"
libogg="no"
libtheora="no"
libvorbis="no"
mlib="no"
x11grab="no"
x264="no"
xvid="no"
zlib="yes"

# configurable options
debug="yes"
dostrip="yes"
extra_warnings="no"
ffmpeg="no"
ffplay="no"
ffserver="no"
gpl="yes"
gprof="no"
ipv6="yes"
shared="yes"
static="no"
memalign_hack="no"
mpegaudio_hp="yes"
network="no"
optimize="yes"
pp="no"
protocols="yes"
swscaler="no"
vhook="default"

# threading
beosthreads="no"
os2threads="no"
pthreads="no"
w32threads="no"
thread_type="no"

# build settings
SHFLAGS='-shared -Wl,-soname,$@'
VHOOKSHFLAGS='$(SHFLAGS)'
LIBOBJFLAGS=""
FFLDFLAGS=-Wl,--warn-common
LDLATEFLAGS='-Wl,-rpath-link,\$(BUILD_ROOT)/libavcodec -Wl,-rpath-link,\$(BUILD_ROOT)/libavformat -Wl,-rpath-link,\$(BUILD_ROOT)/libavutil'
FFSERVERLDFLAGS=-Wl,-E
LDCONFIG="ldconfig"
LIBPREF="lib"
LIBSUF=".a"
LIB='$(LIBPREF)$(NAME)$(LIBSUF)'
SLIBPREF="lib"
SLIBSUF=".so"
SLIBNAME='$(SLIBPREF)$(NAME)$(SLIBSUF)'
SLIBNAME_WITH_VERSION='$(SLIBNAME).$(LIBVERSION)'
SLIBNAME_WITH_MAJOR='$(SLIBNAME).$(LIBMAJOR)'
EXESUF=""
BUILDSUF=""
LIB_INSTALL_EXTRA_CMD='$(RANLIB) "$(libdir)/$(LIB)"'

# find source path
source_path="`dirname \"$0\"`"
source_path_used="yes"
if test -z "$source_path" -o "$source_path" = "." ; then
    source_path="`pwd`"
    source_path_used="no"
else
    source_path="`cd \"$source_path\"; pwd`"
    echo "$source_path" | grep -q '[[:blank:]]' &&
      die "Out of tree builds are impossible with whitespace in source path."
fi

if test x"$1" = x"-h" -o x"$1" = x"--help" ; then
    show_help
fi

FFMPEG_CONFIGURATION="$@"

ENCODER_LIST=`sed -n 's/^[^#]*ENC.*, *\(.*\)).*/\1_encoder/p' "$source_path/libs/libavcodec/allcodecs.c"`
DECODER_LIST=`sed -n 's/^[^#]*DEC.*, *\(.*\)).*/\1_decoder/p' "$source_path/libs/libavcodec/allcodecs.c"`
PARSER_LIST=`sed -n 's/^[^#]*PARSER.*, *\(.*\)).*/\1_parser/p' "$source_path/libs/libavcodec/allcodecs.c"`
MUXER_LIST=`sed -n 's/^[^#]*_MUX.*, *\(.*\)).*/\1_muxer/p' "$source_path/libs/libavformat/allformats.c"`
DEMUXER_LIST=`sed -n 's/^[^#]*DEMUX.*, *\(.*\)).*/\1_demuxer/p' "$source_path/libs/libavformat/allformats.c"`

enable $ENCODER_LIST $DECODER_LIST $PARSER_LIST $MUXER_LIST $DEMUXER_LIST

die_unknown(){
    echo "Unknown option \"$1\"."
    echo "See $0 --help for available options."
    exit 1
}

if [ -e config.log ] ; then
    PCONF=`cat config.log | tail -n 1 | grep configure`
    if test x"$PCONF" != x"" ; then
        PCONF=`echo $PCONF | sed 's/.\/configure//g'`
    fi
    for opt do
        if test x"$opt" != x"--prev" -a x"$opt" != x"--previous" ; then
            OTHOPT="$OTHOPT$opt"
        fi
        if test x"$opt" = x"--prev" -o x"$opt" = x"--previous" ; then
            if test x"$PCONF" != "--prev" ; then
                PREV="yes";
            fi
        fi
    done
    if test x"$PREV" = x"yes"; then
        echo "Options: $PCONF $OTHOPT"
        ./configure $PCONF $OTHOPT
        exit
    fi
fi

for opt do
  optval="${opt#*=}"
  case "$opt" in
  --log)
  ;;
  --log=*) logging="$optval"
  ;;
  --compile-type=*) compile_type="$optval"
  ;;
  --prefix=*) PREFIX="$optval"
  ;;
  --libdir-name=*) libdir_name="$optval"
  ;;
  --libdir=*) libdir="$optval"
  ;;
  --shlibdir=*) shlibdir="$optval"
  ;;
  --incdir=*) incdir="$optval"
  ;;
  --mandir=*) mandir="$optval"
  ;;
  --source-path=*) source_path="$optval"
  ;;
  --cross-prefix=*) cross_prefix="$optval"
  ;;
  --cross-compile) cross_compile="yes"
  ;;
  --target-os=*) targetos="$optval"
  ;;
  --cc=*) cc="$optval"
  ;;
  --make=*) make="$optval"
  ;;
  --extra-cflags=*) add_cflags "$optval"
  ;;
  --extra-cxxflags=*) add_cppflags "$optval"
  ;;
  --extra-ldflags=*) add_ldflags "$optval"
  ;;
  --extra-libs=*) add_extralibs "$optval"
  ;;
  --build-suffix=*) BUILDSUF="$optval"
  ;;
  --disable-ccache) ccache="no"
  ;;
  --disable-distcc) distcc="no"
  ;;
  --enable-mingwce) wince="yes"
  ;;
  --disable-opts) optimize="no"
  ;;
  --enable-small) optimize="small"
  ;;
  --enable-sunmlib) mlib="yes"
  ;;
  --disable-strip) dostrip="no"
  ;;
  --dvb-path=*) dvb_path="$optval"
  ;;
  --x11-path=*) x11_include_path="$optval"
  ;;
  --xvmc-lib=*) xvmc_lib="$optval"
  ;;
  --enable-mac-accel) dvdv="yes"
  ;;
  --disable-mac-accel) dvdv="no"
  ;;
# disabled due to abuse in Gentoo ebuild
  --disable-frontend)
  ;;
# disabled due to abuse in Gentoo ebuild
  --disable-backend)
  ;;
  --previous|--prev)
      echo "No history of previous configure parameters."
  ;;
  --with-bindings=*)
      tmp_bindings=`echo ${optval} | sed -e 's/,/ /g'`
      for binding in ${tmp_bindings} ; do
          if test x"${binding}" = x"perl"; then
              bindings_perl="yes"
          fi
      done
  ;;
  --without-bindings=*)
      tmp_bindings=`echo ${optval} | sed -e 's/,/ /g'`
      for binding in ${tmp_bindings} ; do
          if test x"${binding}" = x"perl"; then
              bindings_perl="no"
          fi
      done
  ;;
  --arch=*)
          arch=`echo $opt | cut -d '=' -f 2`
          arch_raw="$arch"
          processor=""
          processor_flags=""
          cpu_overide="yes"
  ;;
  --tune=*)
          tune=`echo $opt | cut -d '=' -f 2`
          tune_raw="$tune"
          processor=""
          processor_flags=""
  ;;
  --cpu=*)
          arch=`echo $opt | cut -d '=' -f 2`
          arch_raw="$arch"
          cpu="$arch"
          tune="$arch"
          tune_raw="$arch"
          processor=""
          processor_flags=""
          cpu_overide="yes"
  ;;
  --disable-encoders) disable $ENCODER_LIST
  ;;
  --disable-decoders) disable $DECODER_LIST
  ;;
  --disable-muxers) disable $MUXER_LIST
  ;;
  --disable-demuxers) disable $DEMUXER_LIST
  ;;
  --disable-parsers) disable $PARSER_LIST
  ;;
  --enable-*=*|--disable-*=*)
  eval `echo "$opt" | sed 's/=/-/;s/--/action=/;s/-/ thing=/;s/-/ name=/'`
  case "$thing" in
      encoder|decoder|muxer|demuxer|parser) $action ${optval}_${thing} ;;
      *) die_unknown "$opt" ;;
  esac
  ;;
  --enable-?*|--disable-?*)
  eval `echo "$opt" | sed 's/--/action=/;s/-/ option=/;s/-/_/g'`
  echo "$CMDLINE_SELECT" | grep -q "^ *$option\$" || die_unknown $opt
  $action $option
  ;;
  --help) show_help
  ;;
  *)
  die_unknown $opt
  ;;
  esac
done

if is_x86_cpu "$arch" ; then
    arch="x86_32"
fi

if is_x86_64_cpu "$arch" ; then
    arch="x86_64"
fi


case "$arch" in
  x86_32)
    if is_x86_cmov_cpu "$arch_raw" ; then
        cmov="yes"
        if ! is_x86_slow_cmov_cpu "$arch_raw" ; then
            fast_cmov="yes"
        fi
    fi
  ;;
  x86_64|amd64)
    arch="x86_32"
    canon_arch="`$cc -dumpmachine | sed -e 's,\([^-]*\)-.*,\1,'`"
    if [ x"$canon_arch" = x"x86_64" -o x"$canon_arch" = x"amd64" ]; then
      if [ -z "`echo $CFLAGS | grep -- -m32`"  ]; then
        arch="x86_64"
        enable fast_64bit
      fi
    fi
    cmov="yes"
    if ! is_x86_slow_cmov_cpu "$arch_raw" ; then
        fast_cmov="yes"
    fi
  ;;
  # armv4l is a subset of armv[567]*l
  arm|armv[4567]*l)
    arch="armv4l"
  ;;
  alpha)
    arch="alpha"
    enable fast_64bit
  ;;
  "Power Macintosh"|ppc|powerpc)
    arch="powerpc"
  ;;
  ppc64)
    arch="powerpc"
    enable fast_64bit
  ;;
  mips|mipsel|IP*)
    arch="mips"
  ;;
  sun4u|sparc64)
    arch="sparc64"
    enable fast_64bit
  ;;
  sparc)
    arch="sparc"
  ;;
  sh4)
    arch="sh4"
  ;;
  parisc)
    arch="parisc"
  ;;
  parisc64)
    arch="parisc"
    enable fast_64bit
  ;;
  s390|s390x)
    arch="s390"
  ;;
  m68k)
    arch="m68k"
  ;;
  ia64)
    arch="ia64"
    enable fast_64bit
  ;;
  bfin)
    arch="bfin"
  ;;
  *)
    arch="unknown"
  ;;
esac

# OS specific
osextralibs="-lm"
case $targetos in
  beos|haiku|zeta)
    PREFIX="$HOME/config"
    # helps building libavcodec
    add_cflags "-DPIC -fomit-frame-pointer"
    # 3 gcc releases known for BeOS, each with ugly bugs
    gcc_version="`$cc -v 2>&1 | grep version | cut -d ' ' -f3-`"
    case "$gcc_version" in
      2.9-beos-991026*|2.9-beos-000224*) echo "R5/GG gcc"
        mmx="no"
        ;;
      *20010315*) echo "BeBits gcc"
        add_cflags "-fno-expensive-optimizations"
        ;;
    esac
    LDCONFIG="echo ignoring ldconfig"
    SHFLAGS=-nostart
    # disable Linux things
    dv1394="no"
    # enable BeOS things
    disabled audio_beos || enable_audio_beos
    # no need for libm, but the inet stuff
    # Check for BONE
    # XXX: actually should check for NOT net_server
    if (echo $BEINCLUDES|grep 'headers/be/bone' >/dev/null); then
        osextralibs="-lbind -lsocket"
    else
        beos_netserver="yes"
        osextralibs="-lnet"
    fi ;;
  sunos)
    dv1394="no"
    FFLDFLAGS=""
    FFSERVERLDFLAGS=""
    SHFLAGS="-shared -Wl,-h,\$@"
    add_extralibs "-lsocket -lnsl"
    ;;
  netbsd)
    dv1394="no"
    add_extralibs "-lossaudio"
    ;;
  openbsd)
    CCONFIG = "$CCONFIG openbsd"
    dv1394="no"
    need_memalign="no"
    LIBOBJFLAGS="\$(PIC)"
    LDCONFIG="ldconfig -m \$(shlibdir)"
    SHFLAGS='-shared'
    SLIBNAME='$(SLIBPREF)$(NAME)$(SLIBSUF).$(LIBVERSION)'
    SLIBNAME_WITH_VERSION='$(SLIBNAME)'
    SLIBNAME_WITH_MAJOR='$(SLIBNAME)'
    add_extralibs "-lossaudio"
    ;;
  freebsd)
    CCONFIG = "$CCONFIG freebsd"
    backend="yes"
    dv1394="no"
    need_memalign="no"
    add_cflags "-pthread"
    ;;
  gnu/kfreebsd)
    dv1394="no"
    add_cflags "-pthread"
    ;;
  bsd/os)
    dv1394="no"
    osextralibs="-lpoll -lgnugetopt -lm"
    strip="strip -d"
    ;;
  darwin)
    appleremote="yes"
    backend="yes"
    x11="no"
    dv1394="no"
    need_memalign="no"
    SHFLAGS="-dynamiclib -Wl,-single_module -Wl,-install_name,\$(shlibdir)/\$(SLIBNAME),-current_version,\$(SPPVERSION),-compatibility_version,\$(SPPVERSION) -Wl,-read_only_relocs,suppress"
    VHOOKSHFLAGS='-dynamiclib -Wl,-single_module -flat_namespace -undefined suppress -Wl,-install_name,$(shlibdir)/vhook/$@'
    osextralibs=""
    strip="strip -x"
    FFLDFLAGS="-Wl,-dynamic,-search_paths_first"
    SLIBSUF=".dylib"
    SLIBNAME_WITH_VERSION='$(SLIBPREF)$(NAME).$(LIBVERSION)$(SLIBSUF)'
    SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(NAME).$(LIBMAJOR)$(SLIBSUF)'
    FFSERVERLDFLAGS=-Wl,-bind_at_load
    ;;
  mingw32*)
    targetos=mingw32
    if enabled_all shared static; then
        cat <<EOF
You can only build one library type at once on MinGW.
Specify --disable-static --enable-shared to only build
the shared libraries. To build only the static libraries
you do not need to pass additional options.
EOF
        exit 1
    fi
    dv1394="no"
    ffserver="no"
    network="no"
    if enabled wince; then
        protocols="no"
    fi
    SLIBPREF=""
    SLIBSUF=".dll"
    EXESUF=".exe"
    SLIBNAME_WITH_VERSION='$(SLIBPREF)$(NAME)-$(LIBVERSION)$(SLIBSUF)'
    SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(NAME)-$(LIBMAJOR)$(SLIBSUF)'
    SLIB_EXTRA_CMD="-lib /machine:i386 /def:\$(@:${SLIBSUF}=.def)"
    SLIB_INSTALL_EXTRA_CMD="-install -m 644 \$(SLIBNAME_WITH_MAJOR:\$(SLIBSUF)=.lib) \"\$(shlibdir)/\$(SLIBNAME_WITH_MAJOR:\$(SLIBSUF)=.lib)\""
    SHFLAGS="-shared -Wl,--output-def,\$(@:${SLIBSUF}=.def),--out-implib,lib\$(SLIBNAME:\$(SLIBSUF)=.dll.a) -Wl,--enable-runtime-pseudo-reloc"
    add_extralibs -lws2_32
    ;;
  cygwin*)
    targetos=cygwin
    shlibdir="$bindir"
    dv1394="no"
    VHOOKSHFLAGS='-shared -L$(BUILD_ROOT)/libavformat -L$(BUILD_ROOT)/libavcodec -L$(BUILD_ROOT)/libswscale -L$(BUILD_ROOT)/libavutil'
    VHOOKLIBS='-lavformat$(BUILDSUF) -lavcodec$(BUILDSUF) -lswscale$(BUILDSUF) -lavutil$(BUILDSUF) $(EXTRALIBS)'
    osextralibs=""
    EXESUF=".exe"
    SLIBPREF="cyg"
    SLIBSUF=".dll"
    SLIBNAME_WITH_VERSION='$(SLIBPREF)$(NAME)-$(LIBVERSION)$(SLIBSUF)'
    SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(NAME)-$(LIBMAJOR)$(SLIBSUF)'
    SHFLAGS='-shared -Wl,--out-implib=lib$(NAME).dll.a'
    ;;
  linux)
    CCONFIG="$CCONFIG linux"
    backend="yes"
    joystick_menu="yes"
    LDLATEFLAGS="-Wl,--as-needed $LDLATEFLAGS"
    ;;
  irix*)
    targetos=irix
    ranlib="echo ignoring ranlib"
    ;;
  os/2)
    TMPE=$TMPE".exe"
    ar="emxomfar -p128"
    ranlib="echo ignoring ranlib"
    strip="echo ignoring strip"
    add_cflags "-Zomf"
    FFLDFLAGS="-Zomf -Zstack 16384 -s"
    SHFLAGS="-Zdll -Zomf"
    FFSERVERLDFLAGS=""
    LIBPREF=""
    LIBSUF=".lib"
    SLIBPREF=""
    SLIBSUF=".dll"
    EXESUF=".exe"
    osextralibs=""
    pkg_requires=""
    dv1394="no"
    ffserver="no"
    vhook="no"
    os2="yes"
    ;;
  *)
    targetos="${targetos}-UNKNOWN"
    ;;
esac

add_extralibs $osextralibs


has_library()
{
    if test -f /etc/ld.so.conf ; then
        LIBPATHS=`cat /etc/ld.so.conf | grep -v "#" | grep -v "include"`
    else
        LIBPATHS=''
    fi
    LIBPATHS="$LIBPATHS `echo $LD_LIBRARY_PATH | sed s/':'/' '/g` "
    # Mac OS X has a different variable for this:
    LIBPATHS="$LIBPATHS `echo $DYLD_LIBRARY_PATH | sed s/':'/' '/g` "

    # recurse down just one level, should be enough in most cases
    if test -f /etc/ld.so.conf ; then
        INCL=`cat /etc/ld.so.conf | grep -v "#" | grep  "^include"`
        SRCH=`echo "$INCL" | sed '{ s/^include \//\//; s/^include /\/etc\//}'`
        for x in $SRCH ; do
            LP_APPEND=`cat $x | grep -v "#" | grep -v "^include"`
            LIBPATHS="$LIBPATHS $LP_APPEND"
        done
    fi

    LIBPATHS="`echo $LIBPATHS /$libdir_name /usr/$libdir_name /usr/local/$libdir_name /usr/X11R6/$libdir_name | sed s/'\/ '/' '/g` "

    HAS_IT="no"
    for LIBPATH in $LIBPATHS ; do
        if test x`ls $LIBPATH/$1* 2> /dev/null | head -n 1` != x"" ; then
            HAS_IT="yes"
        fi
    done
    expr $HAS_IT : "yes" > /dev/null
}

has_header()
{
    HPATHS="/usr/local/include /usr/include /usr/include/g++-v3 /usr/X11R6/include"
    INCL=`echo $DYLD_LIBRARY_PATH $LD_LIBRARY_PATH | sed s/':'/' '/g`
    HPATHS="$HPATHS `echo $INCL | sed s/$libdir_name/include/g` "

    HAS_IT="no"
    for HPATH in $HPATHS ; do
        if test x`ls $HPATH/$1* 2> /dev/null | head -n 1` != x"" ; then
            HAS_IT="yes"
        fi
    done
    expr $HAS_IT : "yes" > /dev/null
}

CCONFIG="$CCONFIG $compile_type"
if test x$compile_type = x"profile" ; then
    PROFILEFLAGS="-g -DNDEBUG"
fi


if ! disabled logging ; then
    enabled logging || logfile="$logging"
    echo "# $0 $@" >$logfile
    set >>$logfile
else
    logfile=/dev/null
fi

# Combine FFLDFLAGS and the LDFLAGS environment variable
LDFLAGS="$FFLDFLAGS $EXTRALDFLAGS $LDFLAGS"

test -n "$cross_prefix" && cross_compile=yes
cc="${cross_prefix}${cc}"
ar="${cross_prefix}${ar}"
ranlib="${cross_prefix}${ranlib}"
strip="${cross_prefix}${strip}"

# we need to build at least one lib type
if disabled_all static shared; then
    cat <<EOF
At least one library type must be built.
Specify --enable-static to build the static libraries or --enable-shared to
build the shared libraries as well. To only build the shared libraries specify
--disable-static in addition to --enable-shared.
EOF
    exit 1;
fi

if disabled libogg; then
    enabled libtheora && die "libogg must be enabled to enable libtheora."
    enabled libvorbis && die "libogg must be enabled to enable libvorbis."
fi

if enabled_any libfaad libfaadbin ; then
    if check_header faad.h; then
        check_cc << EOF
#include <faad.h>
#ifndef FAAD2_VERSION
ok faad1
#endif
int main( void ) { return 0; }
EOF
        test $? = 0 && enable libfaad2
    else
        die "FAAD test failed."
    fi
fi


if disabled gpl ; then
    die_gpl_disabled(){
        name=$1
        shift
        enabled_any $@ && die "$name is under GPL and --enable-gpl is not specified."
    }
    die_gpl_disabled "The Postprocessing code" pp
    die_gpl_disabled "liba52"                  liba52
    die_gpl_disabled "libxvidcore"             xvid
    die_gpl_disabled "x264"                    x264
    die_gpl_disabled "libdts"                  libdts
    die_gpl_disabled "FAAD2"                   libfaad2
    die_gpl_disabled "The X11 grabber"         x11grab
    die_gpl_disabled "The software scaler"     swscaler
fi

# compute mmx state
if test x"$mmx" = x"default"; then
    mmx="no"
    if test x"$arch" = x"x86_64"; then
        mmx="yes"
    else
        is_x86_64_cpu "$arch_raw" && mmx="yes"
        is_x86_mmx "$arch_raw" && mmx="yes"
    fi

    # if !arch && !tune && !cpu & processor_flags, then...
    if test x"$cpu_overide" != x"yes" -a x"$tune_raw" = x"" -a \
            x"$processor_flags" != x"" ; then
        mmx="no"
        if expr "$processor_flags" : ".*mmx" > /dev/null ; then
            mmx="yes"
        fi
    fi
fi

test -z "$need_memalign" && need_memalign="$mmx"

#Darwin CC versions
needmdynamicnopic="no"
if test $targetos = darwin; then
    if test -n "`$cc -v 2>&1 | grep xlc`"; then
        add_cflags "-qpdf2 -qlanglvl=extc99 -qmaxmem=-1 -qarch=auto -qtune=auto"
    else
        add_cflags "-no-cpp-precomp -pipe"
        check_cflags "-force_cpusubtype_ALL"
        check_cflags "-Wno-sign-compare"
        disabled shared && needmdynamicnopic="yes"
    fi
fi

disabled optimize || add_cflags -fomit-frame-pointer

# Can only do AltiVec on PowerPC
if test $altivec = "default"; then
    if test $arch = "powerpc"; then
        altivec="yes"
    else
        altivec="no"
    fi
fi

# Add processor-specific flags
POWERPCMODE="32bits"
if test $tune != "generic"; then
    warn_altivec(){
        $1 altivec && echo "WARNING: Tuning for $2 but AltiVec $1.";
    }
    case $tune in
        601|ppc601|PowerPC601)
            ARCHFLAGS="-mcpu=601"
            warn_altivec enabled PPC601
        ;;
        603*|ppc603*|PowerPC603*)
            ARCHFLAGS="-mcpu=603"
            warn_altivec enabled PPC603
        ;;
        604*|ppc604*|PowerPC604*)
            ARCHFLAGS="-mcpu=604"
            warn_altivec enabled PPC604
        ;;
        G3|g3|75*|ppc75*|PowerPC75*)
            ARCHFLAGS="-mcpu=750 -mtune=750 -mpowerpc-gfxopt"
            warn_altivec enabled PPC75x
        ;;
        G4|g4|745*|ppc745*|PowerPC745*)
            ARCHFLAGS="-mcpu=7450 -mtune=7450 -mpowerpc-gfxopt"
            warn_altivec disabled PPC745x
        ;;
        74*|ppc74*|PowerPC74*)
            ARCHFLAGS="-mcpu=7400 -mtune=7400 -mpowerpc-gfxopt"
            warn_altivec disabled PPC74xx
        ;;
        G5|g5|970|ppc970|PowerPC970|power4*|Power4*)
            ARCHFLAGS="-mcpu=970 -mtune=970 -mpowerpc-gfxopt -mpowerpc64"
            warn_altivec disabled PPC970
            POWERPCMODE="64bits"
        ;;
        sparc64)
            ARCHFLAGS="-mcpu=v9 -mtune=v9"
        ;;               
        bf*) #bf531 bf532 bf533 bf561 bf5xx all get this config
            add_cflags "-mfdpic"
            add_ldflags "-mfdpic"
        ;;
	*)
            ARCHFLAGS="-mtune=$tune"
	;;
    esac
fi

if test x"$cpu_overide" = x"yes"; then
    ARCHFLAGS="-mcpu=$arch_raw $ARCHFLAGS"
fi

gnu_make(){
    $1 --version 2>&1 | grep -q GNU
}

if ! gnu_make $make; then
    gnu_make gmake && make=gmake || die "GNU make not found."
fi

# make sure we can execute files in $TMPDIR
cat >$TMPE 2>>$logfile <<EOF
#! /bin/sh
EOF
chmod +x $TMPE >>$logfile 2>&1
if ! $TMPE >>$logfile 2>&1; then
    cat <<EOF
Unable to create and execute files in $TMPDIR1.  Set the TMPDIR environment
variable to another directory and make sure that $TMPDIR1 is not mounted
noexec.
EOF
    die "Sanity test failed."
fi
rm $TMPE

# compiler sanity check
check_exec <<EOF
int main(){
    return 0;
}
EOF
if test "$?" != 0; then
    echo "$cc is unable to create an executable file."
    if test -z "$cross_prefix" && disabled cross_compile ; then
        echo "If $cc is a cross-compiler, use the --cross-compile option."
        echo "Only do this if you know what cross compiling means."
    fi
    die "C compiler test failed."
fi

if test $arch = "x86_32" -o $arch = "x86_64"; then
    # check whether EBP is available on x86
    # As 'i' is stored on the stack, this program will crash
    # if the base pointer is used to access it because the
    # base pointer is cleared in the inline assembly code.
    check_exec_crash <<EOF && enable ebp_available
    volatile int i=0;
    asm volatile (
        "xorl %%ebp, %%ebp"
    ::: "%ebp");
    return i;
EOF

    # check wether EBX is available on x86
    check_cc "-fPIC -DPIC" <<EOF && enable ebx_available
int main(){
    asm volatile ("":::"%ebx");
}
EOF
    if test $arch = "x86_32" && enabled ebx_available; then
        echo "register ebx isn't available since we force PIC on. disabling it."
        disable ebx_available
    fi
fi

# check for assembler specific support

if test $arch = "powerpc"; then
check_cc <<EOF && dcbzl=yes
int main(void) {
    register long zero = 0;
    char data[1024];
    asm volatile("dcbzl %0, %1" : : "b" (data), "r" (zero));
return 0;
}
EOF
fi

# check for SIMD availability

# AltiVec flags: The FSF version of GCC differs from the Apple version
if test $arch = "powerpc"; then
    if enabled altivec; then
        if test -n "`$cc -v 2>&1 | grep version | grep Apple`"; then
            add_cflags "-faltivec"
        else
            add_cflags "-maltivec -mabi=altivec"
        fi
    fi
fi

check_header altivec.h

# check if our compiler supports Motorola AltiVec C API
if enabled altivec; then
    if enabled altivec_h; then
        inc_altivec_h="#include <altivec.h>"
    else
        inc_altivec_h=
    fi
    check_cc <<EOF || altivec=no
$inc_altivec_h
int main(void) {
    vector signed int v1, v2, v3;
    v1 = vec_add(v2,v3);
    return 0;
}
EOF
fi

# if either tune or cpu is c3 or c3-2 optimize for smallness
if test x"$arch_raw" = x"c3" -o x"$arch_raw" = x"c3-2"; then
    ARCHFLAGS="-march=$arch"
    optimize="small"
fi
if test x"$tune" = x"c3" -o x"$tune" = x"c3-2"; then
    ARCHFLAGS="-march=$tune"
    optimize="small"
fi

# if no tune setting and we know cpu class look at $processor 
if test x"$tune" = x"generic" -a x"$cpu_overide" != x"yes"; then
# first try to tune based on processor info
# P4
   if expr "$processor" : "pentium4" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*Pentium(R) [4D]" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*Xeon(TM) CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*XEON(TM) CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
# Multiprocessor Xeon
   elif expr "$processor" : ".*XEON(TM) MP CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*Intel(R) Xeon(R) CPU.*5110" > /dev/null ; then
       ARCHFLAGS="-march=k8" # this would be pentium4 on 32 bit systems
# Various Intel Duo processors
   elif expr "$processor" : ".*Genuine.*Intel.*CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
   elif expr "$processor" : ".*Intel(R).*Core(TM)2.*CPU" > /dev/null ; then
       ARCHFLAGS="-march=k8" # this would be pentium4 on 32 bit systems
   elif expr "$processor" : ".*Celeron(R) CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium4"
       optimize="small"
# P6, which includes Intel Core
   elif expr "$processor" : ".*Intel P6 Family" > /dev/null ; then 
       ARCHFLAGS="-march=pentium4" 
       #arch_raw="i686" 
# P3
   elif expr "$processor" : "pentium3" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
   elif expr "$processor" : ".*Pentium.* III" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
   elif expr "$processor" : ".*Coppermine" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
       optimize="small"
   elif expr "$processor" : ".*Celeron(TM) CPU" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
       optimize="small"
   elif expr "$processor" : ".*Pentium(R) M" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
   elif expr "$processor" : ".*Celeron(R) M processor" > /dev/null ; then
       ARCHFLAGS="-march=pentium3"
       #optimize="small"
# P2
   elif expr "$processor" : "pentium2" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
   elif expr "$processor" : ".*Mendocino" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
       optimize="small"
   elif expr "$processor" : ".*Klamath" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
       optimize="small"
   elif expr "$processor" : ".*Deschutes" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
       optimize="small"
   elif expr "$processor" : ".*Pentium II" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
       optimize="small"
# AMD Turion
   elif expr "$processor" : ".*AMD Turion(tm) 64" > /dev/null ; then
       ARCHFLAGS="-march=k8"
# AMD Geode NX
   elif expr "$processor" : ".*AMD Geode(tm) NX" > /dev/null ; then
       ARCHFLAGS="-march=pentiumpro -mmmx"
       optimize="small"
# Athlon 64
   elif expr "$processor" : ".*AMD Athlon(tm) 64" > /dev/null ; then
       ARCHFLAGS="-march=k8"
# AMD Opteron
   elif expr "$processor" : ".*AMD Opteron(tm)" >/dev/null ; then 
       ARCHFLAGS="-march=k8"
# Athlon XP
   elif expr "$processor" : "athlon-xp" > /dev/null ; then
       ARCHFLAGS="-march=pentiumpro -mmmx"
   elif expr "$processor" : ".*AMD Athlon(tm) XP" > /dev/null ; then
       ARCHFLAGS="-march=pentiumpro -mmmx"
   elif expr "$processor" : ".*AMD Sempron(tm)" > /dev/null ; then
       ARCHFLAGS="-march=pentiumpro -mmmx"
# Athlon
   elif expr "$processor" : "athlon" > /dev/null ; then
       ARCHFLAGS="-march=athlon"
   elif expr "$processor" : ".*AMD Athlon(..)" > /dev/null ; then
       ARCHFLAGS="-march=athlon"
   elif expr "$processor" : ".*AMD Duron(..)" > /dev/null ; then
       ARCHFLAGS="-march=athlon"
       optimize="small"
# K6
   elif expr "$processor" : ".*AMD-K6(tm) 3D" > /dev/null ; then
       ARCHFLAGS="-march=pentium-mmx"
       optimize="small"
# Transmeta Crusoe
   elif expr "$processor" : ".*Crusoe(m) Processor TM5600" > /dev/null ; then
       ARCHFLAGS="-march=pentium2"
# c3-2
   elif expr "$processor" : ".*VIA Esther" > /dev/null ; then
       ARCHFLAGS="-march=c3-2"
       optimize="small"
       arch_raw="c3-2"
   elif expr "$processor" : ".*VIA Nehemiah" > /dev/null ; then
       ARCHFLAGS="-march=c3-2"
       optimize="small"
       arch_raw="c3-2"
# c3
   elif expr "$processor" : ".*VIA.*Ezra" > /dev/null ; then
       ARCHFLAGS="-march=c3"
       optimize="small"
       arch_raw="c3"
   elif expr "$processor" : ".*VIA Samuel" > /dev/null ; then
       ARCHFLAGS="-march=c3"
       optimize="small"
       arch_raw="c3"
# if no known processor info, tune base on arch_raw info
   elif test x"$arch_raw" = x"i686" -a x"$mmx" = x"yes" ; then
       ARCHFLAGS="-march=pentium2"
       proc_error_msg="yes"
   elif test x"$arch_raw" = x"i686" -a x"$mmx" = x"no" ; then
       ARCHFLAGS="-march=pentiumpro"
       proc_error_msg="yes"
   elif test x"$arch_raw" = x"i586" -a x"$mmx" = x"yes" ; then
       ARCHFLAGS="-march=pentium-mmx"
       proc_error_msg="yes"
   elif test x"$arch_raw" = x"i586" -a x"$mmx" = x"no" ; then
       ARCHFLAGS="-march=i586"
       proc_error_msg="yes"
   elif test x"$arch_raw" = x"i486"; then
       ARCHFLAGS="-march=i486"
       proc_error_msg="yes"
   elif test x"$arch_raw" = x"i386"; then
       ARCHFLAGS="-march=i386"
       proc_error_msg="yes"
   fi
fi

if test x"$tune" = x"generic" -a x"$arch" = x"x86_64" -a x"$cpu_overide" != x"yes"; then
   ARCHFLAGS="-march=k8"
elif test x"$tune" = x"generic" -a x"$arch" = x"sparc64" -a x"$cpu_overide" != x"yes"; then
   ARCHFLAGS="-mcpu=ultrasparc -mvis"
fi

if test x"$proc_error_msg" = x"yes"; then
    UNAME_M_INFO=` uname -m 2> /dev/null`
    UNAME_P_INFO=` uname -p 2> /dev/null`
    PROC_INFO=`cat /proc/cpuinfo | grep "model name" | head -n 1 | sed s/"\t"//g 2>/dev/null`
    PROC_FLAG=`cat /proc/cpuinfo | grep "flags" | head -n 1 | sed s/"\t"//g 2>/dev/null`
    echo ""
    echo " *** WARNING *** "
    echo " Your CPU was not detected properly:"
    echo "   uname -m: $UNAME_M_INFO"
    echo "   uname -p: $UNAME_P_INFO"
    echo " $PROC_INFO"
    echo "      $PROC_FLAG"
    echo ""
    echo " If you are using a recent checkout from "
    echo "   http://svn.mythtv.org/svn/trunk/mythtv "
    echo " please e-mail the above to mythtv-users@mythtv.org"
    echo " With the subject \"configure did not detect my cpu\""
    echo ""
fi

if test x"$proc_opt" = x"no"; then
    test x"$optimize" = X"no" && optimize="yes"
    if test x"$cpu_cmov" = x"yes" -a x"$ARCHFLAGS" != x"-march=k8"; then
        ARCHFLAGS="-march=pentiumpro";
    fi
fi

# if cpu flag is present ignore tune and arch and just use cpu
if test x"$cpu" != x""; then
    ARCHFLAGS="-march=$cpu"
fi

# if architecture specific flags don't work blank them
echo "int main( void ) { return 0; }" > $TMPC
TMP_ARCHFLAGS=$ARCHFLAGS
$cc $CFLAGS $ARCHFLAGS -o $TMPE $TMPC 2> /dev/null || ARCHFLAGS=""
if test x"$ARCHFLAGS" = x""; then
    if test "$cpu_overide" = "yes" -o x"$tune_raw" != x""; then
        echo "ERROR: CPU specific ./configure options failed compile test"
        echo "       Removing CPU specific compilation options. ($TMP_ARCHFLAGS)"
        echo ""
    fi
fi

# check armv5te instructions support
if test $armv5te = "default" -a $arch = "armv4l"; then
    armv5te=no
    check_cc <<EOF && armv5te=yes
        int main(void) {
        __asm__ __volatile__ ("qadd r0, r0, r0");
        }
EOF
fi

if test $armv6 = "default" -a $arch = "armv4l"; then
    check_cc <<EOF && armv6=yes || armv6=no
int main(void) {
    __asm__ __volatile__ ("sadd16 r0, r0, r0");
}
EOF
fi

# check iwmmxt support
if test $iwmmxt = "default" -a $arch = "armv4l"; then
    iwmmxt=no
    check_cc <<EOF && iwmmxt=yes
        int main(void) {
        __asm__ __volatile__ ("wunpckelub wr6, wr4");
        }
EOF
fi

# mmi only available on mips
if test $mmi = "default"; then
    if test $arch = "mips"; then
        mmi="yes"
    else
        mmi="no"
    fi
fi

# check if our compiler supports mmi
enabled mmi && check_cc <<EOF || mmi="no"
int main(void) {
    __asm__ ("lq \$2, 0(\$2)");
    return 0;
}
EOF

# "CPU_CLIP" test for SRC / libsamplerate
# test positive wrap
cat > $TMPC << EOF
int main(){
    float f = (1<<(sizeof(short)*8))>>1;
    short s = (short)f;
    if ( s == --f )
        return(0);
    return(1);
}
EOF

if $cc $CFLAGS $ECFLAGS -o $TMPE $TMPC 2>/dev/null ; then
$TMPE && cpuclipspositive="yes"
fi

# test negative wrap
cat > $TMPC << EOF
int main(){
    float f = -((1<<(sizeof(short)*8))>>1) - 1;
    short s = (short)f;
    if ( s == ++f)
        return(0);
    return(1);
}
EOF

if $cc $CFLAGS $ECFLAGS -o $TMPE $TMPC 2>/dev/null ; then
$TMPE && cpuclipsnegative="yes"
fi

# test for distcc
if test x"$distcc" = x"yes"; then
    if test x"`distcc --version 2> /dev/null`" = x""; then
        distcc="no"
    else
        XYZ=`which $cc`
        if test x"$XYZ" != x"" -a x"`ls -l $XYZ | grep distcc`" != x""; then
            distcc="yes, using distcc symlinked $cc"
        fi
    fi
fi

# test for ccache
if test x"$ccache" = x"yes"; then
    if test x"`ccache -V 2> /dev/null`" = x""; then
        ccache="no"
    else
        XYZ=`which $cc`
        if test x"$XYZ" != x"" -a x"`ls -l $XYZ | grep ccache`" != x""; then
            ccache="yes, using ccache symlinked $cc"
        fi
    fi
fi

# ccache should be used before distcc for better cache coherency
if test x"$distcc" = x"yes"; then
    if test x"$ccache" = x"no"; then
        cc="distcc $cc"
        cxx="distcc $cxx"
    elif test x"$ccache" = x"yes"; then
        cc="ccache distcc $cc"
        cxx="ccache distcc $cxx"
    else
        distcc="not using distcc explicitly, since ccache symlink is present"
    fi
else
    if test x"$ccache" = x"yes"; then
        cc="ccache $cc"
        cxx="ccache $cxx"
    fi
fi

# ---
# big/little-endian test
if disabled cross_compile; then
    check_ld <<EOF || die "endian test failed" && $TMPE && bigendian="yes"
#include <inttypes.h>
int main(int argc, char ** argv){
        volatile uint32_t i=0x01234567;
        return (*((uint8_t*)(&i))) == 0x67;
}
EOF
else
    # programs cannot be launched if cross compiling, so make a static guess
    if test "$arch" = "powerpc" -o "$arch" = "mips" ; then
        bigendian="yes"
    fi
fi

# ---
# check availability of some header files

check_header malloc.h
check_func memalign

if disabled_all memalign memalign_hack && enabled need_memalign ; then
    die "Error, no memalign() but SSE enabled, disable it or use --enable-memalign-hack."
fi

check_header byteswap.h
check_header arpa/inet.h

check_ld <<EOF && ftime=yes || ftime=no
#include <sys/timeb.h>
int main( void ) { ftime(0); }
EOF

check_ld << EOF && gettimeofday=yes || gettimeofday=no
#include <sys/time.h>
int main( void ) { gettimeofday(0, 0); }
EOF

check_ld <<EOF && getifaddrs=yes || getifaddrs=no
#include <sys/types.h>
#include <sys/socket.h>
#include <ifaddrs.h>
int main( void ) { struct ifaddrs *p; getifaddrs(&p); }
EOF


check_func inet_aton
check_func localtime_r
check_func posix_fadvise
enabled zlib && check_lib zlib.h zlibVersion -lz || zlib="no"

# ffserver uses poll(),
# if it's not found we can emulate it using select().
if enabled ffserver; then
    check_header sys/poll.h
fi

# check for some common methods of building with pthread support
# do this before the optional library checks as some of them require pthreads
if enabled pthreads; then
    if check_func pthread_create; then
        :
    elif check_func pthread_create -pthread; then
        add_cflags -pthread
        add_ldflags -pthread
    elif check_func pthread_create -pthreads; then
        add_cflags -pthreads
        add_ldflags -pthreads
    elif ! check_lib pthread.h pthread_create -lpthread; then
        die "ERROR: can't find pthreads library"
    fi
fi

for thread in $THREADS_LIST; do
    if enabled $thread; then
        if ! disabled thread_type ; then
            die "ERROR: Only one thread type must be selected."
        else
            thread_type="$thread"
        fi
    fi
done

enabled_any amr_nb amr_nb_fixed amr_wb && enable amr
enabled_all amr_nb amr_nb_fixed &&
    die "Only one of amr_nb and amr_nb_fixed may be enabled."

if test x"$libdts" = x"yes"; then
    dtslib=""
    if has_library libdts_pic ; then
        dtslib="-ldts_pic"
    elif has_library libdts ; then
        dtslib="-ldts"
    else
        echo "Warning: DTS library not found."
    fi
fi

# these are off by default, so fail if requested and not available
enabled amr_nb     && require libamrnb amrnb/interf_dec.h Speech_Decode_Frame_init -lamrnb -lm
enabled amr_wb     && require libamrwb amrwb/dec_if.h D_IF_init -lamrwb -lm
enabled liba52     && require liba52 a52dec/a52.h a52_init -la52
enabled libdts     && require libdts dts.h dts_init $dtslib
enabled libgsm     && require libgsm gsm.h gsm_create -lgsm
enabled libmp3lame && require LAME lame/lame.h lame_init -lmp3lame -lm
enabled libtheora  && require libtheora theora/theora.h theora_info_init -ltheora -logg
enabled libvorbis  && require libvorbis vorbis/vorbisenc.h vorbis_info_init -lvorbis -lvorbisenc -logg
enabled libogg     && require libogg ogg/ogg.h ogg_sync_init -logg
enabled libnut     && require libnut libnut.h nut_demuxer_init -lnut
enabled xvid       && require XviD xvid.h xvid_global -lxvidcore
enabled x264       && require x264 x264.h x264_encoder_open -lx264
enabled dc1394     && require libdc1394 libdc1394/dc1394_control.h dc1394_create_handle -ldc1394_control -lraw1394
enabled mlib       && require mediaLib mlib_types.h mlib_VectorSub_S16_U8_Mod -lmlib
enabled libfaac    && require2 libfaac "stdint.h faac.h" faacEncGetVersion -lfaac
enabled libfaad    && require2 libfaad faad.h faacDecOpen -lfaad
enabled avisynth   && require2 vfw32 "windows.h vfw.h" AVIFileInit -lvfw32


check_header stdint.h && _stdint_h=yes || _stdint_h=no

# test for lrint in math.h
check_exec <<EOF && lrint=yes || lrint=no
#define _ISOC9X_SOURCE  1
#include <math.h>
int main( void ) { return (lrint(3.999f) > 0)?0:1; }
EOF

# test for lrintf in math.h
check_exec <<EOF && lrintf=yes || lrintf=no
#define _ISOC9X_SOURCE  1
#include <math.h>
int main( void ) { return (lrintf(3.999f) > 0)?0:1; }
EOF

#test for round()
check_exec <<EOF && round=yes || round=no
#define _ISOC9X_SOURCE  1
#include <math.h>
int main( void ) { return (round(3.999f) > 0)?0:1; }
EOF

# test for sizeof(int)
for sizeof in 1 2 4 8 16; do
    check_cc <<EOF && _sizeof_int=$sizeof && break
void foo(){switch (0) case 0: case (sizeof(int) == $sizeof):;}
EOF
done

# test for sizeof(long)
for sizeof in 1 2 4 8 16; do
  check_cc <<EOF && _sizeof_long=$sizeof && break
void foo(){switch (0) case 0: case (sizeof(long) == $sizeof):;}
EOF
done

_restrict=
for restrict_keyword in restrict __restrict__ __restrict; do
    check_cc <<EOF && _restrict=$restrict_keyword && break
void foo(char * $restrict_keyword p);
EOF
done

# dlopen/dlfcn.h probing
check_header dlfcn.h

if check_func dlopen; then
    ldl=
elif check_func dlopen -ldl; then
    ldl=-ldl
fi

test "$vhook" = "default" && vhook="$dlopen"

enabled_any vhook liba52bin libfaadbin ffserver && add_extralibs $ldl

if test "$targetos" = cygwin && enabled static ; then
    vhook="no"
    echo
    echo "At the moment vhooks don't work on Cygwin static builds."
    echo "Patches welcome."
    echo
fi

if enabled vhook; then
    check_ldflags -rdynamic
    check_ldflags -export-dynamic
fi

enabled audio_beos && add_extralibs "-lmedia -lbe"

check_foo_config imlib2 imlib2 Imlib2.h imlib_load_font
check_foo_config freetype2 freetype ft2build.h FT_Init_FreeType

##########################################
# SDL check

sdl_too_old=no
sdl=no
#SDL_CONFIG="${cross_prefix}sdl-config"
if "${SDL_CONFIG}" --version >/dev/null 2>&1; then
    sdl_cflags=`"${SDL_CONFIG}" --cflags`
    temp_cflags $sdl_cflags
    temp_extralibs `"${SDL_CONFIG}" --libs`
    if check_lib SDL.h SDL_Init; then
        _sdlversion=`"${SDL_CONFIG}" --version | sed 's/[^0-9]//g'`
        if test "$_sdlversion" -lt 121 ; then
            sdl_too_old=yes
        else
            sdl=yes
            check_cc $sdl_cflags <<EOF && enable sdl_video_size
#include <SDL.h>
int main(void){
    const SDL_VideoInfo *vi = SDL_GetVideoInfo();
    int w = vi->current_w;
    return 0;
}
EOF
        fi
    fi
    restore_flags
fi

texi2html -version >/dev/null 2>&1 && enable texi2html || disable texi2html

##########################################
# IPv6 check

enabled network && enabled ipv6 && check_ld <<EOF && ipv6=yes || ipv6=no
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
int main( void ) {
  struct sockaddr_storage saddr;
  struct ipv6_mreq mreq6;
  getaddrinfo(0,0,0,0);
  getnameinfo(0,0,0,0,0,0,0);
  IN6_IS_ADDR_MULTICAST((const struct in6_addr *)0);
}
EOF

enabled v4l  && check_header linux/videodev.h  || disable v4l
enabled v4l2 && check_header linux/videodev2.h || disable v4l2

##########################################
# OSS probe

enabled audio_oss &&
    check_header sys/soundcard.h ||
    check_header soundcard.h ||
    disable audio_oss

if test x"$audio_oss" = x"default" -o x"$audio_oss" = x"yes" ; then

cat > $TMPC << EOF
#include <sys/ioctl.h>
#include <sys/soundcard.h>
int main(void) { return (int) EV_SEQ_LOCAL; }
EOF

   audio_oss=no
   if $cc -o $TMPE $TMPC > /dev/null 2>&1; then
      sys_soundcard_h=yes
      audio_oss=yes
   elif test "$targetos" = "openbsd" ; then
      soundcard_h=yes
      audio_oss=yes
   fi
fi

##########################################
# ALSA probe

if test x"$audio_alsa" = x"default" -o x"$audio_alsa" = x"yes" ; then

cat > $TMPC << EOF
#include <alsa/asoundlib.h>
int main(void) { return (int) SND_LIB_MAJOR; }
EOF

audio_alsa=no
audio_alsa_libs="-lasound"
if $cc -o $TMPE $TMPC $audio_alsa_libs > /dev/null 2>&1; then
audio_alsa=yes
fi

fi

##########################################
# aRts probe

if test x"$audio_arts" = x"default" -o x"$audio_arts" = x"yes" ; then

cat > $TMPC << EOF
#include <artsc.h>
int main(void) { return (int) ARTS_P_BUFFER_SIZE; }
EOF

audio_arts=no
if (artsc-config --version) > /dev/null 2>&1; then
    audio_arts_libs=`artsc-config --libs`
    audio_arts_tmp=`artsc-config --cflags`
    if $cc -o $TMPE $TMPC $audio_arts_tmp $audio_arts_libs > /dev/null 2>&1; then
        audio_arts_cflags=`echo $audio_arts_tmp`
        audio_arts=yes
    else
        audio_arts_cflags=`echo $audio_arts_tmp | sed "s/include\/artsc/include/g"`
        if $cc -o $TMPE $TMPC $audio_arts_cflags $audio_arts_libs > /dev/null 2>&1; then
            audio_arts=yes
        fi
    fi
fi

fi

##########################################
# JACK probe

if test x"$audio_jack" = x"default" -o x"$audio_jack" = x"yes" ; then

cat > $TMPC << EOF
#include <jack/jack.h>
int main(void) { return (int) JACK_MAX_FRAMES; }
EOF

audio_jack=no
audio_jack_libs="-ljack"
if $cc -o $TMPE $TMPC $audio_jack_libs > /dev/null 2>&1; then
audio_jack=yes
fi

fi

# check for ioctl_meteor.h, ioctl_bt848.h and alternatives
if enabled bktr; then
    { check_header dev/bktr/ioctl_meteor.h &&
      check_header dev/bktr/ioctl_bt848.h; } ||
    { check_header machine/ioctl_meteor.h &&
      check_header machine/ioctl_bt848.h; } ||
    { check_header dev/video/meteor/ioctl_meteor.h &&
      check_header dev/video/bktr/ioctl_bt848.h; } ||
    check_header dev/ic/bt8xx.h ||
    disable bktr
fi

# Deal with the x11 frame grabber
enabled x11grab                         &&
enabled gpl                             &&
enabled x11_grab_device_demuxer         &&
check_header X11/Xlib.h                 &&
check_header X11/extensions/XShm.h      &&
check_func XOpenDisplay -lX11           &&
check_func XShmCreateImage -lX11 -lXext &&
add_extralibs -lX11 -lXext              ||
disable x11_grab_device_demuxer

enabled debug && add_cflags -g

# add some useful compiler flags if supported
#check_cflags -Wdeclaration-after-statement
check_cflags -Wall
check_cflags -Wno-switch
check_cflags -Wdisabled-optimization
check_cflags -Wpointer-arith
check_cflags -Wredundant-decls
#check_cflags -Wno-pointer-sign
enabled extra_warnings && check_cflags -Winline
check_cppflags -Wno-non-virtual-dtor
#needed for INT64_C in libs/libavformat under g++
check_cppflags -D__STDC_CONSTANT_MACROS

# add some linker flags
check_ldflags $LDLATEFLAGS

# GCC version
cat > $TMPC << EOF
int main(int argc, char **argv)
{
    int ret = 0;
    if (argc == 1)
    {
        #if defined(__GNUC__)
            ret = __GNUC__;
        #endif
    }
    else
    {
        #if defined(__GNUC_MINOR__)
            ret = __GNUC_MINOR__;
        #endif
    }

    return ret;
}
EOF

if $cc $CFLAGS $TMPC -o $TMPE ; then
    $TMPE
    GCC_MAJOR=$?
    $TMPE "minor"
    GCC_MINOR=$?
fi

if test x"$symbol_visibility" = x"yes"; then
    if test x"$GCC_MAJOR" = x"4" ; then
        check_cflags -fvisibility-inlines-hidden
        ECXXFLAGS="$ECXXFLAGS -fvisibility-inlines-hidden"
        CCONFIG="$CCONFIG use_hidesyms"
    else
        echo "Warning: --enable-symbol-visibility requires gcc 4.x"
    fi
fi

if test x"$dvb" = x"yes" ; then
    dvb="no"
    if test -f "$dvb_path"/linux/dvb/frontend.h ; then
        if test -f "$dvb_path"/../MAINTAINERS ; then
            echo "Warning: DVB location in kernel. May not compile."
        fi
        dvb="yes"
    else
        dvb_path="/usr/src/linux/include"
        KERNEL_RELEASE=`uname -r 2>/dev/null`
        if test x"$KERNEL_RELEASE" != x"" ; then
            dvb_path="/usr/src/linux-$KERNEL_RELEASE/include"
        fi

        if test -f "$dvb_path"/linux/dvb/frontend.h ; then
            if test -f "$dvb_path"/../MAINTAINERS ; then
                echo "Warning: DVB location in kernel. May not compile."
            fi
            dvb="yes"
        else
            echo "DVB location needs to have linux/dvb/frontend.h [$dvb_path]"
        fi
    fi
fi

lamemp3="no"
if has_library libmp3lame ; then
    if has_header lame/lame.h ; then
        lamemp3="yes"
    fi
fi

if test x"$lamemp3" = x"no" ; then
    echo "You must have the Lame MP3 encoding library installed to compile Myth."
    exit 255
fi

#test for lirc client libraries
if test x"$lirc" = x"yes" ; then
    lirc="no"
    if has_library liblirc_client ; then
        lirc="yes"
    fi
fi

#test for lirc client header
if test x"$lirc" = x"yes" ; then
   lirc="no"
cat > $TMPC << EOF
#include <lirc/lirc_client.h>
int main( void ) { return 0; }
EOF

    if $cc $CFLAGS $ARCHFLAGS -o $TMPE $TMPC 2> /dev/null ; then
        lirc="yes"
    fi
fi


if test x"$firewire" = x"yes" ; then
    firewire="no"
    libavc_5_3="no"
    if has_library libiec61883 -a \
       has_library libavc1394 -a \
       has_library librom1394; then
        if test x`which pkg-config 2>/dev/null` != x"" ; then
            if `pkg-config --atleast-version 0.5.0 libavc1394` ; then
                if `pkg-config --atleast-version 1.0.0 libiec61883` ; then
                    firewire="yes"
                    if `pkg-config --atleast-version 0.5.3 libavc1394` ; then
                        libavc_5_3="yes"
                    fi
                fi
            fi
        fi
    fi
    if test x"$darwin" = x"yes" ; then
        # This should pick the newest. e.g. FireWireSDK21 instead of 20
        # Unfortunately, the location keeps changing:
        #/Developer/FireWireSDK20/Examples/AVCVideoServices/Framework
        #/Developer/FireWireSDK21/Examples/Framework
        mac_avc=`find /Developer/FireWireSDK* -name Framework 2> /dev/null \
                 | tail -n 1`
        if test -d "$mac_avc" ; then
            firewire="yes"
        else
            echo Firewire being disabled. /Developer/FireWireSDK* missing
        fi
    fi
fi

if test x"$x11" = x"yes" ; then
    x11="no"
    if has_library libX11 ; then
        x11="yes"
    fi
fi

if test x"$x11" = x"no" ; then 
    xrandr="no" 
    xv="no" 
    xvmc="no" 
    xvmc_vld="no"
fi

if test x"$xrandr" = x"yes" ; then
    xrandr="no"
    if has_header X11/extensions/Xrandr.h ; then
        xrandr="yes"
    fi
fi

if test x"$xv" = x"yes" ; then
    xv="no"
    if has_library libXv ; then
        xv="yes"
    fi
fi

VENDOR_XVMC_LIBS=""
if test x"$xvmc" = x"yes"; then
    xvmc="no"
    if ! has_library libXvMCW ; then
        xvmcw="no"
    fi
    if test x"$xvmc_lib" != x""; then
        VENDOR_XVMC_LIBS="-l"$xvmc_lib
        xvmc="yes"
        xvmcw="no"
        if has_header X11/extensions/vldXvMC.h ; then
            echo > /dev/null
        else
            xvmc_vld="no"
        fi
    elif test x"$xvmcw" = x"yes" ; then
        CCONFIG="$CCONFIG using_xvmcw"
        VENDOR_XVMC_LIBS="-lXvMCW"
        xvmc="yes"
        if has_header X11/extensions/vldXvMC.h ; then
            echo > /dev/null
        else
            xvmc_vld="no"
        fi
    elif has_library libXvMCNVIDIA ; then
        VENDOR_XVMC_LIBS="-lXvMCNVIDIA"
        xvmc="yes"
        if test x"$xvmc_vld" = x"yes"; then
            xvmc_vld="no"
        fi
    elif test x"$xvmc_pro" = x"yes"; then
        if has_library libviaXvMCPro ; then
            VENDOR_XVMC_LIBS="-lviaXvMCPro"
            xvmc="yes"
            xvmc_vld="yes"
        fi
    elif has_library libviaXvMC ; then
        VENDOR_XVMC_LIBS="-lviaXvMC"
        xvmc="yes"
    elif has_library libI810XvMC ; then
        VENDOR_XVMC_LIBS="-lI810XvMC"
        xvmc="yes"
        if test x"$xvmc_vld" = x"yes"; then
            xvmc_vld="no"
        fi
    fi
else
    xvmc_vld="no"
fi

if test x"$VENDOR_XVMC_LIBS" != x"-lXvMCNVIDIA" ; then
    xvmc_opengl="no"
fi

if ! has_library libGL ; then
    xvmc_opengl="no"
    opengl_vsync="no"
fi

if test x"$opengl_vsync" = x"yes" ; then
    opengl="yes"
fi

if test x"$xvmc_opengl" = x"yes" ; then
    opengl="yes"
    xvmc_vld="no"
    xvmc_pro="no"
fi

if test x"$dvdv" = x"yes" ; then
    # Can only do Mac accel on Mac platform
    if test $targetos != darwin; then
        dvdv="no"
    fi
fi

# CoreVideo in only available on Mac OS 10.4, or on 10.3 with QuickTime 7.
# This checks for it, and some other calls that the module needs
if test $targetos = darwin; then
    cat > $TMPC << EOF
#include <QuartzCore/CVDisplayLink.h>
#include <AGL/agl.h>
int main( void ) { return aglGetCGLContext(0,0L); }
EOF
    if $cc -o $TMPE $TMPC -framework AGL > /dev/null 2>&1; then
        mac_corevideo="yes"
    fi
fi

# Ubuntu Dapper installs NVIDIA GL headers to a weird location in order
# not to overwrite the headers installed from Mesa, etc. We need to
# add that path to include paths if that's the case. 
if test -d /usr/share/doc/nvidia-glx-dev/include; then 
    CONFIG_INCLUDEPATH="$CONFIG_INCLUDEPATH /usr/share/doc/nvidia-glx-dev/include"
fi

# Same for Debian Sid.
if test -d /usr/share/nvidia/include/GL; then 
    CONFIG_INCLUDEPATH="$CONFIG_INCLUDEPATH /usr/share/nvidia/include"
fi

if test x"$directfb" = x"yes" ; then
    directfb="no"
    if test x`which directfb-config 2> /dev/null` != x"" ; then
        directfb="yes"
        CONFIG_DIRECTFB_LIBS=`directfb-config --libs`
        CONFIG_DIRECTFB_CXXFLAGS=`directfb-config --cflags`
    fi
fi

lmsensors="no"
if has_header "sensors/sensors.h" && has_library libsensors ; then
    lmsensors="yes"
fi

if test $targetos = darwin; then
    # So far, only OS X 10.4 has this as a non-private framework
    if test -d /System/Library/Frameworks/DiskArbitration.framework/Headers ; then
        darwin_da="yes"
    fi
fi

# not all compilers support -Os
#test "$optimize" = "small" && check_cflags -Os
# disabling -Os for now (2007-01-31) since it has build problems after ffmpeg sync [12645]
test "$optimize" = "small" && check_cflags -O2

if enabled optimize; then
    if test -n "`$cc -v 2>&1 | grep xlc`"; then
        add_cflags  "-O5"
        add_ldflags "-O5"
    else
        add_cflags "-O3"
    fi
fi

# PIC flags for shared library objects where they are needed
if enabled shared; then
    # LIBOBJFLAGS may have already been set in the OS configuration
    if test -z "$LIBOBJFLAGS" ; then
        case "$arch" in
            x86_64|ia64|alpha|sparc*|power*) LIBOBJFLAGS="\$(PIC)" ;;
        esac
    fi
fi

if enabled gprof; then
    add_cflags  "-p"
    add_ldflags "-p"
fi

VHOOKCFLAGS="-fPIC $CFLAGS"
enabled needmdynamicnopic && add_cflags -mdynamic-no-pic

# find if .align arg is power-of-two or not
if test $asmalign_pot = "unknown"; then
    asmalign_pot="no"
    echo 'asm (".align 3");' | check_cc && asmalign_pot="yes"
fi

enabled_any $ENCODER_LIST && enable encoders
enabled_any $DECODER_LIST && enable decoders
enabled_any $MUXER_LIST   && enable muxers
enabled_any $DEMUXER_LIST && enable demuxers

enabled_any $THREADS_LIST && enable threads

check_deps $CONFIG_LIST $HAVE_LIST $DECODER_LIST $ENCODER_LIST $PARSER_LIST \
    $DEMUXER_LIST $MUXER_LIST $MYTH_LIST

enabled libogg    && append pkg_requires "ogg >= 1.1"
enabled libtheora && append pkg_requires "theora"
enabled libvorbis && append pkg_requires "vorbis vorbisenc"
enabled dc1394    && append pkg_requires "libraw1394"


if test x"$libdir" = x""; then
    libdir="${PREFIX}/${libdir_name}"
fi


echo "# Basic Settings"
echo "Compile type     $compile_type"
if test x"$compile_type" = x"debug" -a $arch = "x86_32" -a \
        x"$GCC_MAJOR" != x"" -a $GCC_MAJOR -lt "4"; then
    echo "WARNING: backtraces involving libavcodec are not supported for gcc < 4.0"
fi
echo "Compiler cache   $ccache"
echo "DistCC           $distcc"
echo "Install prefix   $PREFIX"
#echo "Source path      $source_path"
#echo "C compiler       $cc"
#echo "make             $make"
if test x"$processor" != x"" ; then
    echo "CPU              $arch ($processor)"
elif test x"$arch_raw" != x"" ; then
    echo "CPU              $arch ($arch_raw)"
else
    echo "CPU              $arch"
fi
#if test "$BUILDSUF" != ""; then
#    echo "Build suffix     $BUILDSUF"
#fi
echo "big-endian       $bigendian"
if test $arch = "x86_32" -o $arch = "x86_64"; then
    echo "MMX enabled      $mmx"
    #echo "CMOV enabled     $cmov"
    #echo "CMOV is fast     $fast_cmov"
fi
if test $arch = "armv4l"; then
    echo "ARMv5TE enabled           $armv5te"
    echo "ARMv6 enabled             $armv6"
    echo "IWMMXT enabled            $iwmmxt"
fi
if test $arch = "mips"; then
    echo "MMI enabled               $mmi"
fi
if test $arch = "powerpc"; then
    echo "AltiVec enabled           $altivec"
    echo "dcbzl available           $dcbzl"
fi
#echo "gprof enabled             $gprof"
#echo "debug symbols             $debug"
#echo "strip symbols             $dostrip"
#echo "optimize                  $optimize"
#echo "static                    $static"
#echo "shared                    $shared"
#echo "postprocessing support    $pp"
#echo "software scaler enabled   $swscaler"
#echo "video hooking             $vhook"
#if enabled vhook; then
#    echo "Imlib2 support            $imlib2"
#    echo "FreeType support          $freetype2"
#fi
#echo "network support           $network"
#if enabled network ; then
#    echo "IPv6 support              $ipv6"
#fi
#echo "threading support         $thread_type"
#echo "SDL support               $sdl"
#if enabled sdl_too_old; then
#    echo "-> Your SDL version is too old - please upgrade to have FFplay/SDL support."
#fi
#echo "Sun medialib support      $mlib"
#echo "AVISynth enabled          $avisynth"
#echo "liba52 support            $liba52"
#echo "liba52 dlopened           $liba52bin"
#echo "libdts support            $libdts"
#echo "libfaac enabled           $libfaac"
#echo "libfaad enabled           $libfaad"
#echo "faadbin enabled           $libfaadbin"
#echo "libgsm enabled            $libgsm"
#echo "libmp3lame enabled        $libmp3lame"
#echo "libnut enabled            $libnut"
#echo "libogg enabled            $libogg"
#echo "libtheora enabled         $libtheora"
#echo "libvorbis enabled         $libvorbis"
#echo "x264 enabled              $x264"
#echo "XviD enabled              $xvid"
#echo "zlib enabled              $zlib"
#echo "AMR-NB float support      $amr_nb"
#echo "AMR-NB fixed support      $amr_nb_fixed"
#echo "AMR-WB float support      $amr_wb"
#echo "AMR-WB IF2 support        $amr_if2"
#if disabled gpl; then
#    echo "License: LGPL"
#else
#    echo "License: GPL"
#fi

echo
if test x"$frontend" = x"yes" ; then
  echo "# Input Support"
  echo "Joystick menu    $joystick_menu"
  echo "lirc support     $lirc"
  echo "Apple Remote     $appleremote"
fi

if test x"$backend" = x"yes" ; then
  echo "Video4Linux sup. $v4l"
  echo "ivtv support     $ivtv"
  echo "FireWire support $firewire"
  echo "DVB support      $dvb [$dvb_path]"
  echo "DBox2 support    $dbox2"
  echo "HDHomeRun sup.   $hdhomerun"
  echo "IPTV support     $iptv"
fi

if test x"$frontend" = x"yes" ; then
  echo
  echo "# Sound Output Support"
  echo "OSS support      $audio_oss"
  echo "ALSA support     $audio_alsa"
  echo "aRts support     $audio_arts"
  echo "JACK support     $audio_jack"
  echo "DTS passthrough  $libdts"
  echo
  echo "# Video Output Support"
  echo "x11 support      $x11"
  echo "xrandr support   $xrandr"
  echo "xv support       $xv"
  echo "XvMC support     $xvmc"
  echo "XvMC VLD support $xvmc_vld"
  echo "XvMC pro support $xvmc_pro"
  echo "XvMC OpenGL sup. $xvmc_opengl"
if test "$VENDOR_XVMC_LIBS" != "" ; then
  echo "XvMC libs        $VENDOR_XVMC_LIBS"
fi
  echo "Mac acceleration $dvdv"
  echo "OpenGL vsync     $opengl_vsync"
  echo "DirectFB         $directfb"
  if test x"$mingw32" = x"yes" -o x"$targetos" = x"cygwin" ; then
    echo "DirectX          $directx"
  fi
  echo
fi

echo "# Misc Features"
echo "Frontend         $frontend"
echo "Backend          $backend"
echo

echo "# Bindings"
printf "%-16.16s %s\n" "bindings_perl" "${bindings_perl}"
echo ""

MYTH_CONFIG_H=libs/libmyth/mythconfig.h
MYTH_CONFIG_MAK=libs/libmyth/mythconfig.mak
echo "Creating $MYTH_CONFIG_H and $MYTH_CONFIG_MAK"

date >> config.log
echo "   $0$FFMPEG_CONFIGURATION" >> config.log
echo "# Automatically generated by configure - do not modify" > $MYTH_CONFIG_MAK
echo "/* Automatically generated by configure - do not modify */" > $TMPH
echo "#define FFMPEG_CONFIGURATION \"$FFMPEG_CONFIGURATION\"" >> $TMPH

echo "PREFIX=$PREFIX" >> $MYTH_CONFIG_MAK
echo "LIBDIR=$libdir" >> $MYTH_CONFIG_MAK
#echo "shlibdir=$shlibdir" >> $MYTH_CONFIG_MAK
#echo "bindir=$bindir" >> $MYTH_CONFIG_MAK
#echo "mandir=$mandir" >> $MYTH_CONFIG_MAK
#echo "MAKE=$make" >> $MYTH_CONFIG_MAK
echo "QMAKE_CC=$cc" >> $MYTH_CONFIG_MAK
echo "QMAKE_CXX=$cxx" >> $MYTH_CONFIG_MAK
echo "QMAKE_LINK=$cxx" >> $MYTH_CONFIG_MAK
#echo "AR=$ar" >> $MYTH_CONFIG_MAK
#echo "RANLIB=$ranlib" >> $MYTH_CONFIG_MAK
#if enabled dostrip; then
#    echo "STRIP=$strip" >> config.mak
#else
#    echo "STRIP=echo ignoring strip" >> config.mak
#fi

## SHCFLAGS is a copy of CFLAGS without -mdynamic-no-pic.  Used when building
## shared modules on OS/X (vhook/Makefile).
#SHCFLAGS=$CFLAGS
#test "$needmdynamicnopic" = yes && add_cflags -mdynamic-no-pic

echo "ARCHFLAGS=$ARCHFLAGS" >> $MYTH_CONFIG_MAK
echo "PROFILEFLAGS=$PROFILEFLAGS" >> $MYTH_CONFIG_MAK
echo "OPTFLAGS=$CFLAGS" >> $MYTH_CONFIG_MAK
echo "ECFLAGS=$ECFLAGS" >> $MYTH_CONFIG_MAK
echo "ECXXFLAGS=$ECXXFLAGS" >> $MYTH_CONFIG_MAK
#echo "SHCFLAGS=$SHCFLAGS">>$MYTH_CONFIG_MAK
#echo "LDFLAGS=$LDFLAGS" >> $MYTH_CONFIG_MAK
#echo "FFSERVERLDFLAGS=$FFSERVERLDFLAGS" >> $MYTH_CONFIG_MAK
#echo "SHFLAGS=$SHFLAGS" >> $MYTH_CONFIG_MAK
#echo "VHOOKFLAGS=$VHOOKFLAGS" >> $MYTH_CONFIG_MAK
#echo "LIBOBJFLAGS=$LIBOBJFLAGS" >> config.mak
#echo "BUILD_STATIC=$static" >> config.mak
#echo "BUILDSUF=$BUILDSUF" >> $MYTH_CONFIG_MAK
#echo "LIBPREF=$LIBPREF" >> $MYTH_CONFIG_MAK
#echo "LIBSUF=\${BUILDSUF}$LIBSUF" >> $MYTH_CONFIG_MAK
#if enabled static; then
#  echo "LIB=$LIB" >> config.mak
#else # Some Make complain if this variable does not exist.
#  echo "LIB=" >> config.mak
#fi
#echo "SLIBPREF=$SLIBPREF" >> $MYTH_CONFIG_MAK
#echo "SLIBSUF=\${BUILDSUF}$SLIBSUF" >> $MYTH_CONFIG_MAK
#echo "EXESUF=\${BUILDSUF}$EXESUF" >> $MYTH_CONFIG_MAK

ucarch=`toupper $arch`
echo "TARGET_ARCH_${ucarch}=yes" >> $MYTH_CONFIG_MAK
echo "#define ARCH_${ucarch} 1" >> $TMPH

# special cases
case "$arch" in
    x86_32|x86_64)
        echo "TARGET_ARCH_X86=yes" >> $MYTH_CONFIG_MAK
        echo "#define ARCH_X86 1" >> $TMPH
        ;;
    powerpc)
        if test "$POWERPCMODE" = "64bits"; then
            echo "#define POWERPC_MODE_64BITS 1" >> $TMPH
        fi
        ;;
    sparc64)
        echo "TARGET_ARCH_SPARC=yes" >> $MYTH_CONFIG_MAK
        echo "#define ARCH_SPARC 1" >> $TMPH
        ;;
esac

if enabled bigendian; then
  echo "WORDS_BIGENDIAN=yes" >> $MYTH_CONFIG_MAK
  echo "#define WORDS_BIGENDIAN 1" >> $TMPH
fi
if enabled mmx; then
  echo "#define __CPU__ 586" >> $TMPH
fi
if test "$cpuclipspositive" = "yes"; then
  echo "#define CPU_CLIPS_POSITIVE 1" >> $TMPH
else
  echo "#define CPU_CLIPS_POSITIVE 0" >> $TMPH
fi
if test "$cpuclipsnegative" = "yes"; then
  echo "#define CPU_CLIPS_NEGATIVE 1" >> $TMPH
else
  echo "#define CPU_CLIPS_NEGATIVE 0" >> $TMPH
fi
if test "$freetype2" = "yes" ; then
  echo "HAVE_FREETYPE2=yes" >> $MYTH_CONFIG_MAK
  echo "FREETYPE_CFLAGS=`freetype-config --cflags`" >> $MYTH_CONFIG_MAK
  echo "FREETYPE_LIBS=`freetype-config --libs`" >> $MYTH_CONFIG_MAK
fi
if test "$lmsensors" = "yes" ; then
  CCONFIG="$CCONFIG using_lmsensors"
fi
if enabled sdl; then
    echo "SDL_LIBS=`"${SDL_CONFIG}" --libs`" >> $MYTH_CONFIG_MAK
  echo "SDL_CFLAGS=`"${SDL_CONFIG}" --cflags`" >> $MYTH_CONFIG_MAK
fi
if enabled texi2html; then
  echo "BUILD_DOC=yes" >> $MYTH_CONFIG_MAK
fi
echo "#define SIZEOF_INT $_sizeof_int" >> $TMPH
echo "#define SIZEOF_LONG $_sizeof_long" >> $TMPH
if enabled lshared; then
  echo "BUILD_SHARED=yes" >> $MYTH_CONFIG_MAK
  echo "PIC=-fPIC -DPIC" >> $MYTH_CONFIG_MAK
fi
if enabled libdts; then
  echo "CONFIG_DTSLIB=$dtslib" >>  $MYTH_CONFIG_MAK
fi
if test x"$pthreads" = x"yes" ; then
  CCONFIG="$CCONFIG using_ffmpeg_threads"
  if test $targetos != freebsd -a $targetos != openbsd ; then
     extralibs="$extralibs -lpthread"
  fi
fi
echo "" >>$MYTH_CONFIG_MAK

if test x"$v4l" = x"yes" ; then
  CCONFIG="$CCONFIG using_v4l"
fi

if test "$audio_oss" = "yes" ; then
    CCONFIG="$CCONFIG using_oss"
fi
if test "$audio_alsa" = "yes" ; then
    CCONFIG="$CCONFIG using_alsa"
  echo "CONFIG_AUDIO_ALSA_LIBS=$audio_alsa_libs" >> $MYTH_CONFIG_MAK
fi

if test "$audio_arts" = "yes" ; then
    CCONFIG="$CCONFIG using_arts"
  echo "CONFIG_AUDIO_ARTS_LIBS=$audio_arts_libs" >> $MYTH_CONFIG_MAK
  echo "CONFIG_AUDIO_ARTS_CFLAGS=$audio_arts_cflags" >> $MYTH_CONFIG_MAK
fi

if test "$audio_jack" = "yes" ; then
    CCONFIG="$CCONFIG using_jack"
  echo "CONFIG_AUDIO_JACK_LIBS=$audio_jack_libs" >> $MYTH_CONFIG_MAK
fi

if test "$dvdv" = "yes" ; then
  CCONFIG="$CCONFIG using_dvdv"
fi

if test "$mac_bundle" = "yes"; then
  CCONFIG="$CCONFIG mac_bundle"
fi

if test "$mac_corevideo" = "yes"; then
  CCONFIG="$CCONFIG using_corevideo"
fi

if test x"$targetos" = x"cygwin" ; then
  echo "#define CONFIG_CYGWIN 1" >> $TMPH
  echo "#ifndef llrint" >> $TMPH
  echo "#define llrint llrint  // make sure not to define twice" >> $TMPH
  echo "static inline long long int llrint (double x)" >> $TMPH
  echo "{" >> $TMPH
  echo "    long long int llrintres;" >> $TMPH
  echo "    asm" >> $TMPH
  echo "    (\"fistpll %0\"" >> $TMPH
  echo "    : \"=m\" (llrintres) : \"t\" (x) : \"st\");" >> $TMPH
  echo "    return llrintres;" >> $TMPH
  echo "}" >> $TMPH
  echo "#endif" >> $TMPH
fi

if test "$darwin_da" = "yes"; then
  CCONFIG="$CCONFIG darwin_da"
fi

print_config HAVE_   $TMPH $MYTH_CONFIG_MAK $HAVE_LIST
print_config CONFIG_ $TMPH $MYTH_CONFIG_MAK $CONFIG_LIST
print_config TARGET_ $TMPH $MYTH_CONFIG_MAK $TARGET_LIST

print_config CONFIG_ $TMPH $MYTH_CONFIG_MAK $MYTHTV_LIST

if test "$targetos" = darwin; then
  echo "#define CONFIG_DARWIN 1"  >> $TMPH
fi

echo "#define restrict $_restrict" >> $TMPH

if test "$optimize" = "small"; then
  echo "#define always_inline"  >> $TMPH
  echo "#define CONFIG_SMALL 1" >> $TMPH
fi

# Apparently it's not possible to portably echo a backslash.
if enabled asmalign_pot; then
  printf '#define ASMALIGN(ZEROBITS) ".align " #ZEROBITS "\\n\\t"\n' >> $TMPH
else
  printf '#define ASMALIGN(ZEROBITS) ".align 1<<" #ZEROBITS "\\n\\t"\n' >> $TMPH
fi

for part in $DECODER_LIST $ENCODER_LIST $PARSER_LIST $DEMUXER_LIST $MUXER_LIST; do
    ucname="`toupper $part`"
    config_name="CONFIG_$ucname"
    enabled_name="ENABLE_$ucname"
    if enabled $part; then
        echo "#define $config_name 1" >> $TMPH
        echo "#define $enabled_name 1" >> $TMPH
        echo "$config_name=yes" >> $MYTH_CONFIG_MAK
    else
        echo "#define $enabled_name 0" >> $TMPH
    fi
done

# build tree in object directory if source path is different from current one
if enabled source_path_used; then
    DIRS="libavformat libavcodec libavcodec/alpha libavcodec/armv4l libavcodec/i386 \
          libavcodec/ppc libavcodec/mlib libavcodec/libpostproc tests vhook"
    FILES="Makefile libavformat/Makefile libavcodec/Makefile libavcodec/libpostproc/Makefile tests/Makefile vhook/Makefile"
    for dir in $DIRS ; do
            mkdir -p $dir
    done
    for f in $FILES ; do
        ln -sf "$source_path/$f" $f
    done
fi
echo "SRC_PATH='$source_path'" >> $MYTH_CONFIG_MAK

if test x"$frontend" = x"no" ; then
    echo
    echo "WARNING: --disable-frontend is only intended to aid porting."
    echo "WARNING: THIS WILL BREAK THINGS. You are on your own now."
fi

if test x"$backend" = x"no" ; then
    echo
    echo "WARNING: --disable-backend is only intended to aid porting."
    echo "WARNING: You are on your own now."
fi

if test x"$proc_opt" = x"yes"; then
    echo
    echo "WARNING: When using --enable-proc-opt you must include the "
    echo "         output of ./configure along with any bug report."
fi

if test x"$proc_opt" = x"no" -a x"$dvb" = x"yes" ; then
    echo
    echo "WARNING: If you plan to watch HDTV recordings you probably"
    echo "         need to run ./configure with --enable-proc-opt   "
fi

echo # add a newline after any warnings.

if test x"$mmx" = x"yes"; then
  CONFIG_DEFINES="$CONFIG_DEFINES MMX"
  if test x"$arch" != x"x86_64" ; then
    CONFIG_DEFINES="$CONFIG_DEFINES i386"
  fi
fi

if test x"$ivtv" = x"yes" ; then
  CCONFIG="$CCONFIG using_ivtv"
fi

if test x"$firewire" = x"yes" ; then
  CCONFIG="$CCONFIG using_firewire"
  if test x"$darwin" = x"yes" ; then
      echo "CONFIG_MAC_AVC=$mac_avc" >>  $MYTH_CONFIG_MAK
  else
      echo "CONFIG_FIREWIRE_LIBS=-lraw1394 -liec61883 -lavc1394 -lrom1394" >>  $MYTH_CONFIG_MAK
      if test x"$libavc_5_3" = x"yes" ; then
        CCONFIG="$CCONFIG using_libavc_5_3"
      fi
  fi
fi

if test x"$dbox2" = x"yes" ; then
  CCONFIG="$CCONFIG using_dbox2"
fi

if test x"$hdhomerun" = x"yes" ; then
  CCONFIG="$CCONFIG using_hdhr"
fi

if test x"$iptv" = x"yes" ; then
    CCONFIG="$CCONFIG using_iptv using_live"
fi

if test x"$lirc" = x"yes" ; then
  CCONFIG="$CCONFIG using_lirc"
  echo "CONFIG_LIRC_LIBS=-llirc_client" >> $MYTH_CONFIG_MAK
fi

if test x"$appleremote" = x"yes" ; then
  CCONFIG="$CCONFIG using_appleremote"
  CONFIG_DEFINES="$CONFIG_DEFINES USING_APPLEREMOTE"
fi

if test "$joystick_menu" = "yes" ; then
  CCONFIG="$CCONFIG using_joystick_menu"
fi

if test x"$dvb" = x"yes" ; then
  CCONFIG="$CCONFIG using_dvb"
  CONFIG_INCLUDEPATH="$CONFIG_INCLUDEPATH $dvb_path"
fi

if test x"$x11" = x"yes" ; then
  CCONFIG="$CCONFIG using_x11"
  if [ -d $x11_include_path ] ; then
    CONFIG_INCLUDEPATH="$CONFIG_INCLUDEPATH $x11_include_path"
  fi
fi

if test x"$xv" = x"yes" ; then
  CCONFIG="$CCONFIG using_xv"
  echo "CONFIG_XV_LIBS=-lXinerama -lXv -lX11 -lXext -lXxf86vm" >> $MYTH_CONFIG_MAK
fi

if test x"$xrandr" = x"yes" ; then
  CCONFIG="$CCONFIG using_xrandr"
  echo "CONFIG_XRANDR_LIBS=-lXrandr" >> $MYTH_CONFIG_MAK
fi

if test x"$xvmc" = x"yes" ; then
  CCONFIG="$CCONFIG using_xvmc"
fi

if test x"$xvmc_vld" = x"yes" ; then
  CCONFIG="$CCONFIG using_xvmc_vld"
fi

if test x"$xvmc_opengl" = x"yes" ; then
  CCONFIG="$CCONFIG using_xvmc_opengl"
fi

if test x"$VENDOR_XVMC_LIBS" != x"" ; then
  echo "CONFIG_XVMC_LIBS=$VENDOR_XVMC_LIBS -lXvMC" >> $MYTH_CONFIG_MAK
  if test x"$VENDOR_XVMC_LIBS" = x"-lXvMCNVIDIA" ; then
      CCONFIG="$CCONFIG using_xvmc_pbuffer"
  fi
fi

if test x"$directfb" = x"yes" ; then
  CCONFIG="$CCONFIG using_directfb"
  echo "CONFIG_DIRECTFB_LIBS=$CONFIG_DIRECTFB_LIBS" >> $MYTH_CONFIG_MAK
  echo "CONFIG_DIRECTFB_CXXFLAGS=$CONFIG_DIRECTFB_CXXFLAGS" >> $MYTH_CONFIG_MAK
fi

if test x"$directx" = x"yes" ; then
  CCONFIG="$CCONFIG using_directx"
  CONFIG_DEFINES="$CONFIG_DEFINES USING_DIRECTX"
fi

if test x"$opengl_vsync" = x"yes" ; then
  CCONFIG="$CCONFIG using_opengl_vsync"
fi

if test x"$opengl" = x"yes" ; then
  CCONFIG="$CCONFIG using_opengl"
  echo "CONFIG_OPENGL_LIBS=-lGL -lGLU" >> $MYTH_CONFIG_MAK
fi

if test x"$valgrind" = x"yes" ; then
  CCONFIG="$CCONFIG using_valgrind"
fi

if test x"$frontend" = x"yes" ; then
  CCONFIG="$CCONFIG using_frontend"
fi

if test x"$backend" = x"yes" ; then
  CCONFIG="$CCONFIG using_backend"
fi

if test x"${bindings_perl}" = x"yes"; then
  CCONFIG="$CCONFIG using_bindings_perl"
fi

if test x"$CCONFIG" != x"" ; then
  echo "CCONFIG=$CCONFIG" >> $MYTH_CONFIG_MAK
  echo "#define MYTH_BUILD_CONFIG \"$CCONFIG\"" >>$TMPH
fi

if test x"$CONFIG_DEFINES" != x"" ; then
  echo "CONFIG_DEFINES=$CONFIG_DEFINES" >> $MYTH_CONFIG_MAK
fi

if test x"$CONFIG_INCLUDEPATH" != x"" ; then
  echo "CONFIG_INCLUDEPATH=$CONFIG_INCLUDEPATH" >> $MYTH_CONFIG_MAK
fi

if test x"$GCC_MAJOR" != x"" ; then
  echo "GCC_MAJOR=$GCC_MAJOR" >> $MYTH_CONFIG_MAK
fi

if test x"$GCC_MINOR" != x"" ; then
  echo "GCC_MINOR=$GCC_MINOR" >> $MYTH_CONFIG_MAK
fi

diff $TMPH $MYTH_CONFIG_H >/dev/null 2>&1
if test $? -ne 0 ; then
  mv -f $TMPH $MYTH_CONFIG_H
  rm -f config.h
else
  echo "$MYTH_CONFIG_H is unchanged"
fi

if ! test -L config.h ; then
  ln -s $MYTH_CONFIG_H config.h
fi

if [ ! -e config.h ] ; then
  ln -s $MYTH_CONFIG_H config.h
fi

rm -f config.mak
ln -s $MYTH_CONFIG_MAK config.mak

# Create a special cleanup makefile that will allow make clean to work
if [ ! -e config ] ; then
  mkdir config
fi
cat - > config/Makefile <<END

all:	
qmake_all:
	\$(NONE)

clean:
	\$(NONE)

install:
uninstall:
	\$(NONE)

distclean: clean
	-rm -f ../$MYTH_CONFIG_MAK  ../config.mak 
	-rm -f ../$MYTH_CONFIG_H    ../config.h
	-rm -f ../Makefile          ../config.err

END

rm -f $TMPO $TMPC $TMPE $TMPS $TMPH

qmake mythtv.pro
